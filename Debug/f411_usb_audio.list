
f411_usb_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009750  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080098e8  080098e8  000198e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009954  08009954  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800995c  0800995c  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800995c  0800995c  0001995c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009960  08009960  00019960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08009964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047a0  2000012c  08009a90  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200048cc  08009a90  000248cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019131  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045af  00000000  00000000  0003928d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0003d840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  0003edd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c863  00000000  00000000  00040148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0d7  00000000  00000000  0005c9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009de36  00000000  00000000  0007aa82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001188b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005794  00000000  00000000  00118908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000012c 	.word	0x2000012c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080098d0 	.word	0x080098d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000130 	.word	0x20000130
 80001d4:	080098d0 	.word	0x080098d0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004e2:	463b      	mov	r3, r7
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <MX_ADC1_Init+0x98>)
 80004f0:	4a21      	ldr	r2, [pc, #132]	; (8000578 <MX_ADC1_Init+0x9c>)
 80004f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004f4:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <MX_ADC1_Init+0x98>)
 80004f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fc:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_ADC1_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_ADC1_Init+0x98>)
 800050a:	2200      	movs	r2, #0
 800050c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050e:	4b19      	ldr	r3, [pc, #100]	; (8000574 <MX_ADC1_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_ADC1_Init+0x98>)
 800051e:	4a17      	ldr	r2, [pc, #92]	; (800057c <MX_ADC1_Init+0xa0>)
 8000520:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_ADC1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_ADC1_Init+0x98>)
 800052a:	2201      	movs	r2, #1
 800052c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_ADC1_Init+0x98>)
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_ADC1_Init+0x98>)
 8000538:	2201      	movs	r2, #1
 800053a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053c:	480d      	ldr	r0, [pc, #52]	; (8000574 <MX_ADC1_Init+0x98>)
 800053e:	f000 fc77 	bl	8000e30 <HAL_ADC_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000548:	f000 fab0 	bl	8000aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800054c:	2306      	movs	r3, #6
 800054e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000550:	2301      	movs	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_ADC1_Init+0x98>)
 800055e:	f000 fcab 	bl	8000eb8 <HAL_ADC_ConfigChannel>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000568:	f000 faa0 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000148 	.word	0x20000148
 8000578:	40012000 	.word	0x40012000
 800057c:	0f000001 	.word	0x0f000001

08000580 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a17      	ldr	r2, [pc, #92]	; (80005fc <HAL_ADC_MspInit+0x7c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d127      	bne.n	80005f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005aa:	4a15      	ldr	r2, [pc, #84]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b0:	6453      	str	r3, [r2, #68]	; 0x44
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005da:	2340      	movs	r3, #64	; 0x40
 80005dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005de:	2303      	movs	r3, #3
 80005e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4805      	ldr	r0, [pc, #20]	; (8000604 <HAL_ADC_MspInit+0x84>)
 80005ee:	f001 fb9f 	bl	8001d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	; 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40012000 	.word	0x40012000
 8000600:	40023800 	.word	0x40023800
 8000604:	40020000 	.word	0x40020000

08000608 <Audio_Player_Play>:
#define DMA_MAX_SZE                     0xFFFF
#define DMA_MAX(_X_)                (((_X_) <= DMA_MAX_SZE)? (_X_):DMA_MAX_SZE)
#define AUDIODATA_SIZE                  2   /* 16-bits audio data size */

void Audio_Player_Play(uint8_t* pBuffer, uint32_t Size)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	if(Size > 0xFFFF) {
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000618:	d307      	bcc.n	800062a <Audio_Player_Play+0x22>
		Size = 0xFFFF;
 800061a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061e:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <Audio_Player_Play+0x38>)
 8000626:	f001 fd20 	bl	800206a <HAL_GPIO_TogglePin>
	}
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)pBuffer, Size);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	b29b      	uxth	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	4804      	ldr	r0, [pc, #16]	; (8000644 <Audio_Player_Play+0x3c>)
 8000634:	f001 fe74 	bl	8002320 <HAL_I2S_Transmit_DMA>
//	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020800 	.word	0x40020800
 8000644:	20000198 	.word	0x20000198

08000648 <Audio_Player_Stop>:
{
	HAL_I2S_DMAResume(&hi2s2);
}

void Audio_Player_Stop(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	HAL_I2S_DMAStop(&hi2s2);
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <Audio_Player_Stop+0x10>)
 800064e:	f001 ff0f 	bl	8002470 <HAL_I2S_DMAStop>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000198 	.word	0x20000198

0800065c <HAL_I2S_TxHalfCpltCallback>:
{
//	WM8978_VolumeCtl(vol);
}

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <HAL_I2S_TxHalfCpltCallback+0x20>)
 800066a:	f001 fcfe 	bl	800206a <HAL_GPIO_TogglePin>
	HalfTransfer_CallBack_FS();
 800066e:	f008 fcdf 	bl	8009030 <HalfTransfer_CallBack_FS>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40020800 	.word	0x40020800

08000680 <HAL_I2S_TxCpltCallback>:


void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <HAL_I2S_TxCpltCallback+0x20>)
 800068e:	f001 fcec 	bl	800206a <HAL_GPIO_TogglePin>
	TransferComplete_CallBack_FS();
 8000692:	f008 fcc3 	bl	800901c <TransferComplete_CallBack_FS>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020800 	.word	0x40020800

080006a4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_CRC_Init+0x20>)
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <MX_CRC_Init+0x24>)
 80006ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_CRC_Init+0x20>)
 80006b0:	f000 ff41 	bl	8001536 <HAL_CRC_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ba:	f000 f9f7 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000190 	.word	0x20000190
 80006c8:	40023000 	.word	0x40023000

080006cc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <HAL_CRC_MspInit+0x3c>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d10d      	bne.n	80006fa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <HAL_CRC_MspInit+0x40>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a09      	ldr	r2, [pc, #36]	; (800070c <HAL_CRC_MspInit+0x40>)
 80006e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <HAL_CRC_MspInit+0x40>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023000 	.word	0x40023000
 800070c:	40023800 	.word	0x40023800

08000710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_DMA_Init+0x3c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <MX_DMA_Init+0x3c>)
 8000720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_DMA_Init+0x3c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	200f      	movs	r0, #15
 8000738:	f000 fec7 	bl	80014ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800073c:	200f      	movs	r0, #15
 800073e:	f000 fee0 	bl	8001502 <HAL_NVIC_EnableIRQ>

}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800

08000750 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b27      	ldr	r3, [pc, #156]	; (8000808 <MX_GPIO_Init+0xb8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a26      	ldr	r2, [pc, #152]	; (8000808 <MX_GPIO_Init+0xb8>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b24      	ldr	r3, [pc, #144]	; (8000808 <MX_GPIO_Init+0xb8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MX_GPIO_Init+0xb8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <MX_GPIO_Init+0xb8>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_GPIO_Init+0xb8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_GPIO_Init+0xb8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_GPIO_Init+0xb8>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_GPIO_Init+0xb8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_GPIO_Init+0xb8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <MX_GPIO_Init+0xb8>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_GPIO_Init+0xb8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <MX_GPIO_Init+0xbc>)
 80007de:	f001 fc2b 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_GPIO_Init+0xbc>)
 80007fc:	f001 fa98 	bl	8001d30 <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020800 	.word	0x40020800

08000810 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_I2S2_Init+0x54>)
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <MX_I2S2_Init+0x58>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_I2S2_Init+0x54>)
 800081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000820:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_I2S2_Init+0x54>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_I2S2_Init+0x54>)
 800082a:	2201      	movs	r2, #1
 800082c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_I2S2_Init+0x54>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_I2S2_Init+0x54>)
 8000836:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800083a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_I2S2_Init+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_I2S2_Init+0x54>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_I2S2_Init+0x54>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_I2S2_Init+0x54>)
 8000850:	f001 fc26 	bl	80020a0 <HAL_I2S_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800085a:	f000 f927 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000198 	.word	0x20000198
 8000868:	40003800 	.word	0x40003800

0800086c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b090      	sub	sp, #64	; 0x40
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
 8000894:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI2)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a3f      	ldr	r2, [pc, #252]	; (8000998 <HAL_I2S_MspInit+0x12c>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d177      	bne.n	8000990 <HAL_I2S_MspInit+0x124>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008a0:	2301      	movs	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008a4:	23c0      	movs	r3, #192	; 0xc0
 80008a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 80008a8:	2310      	movs	r3, #16
 80008aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80008ac:	2306      	movs	r3, #6
 80008ae:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4618      	mov	r0, r3
 80008b6:	f004 fa53 	bl	8004d60 <HAL_RCCEx_PeriphCLKConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 80008c0:	f000 f8f4 	bl	8000aac <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	4b34      	ldr	r3, [pc, #208]	; (800099c <HAL_I2S_MspInit+0x130>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	4a33      	ldr	r2, [pc, #204]	; (800099c <HAL_I2S_MspInit+0x130>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d2:	6413      	str	r3, [r2, #64]	; 0x40
 80008d4:	4b31      	ldr	r3, [pc, #196]	; (800099c <HAL_I2S_MspInit+0x130>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	4b2d      	ldr	r3, [pc, #180]	; (800099c <HAL_I2S_MspInit+0x130>)
 80008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e8:	4a2c      	ldr	r2, [pc, #176]	; (800099c <HAL_I2S_MspInit+0x130>)
 80008ea:	f043 0302 	orr.w	r3, r3, #2
 80008ee:	6313      	str	r3, [r2, #48]	; 0x30
 80008f0:	4b2a      	ldr	r3, [pc, #168]	; (800099c <HAL_I2S_MspInit+0x130>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	f003 0302 	and.w	r3, r3, #2
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 80008fc:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090e:	2305      	movs	r3, #5
 8000910:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000916:	4619      	mov	r1, r3
 8000918:	4821      	ldr	r0, [pc, #132]	; (80009a0 <HAL_I2S_MspInit+0x134>)
 800091a:	f001 fa09 	bl	8001d30 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800091e:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 8000920:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <HAL_I2S_MspInit+0x13c>)
 8000922:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800092a:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 800092c:	2240      	movs	r2, #64	; 0x40
 800092e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 8000938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800093c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 8000940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000944:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 8000948:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800094c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 8000956:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800095a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 800095e:	2204      	movs	r2, #4
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 8000964:	2203      	movs	r2, #3
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 800096a:	2200      	movs	r2, #0
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 8000970:	2200      	movs	r2, #0
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 8000976:	f000 fdfb 	bl	8001570 <HAL_DMA_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_I2S_MspInit+0x118>
    {
      Error_Handler();
 8000980:	f000 f894 	bl	8000aac <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 8000988:	639a      	str	r2, [r3, #56]	; 0x38
 800098a:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <HAL_I2S_MspInit+0x138>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000990:	bf00      	nop
 8000992:	3740      	adds	r7, #64	; 0x40
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40003800 	.word	0x40003800
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020400 	.word	0x40020400
 80009a4:	200001e0 	.word	0x200001e0
 80009a8:	40026070 	.word	0x40026070

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f000 f9a8 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f810 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f7ff feca 	bl	8000750 <MX_GPIO_Init>
  MX_DMA_Init();
 80009bc:	f7ff fea8 	bl	8000710 <MX_DMA_Init>
  MX_ADC1_Init();
 80009c0:	f7ff fd8c 	bl	80004dc <MX_ADC1_Init>
  MX_I2S2_Init();
 80009c4:	f7ff ff24 	bl	8000810 <MX_I2S2_Init>
  MX_CRC_Init();
 80009c8:	f7ff fe6c 	bl	80006a4 <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 80009cc:	f008 fa8a 	bl	8008ee4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80009d0:	f000 f8f4 	bl	8000bbc <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <main+0x28>
	...

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	; 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	2230      	movs	r2, #48	; 0x30
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f008 ff6a 	bl	80098c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <SystemClock_Config+0xcc>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a27      	ldr	r2, [pc, #156]	; (8000aa4 <SystemClock_Config+0xcc>)
 8000a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <SystemClock_Config+0xcc>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <SystemClock_Config+0xd0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <SystemClock_Config+0xd0>)
 8000a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <SystemClock_Config+0xd0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a48:	2319      	movs	r3, #25
 8000a4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a4c:	23c0      	movs	r3, #192	; 0xc0
 8000a4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 fd43 	bl	80044e8 <HAL_RCC_OscConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a68:	f000 f820 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a70:	2302      	movs	r3, #2
 8000a72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	2103      	movs	r1, #3
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f003 ffa5 	bl	80049d8 <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a94:	f000 f80a 	bl	8000aac <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000a98:	f004 f884 	bl	8004ba4 <HAL_RCC_EnableCSS>
}
 8000a9c:	bf00      	nop
 8000a9e:	3750      	adds	r7, #80	; 0x50
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40007000 	.word	0x40007000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 f928 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <DMA1_Stream4_IRQHandler+0x10>)
 8000b62:	f000 fe7b 	bl	800185c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200001e0 	.word	0x200001e0

08000b70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b76:	f004 fa92 	bl	800509e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000240 	.word	0x20000240

08000b84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <OTG_FS_IRQHandler+0x10>)
 8000b8a:	f002 fb7f 	bl	800328c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000076c 	.word	0x2000076c

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_TIM1_Init+0x9c>)
 8000bda:	4a20      	ldr	r2, [pc, #128]	; (8000c5c <MX_TIM1_Init+0xa0>)
 8000bdc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65535;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <MX_TIM1_Init+0x9c>)
 8000be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_TIM1_Init+0x9c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_TIM1_Init+0x9c>)
 8000bee:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000bf2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_TIM1_Init+0x9c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_TIM1_Init+0x9c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_TIM1_Init+0x9c>)
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c06:	4814      	ldr	r0, [pc, #80]	; (8000c58 <MX_TIM1_Init+0x9c>)
 8000c08:	f004 f9fa 	bl	8005000 <HAL_TIM_Base_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c12:	f7ff ff4b 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	4619      	mov	r1, r3
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_TIM1_Init+0x9c>)
 8000c24:	f004 fb43 	bl	80052ae <HAL_TIM_ConfigClockSource>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c2e:	f7ff ff3d 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c32:	2320      	movs	r3, #32
 8000c34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <MX_TIM1_Init+0x9c>)
 8000c40:	f004 fd48 	bl	80056d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000c4a:	f7ff ff2f 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000240 	.word	0x20000240
 8000c5c:	40010000 	.word	0x40010000

08000c60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_TIM_Base_MspInit+0x48>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d115      	bne.n	8000c9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <HAL_TIM_Base_MspInit+0x4c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <HAL_TIM_Base_MspInit+0x4c>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_TIM_Base_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2019      	movs	r0, #25
 8000c94:	f000 fc19 	bl	80014ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c98:	2019      	movs	r0, #25
 8000c9a:	f000 fc32 	bl	8001502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	40023800 	.word	0x40023800

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb6:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ccc:	4c0b      	ldr	r4, [pc, #44]	; (8000cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cda:	f7ff ff5d 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f008 fdcb 	bl	8009878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fe63 	bl	80009ac <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8000cf4:	08009964 	.word	0x08009964
  ldr r2, =_sbss
 8000cf8:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8000cfc:	200048cc 	.word	0x200048cc

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 fbc1 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	200f      	movs	r0, #15
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff febe 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fbd9 	bl	800151e <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 fba1 	bl	80014ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000288 	.word	0x20000288

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000288 	.word	0x20000288

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008

08000e30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e033      	b.n	8000eae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d109      	bne.n	8000e62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff fb96 	bl	8000580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d118      	bne.n	8000ea0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e76:	f023 0302 	bic.w	r3, r3, #2
 8000e7a:	f043 0202 	orr.w	r2, r3, #2
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f94a 	bl	800111c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f023 0303 	bic.w	r3, r3, #3
 8000e96:	f043 0201 	orr.w	r2, r3, #1
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e9e:	e001      	b.n	8000ea4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d101      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x1c>
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	e113      	b.n	80010fc <HAL_ADC_ConfigChannel+0x244>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	d925      	bls.n	8000f30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68d9      	ldr	r1, [r3, #12]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3b1e      	subs	r3, #30
 8000efa:	2207      	movs	r2, #7
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43da      	mvns	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	400a      	ands	r2, r1
 8000f08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68d9      	ldr	r1, [r3, #12]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4403      	add	r3, r0
 8000f22:	3b1e      	subs	r3, #30
 8000f24:	409a      	lsls	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	e022      	b.n	8000f76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6919      	ldr	r1, [r3, #16]
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4613      	mov	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	4413      	add	r3, r2
 8000f44:	2207      	movs	r2, #7
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	400a      	ands	r2, r1
 8000f52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6919      	ldr	r1, [r3, #16]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	4603      	mov	r3, r0
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4403      	add	r3, r0
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d824      	bhi.n	8000fc8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3b05      	subs	r3, #5
 8000f90:	221f      	movs	r2, #31
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	4618      	mov	r0, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3b05      	subs	r3, #5
 8000fba:	fa00 f203 	lsl.w	r2, r0, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000fc6:	e04c      	b.n	8001062 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b0c      	cmp	r3, #12
 8000fce:	d824      	bhi.n	800101a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	3b23      	subs	r3, #35	; 0x23
 8000fe2:	221f      	movs	r2, #31
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43da      	mvns	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	400a      	ands	r2, r1
 8000ff0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	3b23      	subs	r3, #35	; 0x23
 800100c:	fa00 f203 	lsl.w	r2, r0, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	631a      	str	r2, [r3, #48]	; 0x30
 8001018:	e023      	b.n	8001062 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	3b41      	subs	r3, #65	; 0x41
 800102c:	221f      	movs	r2, #31
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	400a      	ands	r2, r1
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	b29b      	uxth	r3, r3
 8001048:	4618      	mov	r0, r3
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	3b41      	subs	r3, #65	; 0x41
 8001056:	fa00 f203 	lsl.w	r2, r0, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	430a      	orrs	r2, r1
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <HAL_ADC_ConfigChannel+0x250>)
 8001064:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a28      	ldr	r2, [pc, #160]	; (800110c <HAL_ADC_ConfigChannel+0x254>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d10f      	bne.n	8001090 <HAL_ADC_ConfigChannel+0x1d8>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b12      	cmp	r3, #18
 8001076:	d10b      	bne.n	8001090 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a1d      	ldr	r2, [pc, #116]	; (800110c <HAL_ADC_ConfigChannel+0x254>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12b      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x23a>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <HAL_ADC_ConfigChannel+0x258>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d003      	beq.n	80010ac <HAL_ADC_ConfigChannel+0x1f4>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b11      	cmp	r3, #17
 80010aa:	d122      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a11      	ldr	r2, [pc, #68]	; (8001110 <HAL_ADC_ConfigChannel+0x258>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d111      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_ADC_ConfigChannel+0x25c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <HAL_ADC_ConfigChannel+0x260>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	0c9a      	lsrs	r2, r3, #18
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010e4:	e002      	b.n	80010ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f9      	bne.n	80010e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40012300 	.word	0x40012300
 800110c:	40012000 	.word	0x40012000
 8001110:	10000012 	.word	0x10000012
 8001114:	20000000 	.word	0x20000000
 8001118:	431bde83 	.word	0x431bde83

0800111c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001124:	4b79      	ldr	r3, [pc, #484]	; (800130c <ADC_Init+0x1f0>)
 8001126:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	431a      	orrs	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001150:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6859      	ldr	r1, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	021a      	lsls	r2, r3, #8
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6859      	ldr	r1, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6899      	ldr	r1, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	4a58      	ldr	r2, [pc, #352]	; (8001310 <ADC_Init+0x1f4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d022      	beq.n	80011fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6899      	ldr	r1, [r3, #8]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6899      	ldr	r1, [r3, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	e00f      	b.n	800121a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001218:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0202 	bic.w	r2, r2, #2
 8001228:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6899      	ldr	r1, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7e1b      	ldrb	r3, [r3, #24]
 8001234:	005a      	lsls	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d01b      	beq.n	8001280 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001256:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001266:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6859      	ldr	r1, [r3, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	3b01      	subs	r3, #1
 8001274:	035a      	lsls	r2, r3, #13
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	e007      	b.n	8001290 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800128e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800129e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	051a      	lsls	r2, r3, #20
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6899      	ldr	r1, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012d2:	025a      	lsls	r2, r3, #9
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6899      	ldr	r1, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	029a      	lsls	r2, r3, #10
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	609a      	str	r2, [r3, #8]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	40012300 	.word	0x40012300
 8001310:	0f000001 	.word	0x0f000001

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001480:	d301      	bcc.n	8001486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001482:	2301      	movs	r3, #1
 8001484:	e00f      	b.n	80014a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <SysTick_Config+0x40>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148e:	210f      	movs	r1, #15
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f7ff ff8e 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <SysTick_Config+0x40>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SysTick_Config+0x40>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff29 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014dc:	f7ff ff3e 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	6978      	ldr	r0, [r7, #20]
 80014e8:	f7ff ff8e 	bl	8001408 <NVIC_EncodePriority>
 80014ec:	4602      	mov	r2, r0
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff5d 	bl	80013b4 <__NVIC_SetPriority>
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff31 	bl	8001378 <__NVIC_EnableIRQ>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffa2 	bl	8001470 <SysTick_Config>
 800152c:	4603      	mov	r3, r0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e00e      	b.n	8001566 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	795b      	ldrb	r3, [r3, #5]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff f8b7 	bl	80006cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff fc28 	bl	8000dd0 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e099      	b.n	80016c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2202      	movs	r2, #2
 8001590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0201 	bic.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ac:	e00f      	b.n	80015ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ae:	f7ff fc0f 	bl	8000dd0 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d908      	bls.n	80015ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2220      	movs	r2, #32
 80015c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2203      	movs	r2, #3
 80015c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e078      	b.n	80016c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1e8      	bne.n	80015ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <HAL_DMA_Init+0x158>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	2b04      	cmp	r3, #4
 8001626:	d107      	bne.n	8001638 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	4313      	orrs	r3, r2
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4313      	orrs	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f023 0307 	bic.w	r3, r3, #7
 800164e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	4313      	orrs	r3, r2
 8001658:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	2b04      	cmp	r3, #4
 8001660:	d117      	bne.n	8001692 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4313      	orrs	r3, r2
 800166a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00e      	beq.n	8001692 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 fadf 	bl	8001c38 <DMA_CheckFifoParam>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2240      	movs	r2, #64	; 0x40
 8001684:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800168e:	2301      	movs	r3, #1
 8001690:	e016      	b.n	80016c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fa96 	bl	8001bcc <DMA_CalcBaseAndBitshift>
 80016a0:	4603      	mov	r3, r0
 80016a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	223f      	movs	r2, #63	; 0x3f
 80016aa:	409a      	lsls	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	f010803f 	.word	0xf010803f

080016cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_DMA_Start_IT+0x26>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e040      	b.n	8001774 <HAL_DMA_Start_IT+0xa8>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b01      	cmp	r3, #1
 8001704:	d12f      	bne.n	8001766 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2202      	movs	r2, #2
 800170a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 fa28 	bl	8001b70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	223f      	movs	r2, #63	; 0x3f
 8001726:	409a      	lsls	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0216 	orr.w	r2, r2, #22
 800173a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	2b00      	cmp	r3, #0
 8001742:	d007      	beq.n	8001754 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0208 	orr.w	r2, r2, #8
 8001752:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e005      	b.n	8001772 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800176e:	2302      	movs	r3, #2
 8001770:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001772:	7dfb      	ldrb	r3, [r7, #23]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001788:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800178a:	f7ff fb21 	bl	8000dd0 <HAL_GetTick>
 800178e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d008      	beq.n	80017ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2280      	movs	r2, #128	; 0x80
 80017a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e052      	b.n	8001854 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0216 	bic.w	r2, r2, #22
 80017bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d103      	bne.n	80017de <HAL_DMA_Abort+0x62>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d007      	beq.n	80017ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0208 	bic.w	r2, r2, #8
 80017ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0201 	bic.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017fe:	e013      	b.n	8001828 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001800:	f7ff fae6 	bl	8000dd0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b05      	cmp	r3, #5
 800180c:	d90c      	bls.n	8001828 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2220      	movs	r2, #32
 8001812:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2203      	movs	r2, #3
 8001818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e015      	b.n	8001854 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1e4      	bne.n	8001800 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183a:	223f      	movs	r2, #63	; 0x3f
 800183c:	409a      	lsls	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001868:	4b8e      	ldr	r3, [pc, #568]	; (8001aa4 <HAL_DMA_IRQHandler+0x248>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a8e      	ldr	r2, [pc, #568]	; (8001aa8 <HAL_DMA_IRQHandler+0x24c>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	0a9b      	lsrs	r3, r3, #10
 8001874:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001886:	2208      	movs	r2, #8
 8001888:	409a      	lsls	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d01a      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0204 	bic.w	r2, r2, #4
 80018ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b4:	2208      	movs	r2, #8
 80018b6:	409a      	lsls	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	2201      	movs	r2, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d012      	beq.n	80018fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ea:	2201      	movs	r2, #1
 80018ec:	409a      	lsls	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	f043 0202 	orr.w	r2, r3, #2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	2204      	movs	r2, #4
 8001904:	409a      	lsls	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4013      	ands	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d012      	beq.n	8001934 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00b      	beq.n	8001934 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001920:	2204      	movs	r2, #4
 8001922:	409a      	lsls	r2, r3
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192c:	f043 0204 	orr.w	r2, r3, #4
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	2210      	movs	r2, #16
 800193a:	409a      	lsls	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d043      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d03c      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	2210      	movs	r2, #16
 8001958:	409a      	lsls	r2, r3
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d018      	beq.n	800199e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d108      	bne.n	800198c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d024      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	4798      	blx	r3
 800198a:	e01f      	b.n	80019cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01b      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
 800199c:	e016      	b.n	80019cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0208 	bic.w	r2, r2, #8
 80019ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	2220      	movs	r2, #32
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 808f 	beq.w	8001afc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 8087 	beq.w	8001afc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2220      	movs	r2, #32
 80019f4:	409a      	lsls	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	d136      	bne.n	8001a74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0216 	bic.w	r2, r2, #22
 8001a14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d103      	bne.n	8001a36 <HAL_DMA_IRQHandler+0x1da>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0208 	bic.w	r2, r2, #8
 8001a44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4a:	223f      	movs	r2, #63	; 0x3f
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d07e      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	4798      	blx	r3
        }
        return;
 8001a72:	e079      	b.n	8001b68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d01d      	beq.n	8001abe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10d      	bne.n	8001aac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d031      	beq.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
 8001aa0:	e02c      	b.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
 8001aa2:	bf00      	nop
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d023      	beq.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
 8001abc:	e01e      	b.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10f      	bne.n	8001aec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0210 	bic.w	r2, r2, #16
 8001ada:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d032      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d022      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2205      	movs	r2, #5
 8001b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d307      	bcc.n	8001b44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f2      	bne.n	8001b28 <HAL_DMA_IRQHandler+0x2cc>
 8001b42:	e000      	b.n	8001b46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	4798      	blx	r3
 8001b66:	e000      	b.n	8001b6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b68:	bf00      	nop
    }
  }
}
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b40      	cmp	r3, #64	; 0x40
 8001b9c:	d108      	bne.n	8001bb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bae:	e007      	b.n	8001bc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	60da      	str	r2, [r3, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	3b10      	subs	r3, #16
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <DMA_CalcBaseAndBitshift+0x64>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001be6:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <DMA_CalcBaseAndBitshift+0x68>)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d909      	bls.n	8001c0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c02:	f023 0303 	bic.w	r3, r3, #3
 8001c06:	1d1a      	adds	r2, r3, #4
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c0c:	e007      	b.n	8001c1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c16:	f023 0303 	bic.w	r3, r3, #3
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	aaaaaaab 	.word	0xaaaaaaab
 8001c34:	0800994c 	.word	0x0800994c

08001c38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d11f      	bne.n	8001c92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d856      	bhi.n	8001d06 <DMA_CheckFifoParam+0xce>
 8001c58:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <DMA_CheckFifoParam+0x28>)
 8001c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5e:	bf00      	nop
 8001c60:	08001c71 	.word	0x08001c71
 8001c64:	08001c83 	.word	0x08001c83
 8001c68:	08001c71 	.word	0x08001c71
 8001c6c:	08001d07 	.word	0x08001d07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d046      	beq.n	8001d0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c80:	e043      	b.n	8001d0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c8a:	d140      	bne.n	8001d0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c90:	e03d      	b.n	8001d0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c9a:	d121      	bne.n	8001ce0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d837      	bhi.n	8001d12 <DMA_CheckFifoParam+0xda>
 8001ca2:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <DMA_CheckFifoParam+0x70>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001cb9 	.word	0x08001cb9
 8001cac:	08001cbf 	.word	0x08001cbf
 8001cb0:	08001cb9 	.word	0x08001cb9
 8001cb4:	08001cd1 	.word	0x08001cd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
      break;
 8001cbc:	e030      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d025      	beq.n	8001d16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cce:	e022      	b.n	8001d16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cd8:	d11f      	bne.n	8001d1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cde:	e01c      	b.n	8001d1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d903      	bls.n	8001cee <DMA_CheckFifoParam+0xb6>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d003      	beq.n	8001cf4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cec:	e018      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf2:	e015      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00e      	beq.n	8001d1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
      break;
 8001d04:	e00b      	b.n	8001d1e <DMA_CheckFifoParam+0xe6>
      break;
 8001d06:	bf00      	nop
 8001d08:	e00a      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d0a:	bf00      	nop
 8001d0c:	e008      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d0e:	bf00      	nop
 8001d10:	e006      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d12:	bf00      	nop
 8001d14:	e004      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d16:	bf00      	nop
 8001d18:	e002      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d1a:	bf00      	nop
 8001d1c:	e000      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d1e:	bf00      	nop
    }
  } 
  
  return status; 
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e159      	b.n	8002000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	f040 8148 	bne.w	8001ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d005      	beq.n	8001d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d130      	bne.n	8001de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 0201 	and.w	r2, r3, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d017      	beq.n	8001e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d123      	bne.n	8001e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3208      	adds	r2, #8
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0203 	and.w	r2, r3, #3
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80a2 	beq.w	8001ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b57      	ldr	r3, [pc, #348]	; (8002018 <HAL_GPIO_Init+0x2e8>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a56      	ldr	r2, [pc, #344]	; (8002018 <HAL_GPIO_Init+0x2e8>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b54      	ldr	r3, [pc, #336]	; (8002018 <HAL_GPIO_Init+0x2e8>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed2:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_GPIO_Init+0x2ec>)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a49      	ldr	r2, [pc, #292]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x202>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a48      	ldr	r2, [pc, #288]	; (8002024 <HAL_GPIO_Init+0x2f4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x1fe>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a47      	ldr	r2, [pc, #284]	; (8002028 <HAL_GPIO_Init+0x2f8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x1fa>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a46      	ldr	r2, [pc, #280]	; (800202c <HAL_GPIO_Init+0x2fc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x1f6>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a45      	ldr	r2, [pc, #276]	; (8002030 <HAL_GPIO_Init+0x300>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x1f2>
 8001f1e:	2304      	movs	r3, #4
 8001f20:	e008      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f22:	2307      	movs	r3, #7
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f26:	2303      	movs	r3, #3
 8001f28:	e004      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f32:	2300      	movs	r3, #0
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	f002 0203 	and.w	r2, r2, #3
 8001f3a:	0092      	lsls	r2, r2, #2
 8001f3c:	4093      	lsls	r3, r2
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f44:	4935      	ldr	r1, [pc, #212]	; (800201c <HAL_GPIO_Init+0x2ec>)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f52:	4b38      	ldr	r3, [pc, #224]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f76:	4a2f      	ldr	r2, [pc, #188]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa0:	4a24      	ldr	r2, [pc, #144]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fa6:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fca:	4a1a      	ldr	r2, [pc, #104]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ff4:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	2b0f      	cmp	r3, #15
 8002004:	f67f aea2 	bls.w	8001d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40013800 	.word	0x40013800
 8002020:	40020000 	.word	0x40020000
 8002024:	40020400 	.word	0x40020400
 8002028:	40020800 	.word	0x40020800
 800202c:	40020c00 	.word	0x40020c00
 8002030:	40021000 	.word	0x40021000
 8002034:	40013c00 	.word	0x40013c00

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002054:	e003      	b.n	800205e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800207c:	887a      	ldrh	r2, [r7, #2]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4013      	ands	r3, r2
 8002082:	041a      	lsls	r2, r3, #16
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	43d9      	mvns	r1, r3
 8002088:	887b      	ldrh	r3, [r7, #2]
 800208a:	400b      	ands	r3, r1
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	619a      	str	r2, [r3, #24]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e128      	b.n	8002304 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a90      	ldr	r2, [pc, #576]	; (800230c <HAL_I2S_Init+0x26c>)
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7fe fbcd 	bl	800086c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2202      	movs	r2, #2
 80020d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020e8:	f023 030f 	bic.w	r3, r3, #15
 80020ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2202      	movs	r2, #2
 80020f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d060      	beq.n	80021c0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002106:	2310      	movs	r3, #16
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e001      	b.n	8002110 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800210c:	2320      	movs	r3, #32
 800210e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b20      	cmp	r3, #32
 8002116:	d802      	bhi.n	800211e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800211e:	2001      	movs	r0, #1
 8002120:	f002 ff0e 	bl	8004f40 <HAL_RCCEx_GetPeriphCLKFreq>
 8002124:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800212e:	d125      	bne.n	800217c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d010      	beq.n	800215a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	461a      	mov	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	3305      	adds	r3, #5
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	e01f      	b.n	800219a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	fbb2 f2f3 	udiv	r2, r2, r3
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	461a      	mov	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	3305      	adds	r3, #5
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	e00e      	b.n	800219a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fbb2 f2f3 	udiv	r2, r2, r3
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	461a      	mov	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	3305      	adds	r3, #5
 8002198:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4a5c      	ldr	r2, [pc, #368]	; (8002310 <HAL_I2S_Init+0x270>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	08db      	lsrs	r3, r3, #3
 80021a4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	085b      	lsrs	r3, r3, #1
 80021b6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	e003      	b.n	80021c8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d902      	bls.n	80021d4 <HAL_I2S_Init+0x134>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	2bff      	cmp	r3, #255	; 0xff
 80021d2:	d907      	bls.n	80021e4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d8:	f043 0210 	orr.w	r2, r3, #16
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e08f      	b.n	8002304 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	ea42 0103 	orr.w	r1, r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002202:	f023 030f 	bic.w	r3, r3, #15
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6851      	ldr	r1, [r2, #4]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6892      	ldr	r2, [r2, #8]
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	68d2      	ldr	r2, [r2, #12]
 8002214:	4311      	orrs	r1, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6992      	ldr	r2, [r2, #24]
 800221a:	430a      	orrs	r2, r1
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002226:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d161      	bne.n	80022f4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a38      	ldr	r2, [pc, #224]	; (8002314 <HAL_I2S_Init+0x274>)
 8002234:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a37      	ldr	r2, [pc, #220]	; (8002318 <HAL_I2S_Init+0x278>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d101      	bne.n	8002244 <HAL_I2S_Init+0x1a4>
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_I2S_Init+0x27c>)
 8002242:	e001      	b.n	8002248 <HAL_I2S_Init+0x1a8>
 8002244:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	4932      	ldr	r1, [pc, #200]	; (8002318 <HAL_I2S_Init+0x278>)
 8002250:	428a      	cmp	r2, r1
 8002252:	d101      	bne.n	8002258 <HAL_I2S_Init+0x1b8>
 8002254:	4a31      	ldr	r2, [pc, #196]	; (800231c <HAL_I2S_Init+0x27c>)
 8002256:	e001      	b.n	800225c <HAL_I2S_Init+0x1bc>
 8002258:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800225c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002260:	f023 030f 	bic.w	r3, r3, #15
 8002264:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2b      	ldr	r2, [pc, #172]	; (8002318 <HAL_I2S_Init+0x278>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d101      	bne.n	8002274 <HAL_I2S_Init+0x1d4>
 8002270:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_I2S_Init+0x27c>)
 8002272:	e001      	b.n	8002278 <HAL_I2S_Init+0x1d8>
 8002274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002278:	2202      	movs	r2, #2
 800227a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a25      	ldr	r2, [pc, #148]	; (8002318 <HAL_I2S_Init+0x278>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_I2S_Init+0x1ea>
 8002286:	4b25      	ldr	r3, [pc, #148]	; (800231c <HAL_I2S_Init+0x27c>)
 8002288:	e001      	b.n	800228e <HAL_I2S_Init+0x1ee>
 800228a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800229a:	d003      	beq.n	80022a4 <HAL_I2S_Init+0x204>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d103      	bne.n	80022ac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80022a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	e001      	b.n	80022b0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022ba:	4313      	orrs	r3, r2
 80022bc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022c4:	4313      	orrs	r3, r2
 80022c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	897b      	ldrh	r3, [r7, #10]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022dc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <HAL_I2S_Init+0x278>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <HAL_I2S_Init+0x24c>
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_I2S_Init+0x27c>)
 80022ea:	e001      	b.n	80022f0 <HAL_I2S_Init+0x250>
 80022ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022f0:	897a      	ldrh	r2, [r7, #10]
 80022f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3720      	adds	r7, #32
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	080029b1 	.word	0x080029b1
 8002310:	cccccccd 	.word	0xcccccccd
 8002314:	08002b39 	.word	0x08002b39
 8002318:	40003800 	.word	0x40003800
 800231c:	40003400 	.word	0x40003400

08002320 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_I2S_Transmit_DMA+0x1a>
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e08e      	b.n	800245c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_I2S_Transmit_DMA+0x2e>
 800234a:	2302      	movs	r3, #2
 800234c:	e086      	b.n	800245c <HAL_I2S_Transmit_DMA+0x13c>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d005      	beq.n	800236e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800236a:	2302      	movs	r3, #2
 800236c:	e076      	b.n	800245c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2203      	movs	r2, #3
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b03      	cmp	r3, #3
 8002392:	d002      	beq.n	800239a <HAL_I2S_Transmit_DMA+0x7a>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b05      	cmp	r3, #5
 8002398:	d10a      	bne.n	80023b0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023ae:	e005      	b.n	80023bc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	88fa      	ldrh	r2, [r7, #6]
 80023b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	88fa      	ldrh	r2, [r7, #6]
 80023ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c0:	4a28      	ldr	r2, [pc, #160]	; (8002464 <HAL_I2S_Transmit_DMA+0x144>)
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c8:	4a27      	ldr	r2, [pc, #156]	; (8002468 <HAL_I2S_Transmit_DMA+0x148>)
 80023ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	4a26      	ldr	r2, [pc, #152]	; (800246c <HAL_I2S_Transmit_DMA+0x14c>)
 80023d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80023dc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80023e4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80023ec:	f7ff f96e 	bl	80016cc <HAL_DMA_Start_IT>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00f      	beq.n	8002416 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f043 0208 	orr.w	r2, r3, #8
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e022      	b.n	800245c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d107      	bne.n	8002434 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002432:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d107      	bne.n	8002452 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0202 	orr.w	r2, r2, #2
 8002450:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	0800288f 	.word	0x0800288f
 8002468:	0800284d 	.word	0x0800284d
 800246c:	080028ab 	.word	0x080028ab

08002470 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002484:	d004      	beq.n	8002490 <HAL_I2S_DMAStop+0x20>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 80d1 	bne.w	8002632 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00f      	beq.n	80024b8 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff f96d 	bl	800177c <HAL_DMA_Abort>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	f043 0208 	orr.w	r2, r3, #8
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80024b8:	2364      	movs	r3, #100	; 0x64
 80024ba:	2201      	movs	r2, #1
 80024bc:	2102      	movs	r1, #2
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fb00 	bl	8002ac4 <I2S_WaitFlagStateUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	f043 0201 	orr.w	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80024e2:	2364      	movs	r3, #100	; 0x64
 80024e4:	2200      	movs	r2, #0
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 faeb 	bl	8002ac4 <I2S_WaitFlagStateUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00b      	beq.n	800250c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f8:	f043 0201 	orr.w	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0202 	bic.w	r2, r2, #2
 8002538:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b05      	cmp	r3, #5
 8002544:	f040 8165 	bne.w	8002812 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00f      	beq.n	8002570 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff f911 	bl	800177c <HAL_DMA_Abort>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	f043 0208 	orr.w	r2, r3, #8
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a8a      	ldr	r2, [pc, #552]	; (80027a0 <HAL_I2S_DMAStop+0x330>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_I2S_DMAStop+0x10e>
 800257a:	4b8a      	ldr	r3, [pc, #552]	; (80027a4 <HAL_I2S_DMAStop+0x334>)
 800257c:	e001      	b.n	8002582 <HAL_I2S_DMAStop+0x112>
 800257e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4985      	ldr	r1, [pc, #532]	; (80027a0 <HAL_I2S_DMAStop+0x330>)
 800258a:	428b      	cmp	r3, r1
 800258c:	d101      	bne.n	8002592 <HAL_I2S_DMAStop+0x122>
 800258e:	4b85      	ldr	r3, [pc, #532]	; (80027a4 <HAL_I2S_DMAStop+0x334>)
 8002590:	e001      	b.n	8002596 <HAL_I2S_DMAStop+0x126>
 8002592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a7e      	ldr	r2, [pc, #504]	; (80027a0 <HAL_I2S_DMAStop+0x330>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_I2S_DMAStop+0x13e>
 80025aa:	4b7e      	ldr	r3, [pc, #504]	; (80027a4 <HAL_I2S_DMAStop+0x334>)
 80025ac:	e001      	b.n	80025b2 <HAL_I2S_DMAStop+0x142>
 80025ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a79      	ldr	r2, [pc, #484]	; (80027a0 <HAL_I2S_DMAStop+0x330>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d101      	bne.n	80025c4 <HAL_I2S_DMAStop+0x154>
 80025c0:	4b78      	ldr	r3, [pc, #480]	; (80027a4 <HAL_I2S_DMAStop+0x334>)
 80025c2:	e001      	b.n	80025c8 <HAL_I2S_DMAStop+0x158>
 80025c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a73      	ldr	r2, [pc, #460]	; (80027a0 <HAL_I2S_DMAStop+0x330>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d101      	bne.n	80025dc <HAL_I2S_DMAStop+0x16c>
 80025d8:	4b72      	ldr	r3, [pc, #456]	; (80027a4 <HAL_I2S_DMAStop+0x334>)
 80025da:	e001      	b.n	80025e0 <HAL_I2S_DMAStop+0x170>
 80025dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	496e      	ldr	r1, [pc, #440]	; (80027a0 <HAL_I2S_DMAStop+0x330>)
 80025e8:	428b      	cmp	r3, r1
 80025ea:	d101      	bne.n	80025f0 <HAL_I2S_DMAStop+0x180>
 80025ec:	4b6d      	ldr	r3, [pc, #436]	; (80027a4 <HAL_I2S_DMAStop+0x334>)
 80025ee:	e001      	b.n	80025f4 <HAL_I2S_DMAStop+0x184>
 80025f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10c      	bne.n	800261c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800261a:	e0fa      	b.n	8002812 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a5f      	ldr	r2, [pc, #380]	; (80027a0 <HAL_I2S_DMAStop+0x330>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <HAL_I2S_DMAStop+0x1ba>
 8002626:	4b5f      	ldr	r3, [pc, #380]	; (80027a4 <HAL_I2S_DMAStop+0x334>)
 8002628:	e001      	b.n	800262e <HAL_I2S_DMAStop+0x1be>
 800262a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800262e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002630:	e0ef      	b.n	8002812 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800263a:	d005      	beq.n	8002648 <HAL_I2S_DMAStop+0x1d8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002644:	f040 80e5 	bne.w	8002812 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00f      	beq.n	8002670 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff f891 	bl	800177c <HAL_DMA_Abort>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	f043 0208 	orr.w	r2, r3, #8
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b05      	cmp	r3, #5
 800267a:	f040 809a 	bne.w	80027b2 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00f      	beq.n	80026a6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f876 	bl	800177c <HAL_DMA_Abort>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d007      	beq.n	80026a6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f043 0208 	orr.w	r2, r3, #8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80026a6:	f7fe fb93 	bl	8000dd0 <HAL_GetTick>
 80026aa:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80026ac:	e012      	b.n	80026d4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80026ae:	f7fe fb8f 	bl	8000dd0 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b64      	cmp	r3, #100	; 0x64
 80026ba:	d90b      	bls.n	80026d4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a31      	ldr	r2, [pc, #196]	; (80027a0 <HAL_I2S_DMAStop+0x330>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_I2S_DMAStop+0x272>
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_I2S_DMAStop+0x334>)
 80026e0:	e001      	b.n	80026e6 <HAL_I2S_DMAStop+0x276>
 80026e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d1de      	bne.n	80026ae <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80026f0:	e012      	b.n	8002718 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80026f2:	f7fe fb6d 	bl	8000dd0 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	; 0x64
 80026fe:	d90b      	bls.n	8002718 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	f043 0201 	orr.w	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <HAL_I2S_DMAStop+0x330>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_I2S_DMAStop+0x2b6>
 8002722:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <HAL_I2S_DMAStop+0x334>)
 8002724:	e001      	b.n	800272a <HAL_I2S_DMAStop+0x2ba>
 8002726:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002730:	2b80      	cmp	r3, #128	; 0x80
 8002732:	d0de      	beq.n	80026f2 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a19      	ldr	r2, [pc, #100]	; (80027a0 <HAL_I2S_DMAStop+0x330>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d101      	bne.n	8002742 <HAL_I2S_DMAStop+0x2d2>
 800273e:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_I2S_DMAStop+0x334>)
 8002740:	e001      	b.n	8002746 <HAL_I2S_DMAStop+0x2d6>
 8002742:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4914      	ldr	r1, [pc, #80]	; (80027a0 <HAL_I2S_DMAStop+0x330>)
 800274e:	428b      	cmp	r3, r1
 8002750:	d101      	bne.n	8002756 <HAL_I2S_DMAStop+0x2e6>
 8002752:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <HAL_I2S_DMAStop+0x334>)
 8002754:	e001      	b.n	800275a <HAL_I2S_DMAStop+0x2ea>
 8002756:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800275a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800275e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0d      	ldr	r2, [pc, #52]	; (80027a0 <HAL_I2S_DMAStop+0x330>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_I2S_DMAStop+0x302>
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <HAL_I2S_DMAStop+0x334>)
 8002770:	e001      	b.n	8002776 <HAL_I2S_DMAStop+0x306>
 8002772:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <HAL_I2S_DMAStop+0x330>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d101      	bne.n	800278a <HAL_I2S_DMAStop+0x31a>
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <HAL_I2S_DMAStop+0x334>)
 8002788:	e001      	b.n	800278e <HAL_I2S_DMAStop+0x31e>
 800278a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4902      	ldr	r1, [pc, #8]	; (80027a0 <HAL_I2S_DMAStop+0x330>)
 8002796:	428b      	cmp	r3, r1
 8002798:	d106      	bne.n	80027a8 <HAL_I2S_DMAStop+0x338>
 800279a:	4b02      	ldr	r3, [pc, #8]	; (80027a4 <HAL_I2S_DMAStop+0x334>)
 800279c:	e006      	b.n	80027ac <HAL_I2S_DMAStop+0x33c>
 800279e:	bf00      	nop
 80027a0:	40003800 	.word	0x40003800
 80027a4:	40003400 	.word	0x40003400
 80027a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027ac:	f022 0202 	bic.w	r2, r2, #2
 80027b0:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69da      	ldr	r2, [r3, #28]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f0:	d10c      	bne.n	800280c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	77fb      	strb	r3, [r7, #31]
 800280a:	e002      	b.n	8002812 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800281a:	7ffb      	ldrb	r3, [r7, #31]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3720      	adds	r7, #32
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10e      	bne.n	8002880 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0202 	bic.w	r2, r2, #2
 8002870:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7fd fefd 	bl	8000680 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f7fd fedd 	bl	800065c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0203 	bic.w	r2, r2, #3
 80028c6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	f043 0208 	orr.w	r2, r3, #8
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f7ff ffa5 	bl	8002838 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	881a      	ldrh	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c9a      	adds	r2, r3, #2
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10e      	bne.n	800294a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800293a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7fd fe9b 	bl	8000680 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	b292      	uxth	r2, r2
 8002966:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	1c9a      	adds	r2, r3, #2
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10e      	bne.n	80029a8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002998:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ff3e 	bl	8002824 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d13a      	bne.n	8002a42 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d109      	bne.n	80029ea <I2S_IRQHandler+0x3a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d102      	bne.n	80029ea <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ffb4 	bl	8002952 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f0:	2b40      	cmp	r3, #64	; 0x40
 80029f2:	d126      	bne.n	8002a42 <I2S_IRQHandler+0x92>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d11f      	bne.n	8002a42 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a10:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	f043 0202 	orr.w	r2, r3, #2
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff fefb 	bl	8002838 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d136      	bne.n	8002abc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d109      	bne.n	8002a6c <I2S_IRQHandler+0xbc>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b80      	cmp	r3, #128	; 0x80
 8002a64:	d102      	bne.n	8002a6c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ff45 	bl	80028f6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d122      	bne.n	8002abc <I2S_IRQHandler+0x10c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d11b      	bne.n	8002abc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a92:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f043 0204 	orr.w	r2, r3, #4
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff febe 	bl	8002838 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002abc:	bf00      	nop
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ad4:	f7fe f97c 	bl	8000dd0 <HAL_GetTick>
 8002ad8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002ada:	e018      	b.n	8002b0e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae2:	d014      	beq.n	8002b0e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002ae4:	f7fe f974 	bl	8000dd0 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d902      	bls.n	8002afa <I2S_WaitFlagStateUntilTimeout+0x36>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e00f      	b.n	8002b2e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4013      	ands	r3, r2
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1d7      	bne.n	8002adc <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a92      	ldr	r2, [pc, #584]	; (8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b52:	4b92      	ldr	r3, [pc, #584]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b54:	e001      	b.n	8002b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a8b      	ldr	r2, [pc, #556]	; (8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d101      	bne.n	8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002b70:	4b8a      	ldr	r3, [pc, #552]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b72:	e001      	b.n	8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002b74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b84:	d004      	beq.n	8002b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 8099 	bne.w	8002cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d107      	bne.n	8002baa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f925 	bl	8002df4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d107      	bne.n	8002bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f9c8 	bl	8002f54 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	d13a      	bne.n	8002c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d035      	beq.n	8002c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a6e      	ldr	r2, [pc, #440]	; (8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002be2:	4b6e      	ldr	r3, [pc, #440]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002be4:	e001      	b.n	8002bea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002be6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4969      	ldr	r1, [pc, #420]	; (8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bf2:	428b      	cmp	r3, r1
 8002bf4:	d101      	bne.n	8002bfa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002bf6:	4b69      	ldr	r3, [pc, #420]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bf8:	e001      	b.n	8002bfe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002bfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c02:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f043 0202 	orr.w	r2, r3, #2
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff fdfa 	bl	8002838 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	f040 80c3 	bne.w	8002dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80bd 	beq.w	8002dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a49      	ldr	r2, [pc, #292]	; (8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002c76:	4b49      	ldr	r3, [pc, #292]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c78:	e001      	b.n	8002c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002c7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4944      	ldr	r1, [pc, #272]	; (8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c86:	428b      	cmp	r3, r1
 8002c88:	d101      	bne.n	8002c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002c8a:	4b44      	ldr	r3, [pc, #272]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c8c:	e001      	b.n	8002c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c96:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f043 0204 	orr.w	r2, r3, #4
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fdbc 	bl	8002838 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cc0:	e089      	b.n	8002dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d107      	bne.n	8002cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f8be 	bl	8002e58 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d107      	bne.n	8002cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f8fd 	bl	8002ef0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	d12f      	bne.n	8002d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d02a      	beq.n	8002d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d18:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d101      	bne.n	8002d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d26:	e001      	b.n	8002d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4919      	ldr	r1, [pc, #100]	; (8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d34:	428b      	cmp	r3, r1
 8002d36:	d101      	bne.n	8002d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d38:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d3a:	e001      	b.n	8002d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d44:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff fd6c 	bl	8002838 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d136      	bne.n	8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d031      	beq.n	8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a07      	ldr	r2, [pc, #28]	; (8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d101      	bne.n	8002d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d80:	e001      	b.n	8002d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002d82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4902      	ldr	r1, [pc, #8]	; (8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d8e:	428b      	cmp	r3, r1
 8002d90:	d106      	bne.n	8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002d92:	4b02      	ldr	r3, [pc, #8]	; (8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d94:	e006      	b.n	8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002d96:	bf00      	nop
 8002d98:	40003800 	.word	0x40003800
 8002d9c:	40003400 	.word	0x40003400
 8002da0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002da4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002da8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002db8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f043 0204 	orr.w	r2, r3, #4
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff fd32 	bl	8002838 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dd4:	e000      	b.n	8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dd6:	bf00      	nop
}
 8002dd8:	bf00      	nop
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	1c99      	adds	r1, r3, #2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6251      	str	r1, [r2, #36]	; 0x24
 8002e06:	881a      	ldrh	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d113      	bne.n	8002e4e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d106      	bne.n	8002e4e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff ffc9 	bl	8002de0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	1c99      	adds	r1, r3, #2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6251      	str	r1, [r2, #36]	; 0x24
 8002e6a:	8819      	ldrh	r1, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1d      	ldr	r2, [pc, #116]	; (8002ee8 <I2SEx_TxISR_I2SExt+0x90>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d101      	bne.n	8002e7a <I2SEx_TxISR_I2SExt+0x22>
 8002e76:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <I2SEx_TxISR_I2SExt+0x94>)
 8002e78:	e001      	b.n	8002e7e <I2SEx_TxISR_I2SExt+0x26>
 8002e7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e7e:	460a      	mov	r2, r1
 8002e80:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d121      	bne.n	8002ede <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a12      	ldr	r2, [pc, #72]	; (8002ee8 <I2SEx_TxISR_I2SExt+0x90>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d101      	bne.n	8002ea8 <I2SEx_TxISR_I2SExt+0x50>
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <I2SEx_TxISR_I2SExt+0x94>)
 8002ea6:	e001      	b.n	8002eac <I2SEx_TxISR_I2SExt+0x54>
 8002ea8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	490d      	ldr	r1, [pc, #52]	; (8002ee8 <I2SEx_TxISR_I2SExt+0x90>)
 8002eb4:	428b      	cmp	r3, r1
 8002eb6:	d101      	bne.n	8002ebc <I2SEx_TxISR_I2SExt+0x64>
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <I2SEx_TxISR_I2SExt+0x94>)
 8002eba:	e001      	b.n	8002ec0 <I2SEx_TxISR_I2SExt+0x68>
 8002ebc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ec0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ec4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d106      	bne.n	8002ede <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ff81 	bl	8002de0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40003800 	.word	0x40003800
 8002eec:	40003400 	.word	0x40003400

08002ef0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68d8      	ldr	r0, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	1c99      	adds	r1, r3, #2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f08:	b282      	uxth	r2, r0
 8002f0a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d113      	bne.n	8002f4c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f32:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff ff4a 	bl	8002de0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a20      	ldr	r2, [pc, #128]	; (8002fe4 <I2SEx_RxISR_I2SExt+0x90>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <I2SEx_RxISR_I2SExt+0x16>
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <I2SEx_RxISR_I2SExt+0x94>)
 8002f68:	e001      	b.n	8002f6e <I2SEx_RxISR_I2SExt+0x1a>
 8002f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f6e:	68d8      	ldr	r0, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	1c99      	adds	r1, r3, #2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f7a:	b282      	uxth	r2, r0
 8002f7c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d121      	bne.n	8002fda <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <I2SEx_RxISR_I2SExt+0x90>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <I2SEx_RxISR_I2SExt+0x50>
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <I2SEx_RxISR_I2SExt+0x94>)
 8002fa2:	e001      	b.n	8002fa8 <I2SEx_RxISR_I2SExt+0x54>
 8002fa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	490d      	ldr	r1, [pc, #52]	; (8002fe4 <I2SEx_RxISR_I2SExt+0x90>)
 8002fb0:	428b      	cmp	r3, r1
 8002fb2:	d101      	bne.n	8002fb8 <I2SEx_RxISR_I2SExt+0x64>
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <I2SEx_RxISR_I2SExt+0x94>)
 8002fb6:	e001      	b.n	8002fbc <I2SEx_RxISR_I2SExt+0x68>
 8002fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fc0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ff03 	bl	8002de0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40003800 	.word	0x40003800
 8002fe8:	40003400 	.word	0x40003400

08002fec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fee:	b08f      	sub	sp, #60	; 0x3c
 8002ff0:	af0a      	add	r7, sp, #40	; 0x28
 8002ff2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e10f      	b.n	800321e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d106      	bne.n	800301e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f006 f923 	bl	8009264 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2203      	movs	r2, #3
 8003022:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f002 fce0 	bl	8005a02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	687e      	ldr	r6, [r7, #4]
 800304a:	466d      	mov	r5, sp
 800304c:	f106 0410 	add.w	r4, r6, #16
 8003050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003058:	e894 0003 	ldmia.w	r4, {r0, r1}
 800305c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003060:	1d33      	adds	r3, r6, #4
 8003062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003064:	6838      	ldr	r0, [r7, #0]
 8003066:	f002 fbb7 	bl	80057d8 <USB_CoreInit>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0d0      	b.n	800321e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f002 fcce 	bl	8005a24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003088:	2300      	movs	r3, #0
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	e04a      	b.n	8003124 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	333d      	adds	r3, #61	; 0x3d
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	333c      	adds	r3, #60	; 0x3c
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030b6:	7bfa      	ldrb	r2, [r7, #15]
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	b298      	uxth	r0, r3
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3344      	adds	r3, #68	; 0x44
 80030ca:	4602      	mov	r2, r0
 80030cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3340      	adds	r3, #64	; 0x40
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3348      	adds	r3, #72	; 0x48
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	334c      	adds	r3, #76	; 0x4c
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	3354      	adds	r3, #84	; 0x54
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	3301      	adds	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	429a      	cmp	r2, r3
 800312c:	d3af      	bcc.n	800308e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800312e:	2300      	movs	r3, #0
 8003130:	73fb      	strb	r3, [r7, #15]
 8003132:	e044      	b.n	80031be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800315c:	7bfa      	ldrb	r2, [r7, #15]
 800315e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	3301      	adds	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
 80031be:	7bfa      	ldrb	r2, [r7, #15]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d3b5      	bcc.n	8003134 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	687e      	ldr	r6, [r7, #4]
 80031d0:	466d      	mov	r5, sp
 80031d2:	f106 0410 	add.w	r4, r6, #16
 80031d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80031e6:	1d33      	adds	r3, r6, #4
 80031e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ea:	6838      	ldr	r0, [r7, #0]
 80031ec:	f002 fc66 	bl	8005abc <USB_DevInit>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2202      	movs	r2, #2
 80031fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e00d      	b.n	800321e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f003 fdb5 	bl	8006d86 <USB_DevDisconnect>

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003226 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_PCD_Start+0x1c>
 800323e:	2302      	movs	r3, #2
 8003240:	e020      	b.n	8003284 <HAL_PCD_Start+0x5e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	2b01      	cmp	r3, #1
 8003250:	d109      	bne.n	8003266 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003256:	2b01      	cmp	r3, #1
 8003258:	d005      	beq.n	8003266 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f002 fbb8 	bl	80059e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f003 fd65 	bl	8006d44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800328c:	b590      	push	{r4, r7, lr}
 800328e:	b08d      	sub	sp, #52	; 0x34
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f003 fe23 	bl	8006eee <USB_GetMode>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 848a 	bne.w	8003bc4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f003 fd87 	bl	8006dc8 <USB_ReadInterrupts>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8480 	beq.w	8003bc2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f003 fd74 	bl	8006dc8 <USB_ReadInterrupts>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d107      	bne.n	80032fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f002 0202 	and.w	r2, r2, #2
 80032f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f003 fd62 	bl	8006dc8 <USB_ReadInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	2b10      	cmp	r3, #16
 800330c:	d161      	bne.n	80033d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0210 	bic.w	r2, r2, #16
 800331c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f003 020f 	and.w	r2, r3, #15
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	3304      	adds	r3, #4
 800333c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	0c5b      	lsrs	r3, r3, #17
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	2b02      	cmp	r3, #2
 8003348:	d124      	bne.n	8003394 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d035      	beq.n	80033c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003364:	b29b      	uxth	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	6a38      	ldr	r0, [r7, #32]
 800336a:	f003 fb99 	bl	8006aa0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800337a:	441a      	add	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	6a1a      	ldr	r2, [r3, #32]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800338c:	441a      	add	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	621a      	str	r2, [r3, #32]
 8003392:	e016      	b.n	80033c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	0c5b      	lsrs	r3, r3, #17
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	2b06      	cmp	r3, #6
 800339e:	d110      	bne.n	80033c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033a6:	2208      	movs	r2, #8
 80033a8:	4619      	mov	r1, r3
 80033aa:	6a38      	ldr	r0, [r7, #32]
 80033ac:	f003 fb78 	bl	8006aa0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	6a1a      	ldr	r2, [r3, #32]
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033bc:	441a      	add	r2, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699a      	ldr	r2, [r3, #24]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0210 	orr.w	r2, r2, #16
 80033d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f003 fcf6 	bl	8006dc8 <USB_ReadInterrupts>
 80033dc:	4603      	mov	r3, r0
 80033de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033e6:	f040 80a7 	bne.w	8003538 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f003 fcfb 	bl	8006dee <USB_ReadDevAllOutEpInterrupt>
 80033f8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80033fa:	e099      	b.n	8003530 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 808e 	beq.w	8003524 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f003 fd1f 	bl	8006e56 <USB_ReadDevOutEPInterrupt>
 8003418:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00c      	beq.n	800343e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003430:	461a      	mov	r2, r3
 8003432:	2301      	movs	r3, #1
 8003434:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003436:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fec3 	bl	80041c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00c      	beq.n	8003462 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003454:	461a      	mov	r2, r3
 8003456:	2308      	movs	r3, #8
 8003458:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800345a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 ff99 	bl	8004394 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003478:	461a      	mov	r2, r3
 800347a:	2310      	movs	r3, #16
 800347c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d030      	beq.n	80034ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003490:	2b80      	cmp	r3, #128	; 0x80
 8003492:	d109      	bne.n	80034a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	3304      	adds	r3, #4
 80034bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	78db      	ldrb	r3, [r3, #3]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d108      	bne.n	80034d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2200      	movs	r2, #0
 80034ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	4619      	mov	r1, r3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f005 ffc2 	bl	800945c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e4:	461a      	mov	r2, r3
 80034e6:	2302      	movs	r3, #2
 80034e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003500:	461a      	mov	r2, r3
 8003502:	2320      	movs	r3, #32
 8003504:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d009      	beq.n	8003524 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351c:	461a      	mov	r2, r3
 800351e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003522:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	3301      	adds	r3, #1
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	2b00      	cmp	r3, #0
 8003534:	f47f af62 	bne.w	80033fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f003 fc43 	bl	8006dc8 <USB_ReadInterrupts>
 8003542:	4603      	mov	r3, r0
 8003544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003548:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800354c:	f040 80db 	bne.w	8003706 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f003 fc64 	bl	8006e22 <USB_ReadDevAllInEpInterrupt>
 800355a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003560:	e0cd      	b.n	80036fe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80c2 	beq.w	80036f2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f003 fc8a 	bl	8006e92 <USB_ReadDevInEPInterrupt>
 800357e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d057      	beq.n	800363a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	2201      	movs	r2, #1
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800359e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	69f9      	ldr	r1, [r7, #28]
 80035a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035aa:	4013      	ands	r3, r2
 80035ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ba:	461a      	mov	r2, r3
 80035bc:	2301      	movs	r3, #1
 80035be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d132      	bne.n	800362e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	334c      	adds	r3, #76	; 0x4c
 80035d8:	6819      	ldr	r1, [r3, #0]
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4403      	add	r3, r0
 80035e8:	3348      	adds	r3, #72	; 0x48
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4419      	add	r1, r3
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4403      	add	r3, r0
 80035fc:	334c      	adds	r3, #76	; 0x4c
 80035fe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	2b00      	cmp	r3, #0
 8003604:	d113      	bne.n	800362e <HAL_PCD_IRQHandler+0x3a2>
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	3354      	adds	r3, #84	; 0x54
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d108      	bne.n	800362e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003626:	461a      	mov	r2, r3
 8003628:	2101      	movs	r1, #1
 800362a:	f003 fc91 	bl	8006f50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	b2db      	uxtb	r3, r3
 8003632:	4619      	mov	r1, r3
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f005 fe96 	bl	8009366 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003650:	461a      	mov	r2, r3
 8003652:	2308      	movs	r3, #8
 8003654:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366c:	461a      	mov	r2, r3
 800366e:	2310      	movs	r3, #16
 8003670:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003688:	461a      	mov	r2, r3
 800368a:	2340      	movs	r3, #64	; 0x40
 800368c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d023      	beq.n	80036e0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800369a:	6a38      	ldr	r0, [r7, #32]
 800369c:	f002 fb72 	bl	8005d84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	3338      	adds	r3, #56	; 0x38
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	3304      	adds	r3, #4
 80036b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	78db      	ldrb	r3, [r3, #3]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d108      	bne.n	80036ce <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2200      	movs	r2, #0
 80036c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	4619      	mov	r1, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f005 fed9 	bl	8009480 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036da:	461a      	mov	r2, r3
 80036dc:	2302      	movs	r3, #2
 80036de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fcdb 	bl	80040a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	3301      	adds	r3, #1
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fa:	085b      	lsrs	r3, r3, #1
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	2b00      	cmp	r3, #0
 8003702:	f47f af2e 	bne.w	8003562 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f003 fb5c 	bl	8006dc8 <USB_ReadInterrupts>
 8003710:	4603      	mov	r3, r0
 8003712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800371a:	d122      	bne.n	8003762 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800372a:	f023 0301 	bic.w	r3, r3, #1
 800372e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003736:	2b01      	cmp	r3, #1
 8003738:	d108      	bne.n	800374c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003742:	2100      	movs	r1, #0
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fec3 	bl	80044d0 <HAL_PCDEx_LPM_Callback>
 800374a:	e002      	b.n	8003752 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f005 fe77 	bl	8009440 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f003 fb2e 	bl	8006dc8 <USB_ReadInterrupts>
 800376c:	4603      	mov	r3, r0
 800376e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003776:	d112      	bne.n	800379e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b01      	cmp	r3, #1
 8003786:	d102      	bne.n	800378e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f005 fe33 	bl	80093f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800379c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f003 fb10 	bl	8006dc8 <USB_ReadInterrupts>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b2:	f040 80b7 	bne.w	8003924 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c4:	f023 0301 	bic.w	r3, r3, #1
 80037c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2110      	movs	r1, #16
 80037d0:	4618      	mov	r0, r3
 80037d2:	f002 fad7 	bl	8005d84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037da:	e046      	b.n	800386a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e8:	461a      	mov	r2, r3
 80037ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003800:	0151      	lsls	r1, r2, #5
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	440a      	add	r2, r1
 8003806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800380a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800380e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381c:	461a      	mov	r2, r3
 800381e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003822:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003834:	0151      	lsls	r1, r2, #5
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	440a      	add	r2, r1
 800383a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800383e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003842:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003854:	0151      	lsls	r1, r2, #5
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	440a      	add	r2, r1
 800385a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800385e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003862:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	3301      	adds	r3, #1
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003870:	429a      	cmp	r2, r3
 8003872:	d3b3      	bcc.n	80037dc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003882:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003886:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	2b00      	cmp	r3, #0
 800388e:	d016      	beq.n	80038be <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a0:	f043 030b 	orr.w	r3, r3, #11
 80038a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b6:	f043 030b 	orr.w	r3, r3, #11
 80038ba:	6453      	str	r3, [r2, #68]	; 0x44
 80038bc:	e015      	b.n	80038ea <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038d0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038d4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e4:	f043 030b 	orr.w	r3, r3, #11
 80038e8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038fc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800390e:	461a      	mov	r2, r3
 8003910:	f003 fb1e 	bl	8006f50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003922:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f003 fa4d 	bl	8006dc8 <USB_ReadInterrupts>
 800392e:	4603      	mov	r3, r0
 8003930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003938:	d124      	bne.n	8003984 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f003 fae3 	bl	8006f0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f002 fa98 	bl	8005e7e <USB_GetDevSpeed>
 800394e:	4603      	mov	r3, r0
 8003950:	461a      	mov	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681c      	ldr	r4, [r3, #0]
 800395a:	f001 f9f5 	bl	8004d48 <HAL_RCC_GetHCLKFreq>
 800395e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	4620      	mov	r0, r4
 800396a:	f001 ff97 	bl	800589c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f005 fd21 	bl	80093b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003982:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f003 fa1d 	bl	8006dc8 <USB_ReadInterrupts>
 800398e:	4603      	mov	r3, r0
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b08      	cmp	r3, #8
 8003996:	d10a      	bne.n	80039ae <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f005 fcfe 	bl	800939a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f002 0208 	and.w	r2, r2, #8
 80039ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f003 fa08 	bl	8006dc8 <USB_ReadInterrupts>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039be:	2b80      	cmp	r3, #128	; 0x80
 80039c0:	d122      	bne.n	8003a08 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039ce:	2301      	movs	r3, #1
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
 80039d2:	e014      	b.n	80039fe <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d105      	bne.n	80039f8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	4619      	mov	r1, r3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fb27 	bl	8004046 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	3301      	adds	r3, #1
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d3e5      	bcc.n	80039d4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f003 f9db 	bl	8006dc8 <USB_ReadInterrupts>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1c:	d13b      	bne.n	8003a96 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a1e:	2301      	movs	r3, #1
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
 8003a22:	e02b      	b.n	8003a7c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3340      	adds	r3, #64	; 0x40
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d115      	bne.n	8003a76 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	da12      	bge.n	8003a76 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	333f      	adds	r3, #63	; 0x3f
 8003a60:	2201      	movs	r2, #1
 8003a62:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fae8 	bl	8004046 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	3301      	adds	r3, #1
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d3ce      	bcc.n	8003a24 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695a      	ldr	r2, [r3, #20]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f003 f994 	bl	8006dc8 <USB_ReadInterrupts>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aaa:	d155      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aac:	2301      	movs	r3, #1
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab0:	e045      	b.n	8003b3e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d12e      	bne.n	8003b38 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ada:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	da2b      	bge.n	8003b38 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003aec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d121      	bne.n	8003b38 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b34:	6053      	str	r3, [r2, #4]
            break;
 8003b36:	e007      	b.n	8003b48 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d3b4      	bcc.n	8003ab2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f003 f933 	bl	8006dc8 <USB_ReadInterrupts>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6c:	d10a      	bne.n	8003b84 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f005 fc98 	bl	80094a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f003 f91d 	bl	8006dc8 <USB_ReadInterrupts>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d115      	bne.n	8003bc4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f005 fc88 	bl	80094c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6859      	ldr	r1, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	605a      	str	r2, [r3, #4]
 8003bc0:	e000      	b.n	8003bc4 <HAL_PCD_IRQHandler+0x938>
      return;
 8003bc2:	bf00      	nop
    }
  }
}
 8003bc4:	3734      	adds	r7, #52	; 0x34
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd90      	pop	{r4, r7, pc}

08003bca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_PCD_SetAddress+0x1a>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e013      	b.n	8003c0c <HAL_PCD_SetAddress+0x42>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f003 f87b 	bl	8006cf8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	4611      	mov	r1, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	70fb      	strb	r3, [r7, #3]
 8003c26:	460b      	mov	r3, r1
 8003c28:	803b      	strh	r3, [r7, #0]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	da0f      	bge.n	8003c5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	f003 020f 	and.w	r2, r3, #15
 8003c40:	4613      	mov	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	3338      	adds	r3, #56	; 0x38
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3304      	adds	r3, #4
 8003c50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	705a      	strb	r2, [r3, #1]
 8003c58:	e00f      	b.n	8003c7a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	f003 020f 	and.w	r2, r3, #15
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	4413      	add	r3, r2
 8003c70:	3304      	adds	r3, #4
 8003c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c86:	883a      	ldrh	r2, [r7, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	78ba      	ldrb	r2, [r7, #2]
 8003c90:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d004      	beq.n	8003ca4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ca4:	78bb      	ldrb	r3, [r7, #2]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d102      	bne.n	8003cb0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_PCD_EP_Open+0xaa>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e00e      	b.n	8003cdc <HAL_PCD_EP_Open+0xc8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f002 f8fb 	bl	8005ec8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003cda:	7afb      	ldrb	r3, [r7, #11]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	da0f      	bge.n	8003d18 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	f003 020f 	and.w	r2, r3, #15
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	3338      	adds	r3, #56	; 0x38
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	705a      	strb	r2, [r3, #1]
 8003d16:	e00f      	b.n	8003d38 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	f003 020f 	and.w	r2, r3, #15
 8003d1e:	4613      	mov	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3304      	adds	r3, #4
 8003d30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_PCD_EP_Close+0x6e>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e00e      	b.n	8003d70 <HAL_PCD_EP_Close+0x8c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f002 f939 	bl	8005fd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	460b      	mov	r3, r1
 8003d86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d88:	7afb      	ldrb	r3, [r7, #11]
 8003d8a:	f003 020f 	and.w	r2, r3, #15
 8003d8e:	4613      	mov	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3304      	adds	r3, #4
 8003da0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2200      	movs	r2, #0
 8003db2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2200      	movs	r2, #0
 8003db8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dba:	7afb      	ldrb	r3, [r7, #11]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d102      	bne.n	8003dd4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dd4:	7afb      	ldrb	r3, [r7, #11]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	6979      	ldr	r1, [r7, #20]
 8003dec:	f002 fc18 	bl	8006620 <USB_EP0StartXfer>
 8003df0:	e008      	b.n	8003e04 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	6979      	ldr	r1, [r7, #20]
 8003e00:	f002 f9c6 	bl	8006190 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	f003 020f 	and.w	r2, r3, #15
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003e30:	681b      	ldr	r3, [r3, #0]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e4e:	7afb      	ldrb	r3, [r7, #11]
 8003e50:	f003 020f 	and.w	r2, r3, #15
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	3338      	adds	r3, #56	; 0x38
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4413      	add	r3, r2
 8003e62:	3304      	adds	r3, #4
 8003e64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2200      	movs	r2, #0
 8003e76:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e7e:	7afb      	ldrb	r3, [r7, #11]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d102      	bne.n	8003e98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e98:	7afb      	ldrb	r3, [r7, #11]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	6979      	ldr	r1, [r7, #20]
 8003eb0:	f002 fbb6 	bl	8006620 <USB_EP0StartXfer>
 8003eb4:	e008      	b.n	8003ec8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6979      	ldr	r1, [r7, #20]
 8003ec4:	f002 f964 	bl	8006190 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	460b      	mov	r3, r1
 8003edc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ede:	78fb      	ldrb	r3, [r7, #3]
 8003ee0:	f003 020f 	and.w	r2, r3, #15
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d901      	bls.n	8003ef0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e050      	b.n	8003f92 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	da0f      	bge.n	8003f18 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	f003 020f 	and.w	r2, r3, #15
 8003efe:	4613      	mov	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	3338      	adds	r3, #56	; 0x38
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	705a      	strb	r2, [r3, #1]
 8003f16:	e00d      	b.n	8003f34 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_PCD_EP_SetStall+0x82>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e01e      	b.n	8003f92 <HAL_PCD_EP_SetStall+0xc0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68f9      	ldr	r1, [r7, #12]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f002 fdf4 	bl	8006b50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	b2d9      	uxtb	r1, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f82:	461a      	mov	r2, r3
 8003f84:	f002 ffe4 	bl	8006f50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	f003 020f 	and.w	r2, r3, #15
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d901      	bls.n	8003fb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e042      	b.n	800403e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	da0f      	bge.n	8003fe0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	f003 020f 	and.w	r2, r3, #15
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	3338      	adds	r3, #56	; 0x38
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	705a      	strb	r2, [r3, #1]
 8003fde:	e00f      	b.n	8004000 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	f003 020f 	and.w	r2, r3, #15
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	b2da      	uxtb	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_PCD_EP_ClrStall+0x86>
 800401c:	2302      	movs	r3, #2
 800401e:	e00e      	b.n	800403e <HAL_PCD_EP_ClrStall+0xa4>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68f9      	ldr	r1, [r7, #12]
 800402e:	4618      	mov	r0, r3
 8004030:	f002 fdfc 	bl	8006c2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004056:	2b00      	cmp	r3, #0
 8004058:	da0c      	bge.n	8004074 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 020f 	and.w	r2, r3, #15
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	3338      	adds	r3, #56	; 0x38
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	3304      	adds	r3, #4
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	e00c      	b.n	800408e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	f003 020f 	and.w	r2, r3, #15
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	3304      	adds	r3, #4
 800408c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68f9      	ldr	r1, [r7, #12]
 8004094:	4618      	mov	r0, r3
 8004096:	f002 fc1b 	bl	80068d0 <USB_EPStopXfer>
 800409a:	4603      	mov	r3, r0
 800409c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800409e:	7afb      	ldrb	r3, [r7, #11]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	3338      	adds	r3, #56	; 0x38
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	4413      	add	r3, r2
 80040cc:	3304      	adds	r3, #4
 80040ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1a      	ldr	r2, [r3, #32]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d901      	bls.n	80040e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e06c      	b.n	80041ba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	699a      	ldr	r2, [r3, #24]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d902      	bls.n	80040fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	3303      	adds	r3, #3
 8004100:	089b      	lsrs	r3, r3, #2
 8004102:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004104:	e02b      	b.n	800415e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	429a      	cmp	r2, r3
 800411a:	d902      	bls.n	8004122 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3303      	adds	r3, #3
 8004126:	089b      	lsrs	r3, r3, #2
 8004128:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6919      	ldr	r1, [r3, #16]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	b2da      	uxtb	r2, r3
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800413a:	b2db      	uxtb	r3, r3
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	4603      	mov	r3, r0
 8004140:	6978      	ldr	r0, [r7, #20]
 8004142:	f002 fc6f 	bl	8006a24 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	441a      	add	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a1a      	ldr	r2, [r3, #32]
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	441a      	add	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	b29b      	uxth	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	429a      	cmp	r2, r3
 8004172:	d809      	bhi.n	8004188 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1a      	ldr	r2, [r3, #32]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800417c:	429a      	cmp	r2, r3
 800417e:	d203      	bcs.n	8004188 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1be      	bne.n	8004106 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	429a      	cmp	r2, r3
 8004192:	d811      	bhi.n	80041b8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	2201      	movs	r2, #1
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	6939      	ldr	r1, [r7, #16]
 80041b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041b4:	4013      	ands	r3, r2
 80041b6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	333c      	adds	r3, #60	; 0x3c
 80041dc:	3304      	adds	r3, #4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d17b      	bne.n	80042f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d015      	beq.n	8004230 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	4a61      	ldr	r2, [pc, #388]	; (800438c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	f240 80b9 	bls.w	8004380 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80b3 	beq.w	8004380 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004226:	461a      	mov	r2, r3
 8004228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800422c:	6093      	str	r3, [r2, #8]
 800422e:	e0a7      	b.n	8004380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	461a      	mov	r2, r3
 8004248:	2320      	movs	r3, #32
 800424a:	6093      	str	r3, [r2, #8]
 800424c:	e098      	b.n	8004380 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004254:	2b00      	cmp	r3, #0
 8004256:	f040 8093 	bne.w	8004380 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	4a4b      	ldr	r2, [pc, #300]	; (800438c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d90f      	bls.n	8004282 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004278:	461a      	mov	r2, r3
 800427a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800427e:	6093      	str	r3, [r2, #8]
 8004280:	e07e      	b.n	8004380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	4613      	mov	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	4413      	add	r3, r2
 8004294:	3304      	adds	r3, #4
 8004296:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	69da      	ldr	r2, [r3, #28]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	0159      	lsls	r1, r3, #5
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	440b      	add	r3, r1
 80042a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ae:	1ad2      	subs	r2, r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d114      	bne.n	80042e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042cc:	461a      	mov	r2, r3
 80042ce:	2101      	movs	r1, #1
 80042d0:	f002 fe3e 	bl	8006f50 <USB_EP0_OutStart>
 80042d4:	e006      	b.n	80042e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	441a      	add	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	4619      	mov	r1, r3
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f005 f820 	bl	8009330 <HAL_PCD_DataOutStageCallback>
 80042f0:	e046      	b.n	8004380 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	4a26      	ldr	r2, [pc, #152]	; (8004390 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d124      	bne.n	8004344 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004310:	461a      	mov	r2, r3
 8004312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004316:	6093      	str	r3, [r2, #8]
 8004318:	e032      	b.n	8004380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004330:	461a      	mov	r2, r3
 8004332:	2320      	movs	r3, #32
 8004334:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	4619      	mov	r1, r3
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f004 fff7 	bl	8009330 <HAL_PCD_DataOutStageCallback>
 8004342:	e01d      	b.n	8004380 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d114      	bne.n	8004374 <PCD_EP_OutXfrComplete_int+0x1b0>
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d108      	bne.n	8004374 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800436c:	461a      	mov	r2, r3
 800436e:	2100      	movs	r1, #0
 8004370:	f002 fdee 	bl	8006f50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f004 ffd8 	bl	8009330 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3720      	adds	r7, #32
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	4f54300a 	.word	0x4f54300a
 8004390:	4f54310a 	.word	0x4f54310a

08004394 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	333c      	adds	r3, #60	; 0x3c
 80043ac:	3304      	adds	r3, #4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4a15      	ldr	r2, [pc, #84]	; (800441c <PCD_EP_OutSetupPacket_int+0x88>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d90e      	bls.n	80043e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d009      	beq.n	80043e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e0:	461a      	mov	r2, r3
 80043e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f004 ff8f 	bl	800930c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4a0a      	ldr	r2, [pc, #40]	; (800441c <PCD_EP_OutSetupPacket_int+0x88>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d90c      	bls.n	8004410 <PCD_EP_OutSetupPacket_int+0x7c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d108      	bne.n	8004410 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004408:	461a      	mov	r2, r3
 800440a:	2101      	movs	r1, #1
 800440c:	f002 fda0 	bl	8006f50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	4f54300a 	.word	0x4f54300a

08004420 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
 800442c:	4613      	mov	r3, r2
 800442e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d107      	bne.n	800444e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800443e:	883b      	ldrh	r3, [r7, #0]
 8004440:	0419      	lsls	r1, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	430a      	orrs	r2, r1
 800444a:	629a      	str	r2, [r3, #40]	; 0x28
 800444c:	e028      	b.n	80044a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	4413      	add	r3, r2
 800445a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800445c:	2300      	movs	r3, #0
 800445e:	73fb      	strb	r3, [r7, #15]
 8004460:	e00d      	b.n	800447e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	3340      	adds	r3, #64	; 0x40
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	4413      	add	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	3301      	adds	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
 800447e:	7bfa      	ldrb	r2, [r7, #15]
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	3b01      	subs	r3, #1
 8004484:	429a      	cmp	r2, r3
 8004486:	d3ec      	bcc.n	8004462 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004488:	883b      	ldrh	r3, [r7, #0]
 800448a:	0418      	lsls	r0, r3, #16
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	3b01      	subs	r3, #1
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	4302      	orrs	r2, r0
 8004498:	3340      	adds	r3, #64	; 0x40
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	460b      	mov	r3, r1
 80044b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e267      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d075      	beq.n	80045f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004506:	4b88      	ldr	r3, [pc, #544]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b04      	cmp	r3, #4
 8004510:	d00c      	beq.n	800452c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004512:	4b85      	ldr	r3, [pc, #532]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800451a:	2b08      	cmp	r3, #8
 800451c:	d112      	bne.n	8004544 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800451e:	4b82      	ldr	r3, [pc, #520]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800452a:	d10b      	bne.n	8004544 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452c:	4b7e      	ldr	r3, [pc, #504]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d05b      	beq.n	80045f0 <HAL_RCC_OscConfig+0x108>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d157      	bne.n	80045f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e242      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454c:	d106      	bne.n	800455c <HAL_RCC_OscConfig+0x74>
 800454e:	4b76      	ldr	r3, [pc, #472]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a75      	ldr	r2, [pc, #468]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e01d      	b.n	8004598 <HAL_RCC_OscConfig+0xb0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0x98>
 8004566:	4b70      	ldr	r3, [pc, #448]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a6f      	ldr	r2, [pc, #444]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 800456c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	4b6d      	ldr	r3, [pc, #436]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a6c      	ldr	r2, [pc, #432]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e00b      	b.n	8004598 <HAL_RCC_OscConfig+0xb0>
 8004580:	4b69      	ldr	r3, [pc, #420]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a68      	ldr	r2, [pc, #416]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	4b66      	ldr	r3, [pc, #408]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a65      	ldr	r2, [pc, #404]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d013      	beq.n	80045c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fc fc16 	bl	8000dd0 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a8:	f7fc fc12 	bl	8000dd0 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	; 0x64
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e207      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ba:	4b5b      	ldr	r3, [pc, #364]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0xc0>
 80045c6:	e014      	b.n	80045f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c8:	f7fc fc02 	bl	8000dd0 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d0:	f7fc fbfe 	bl	8000dd0 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b64      	cmp	r3, #100	; 0x64
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e1f3      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e2:	4b51      	ldr	r3, [pc, #324]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0xe8>
 80045ee:	e000      	b.n	80045f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d063      	beq.n	80046c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045fe:	4b4a      	ldr	r3, [pc, #296]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800460a:	4b47      	ldr	r3, [pc, #284]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004612:	2b08      	cmp	r3, #8
 8004614:	d11c      	bne.n	8004650 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004616:	4b44      	ldr	r3, [pc, #272]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d116      	bne.n	8004650 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004622:	4b41      	ldr	r3, [pc, #260]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_RCC_OscConfig+0x152>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d001      	beq.n	800463a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e1c7      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463a:	4b3b      	ldr	r3, [pc, #236]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4937      	ldr	r1, [pc, #220]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 800464a:	4313      	orrs	r3, r2
 800464c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464e:	e03a      	b.n	80046c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d020      	beq.n	800469a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004658:	4b34      	ldr	r3, [pc, #208]	; (800472c <HAL_RCC_OscConfig+0x244>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465e:	f7fc fbb7 	bl	8000dd0 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004666:	f7fc fbb3 	bl	8000dd0 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e1a8      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004678:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004684:	4b28      	ldr	r3, [pc, #160]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4925      	ldr	r1, [pc, #148]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 8004694:	4313      	orrs	r3, r2
 8004696:	600b      	str	r3, [r1, #0]
 8004698:	e015      	b.n	80046c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <HAL_RCC_OscConfig+0x244>)
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fc fb96 	bl	8000dd0 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046a8:	f7fc fb92 	bl	8000dd0 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e187      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ba:	4b1b      	ldr	r3, [pc, #108]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d036      	beq.n	8004740 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d016      	beq.n	8004708 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046da:	4b15      	ldr	r3, [pc, #84]	; (8004730 <HAL_RCC_OscConfig+0x248>)
 80046dc:	2201      	movs	r2, #1
 80046de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e0:	f7fc fb76 	bl	8000dd0 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046e8:	f7fc fb72 	bl	8000dd0 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e167      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <HAL_RCC_OscConfig+0x240>)
 80046fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0x200>
 8004706:	e01b      	b.n	8004740 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004708:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_RCC_OscConfig+0x248>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800470e:	f7fc fb5f 	bl	8000dd0 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004714:	e00e      	b.n	8004734 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004716:	f7fc fb5b 	bl	8000dd0 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d907      	bls.n	8004734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e150      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
 8004728:	40023800 	.word	0x40023800
 800472c:	42470000 	.word	0x42470000
 8004730:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004734:	4b88      	ldr	r3, [pc, #544]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 8004736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1ea      	bne.n	8004716 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8097 	beq.w	800487c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474e:	2300      	movs	r3, #0
 8004750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004752:	4b81      	ldr	r3, [pc, #516]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10f      	bne.n	800477e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	4b7d      	ldr	r3, [pc, #500]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	4a7c      	ldr	r2, [pc, #496]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 8004768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476c:	6413      	str	r3, [r2, #64]	; 0x40
 800476e:	4b7a      	ldr	r3, [pc, #488]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800477a:	2301      	movs	r3, #1
 800477c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477e:	4b77      	ldr	r3, [pc, #476]	; (800495c <HAL_RCC_OscConfig+0x474>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d118      	bne.n	80047bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800478a:	4b74      	ldr	r3, [pc, #464]	; (800495c <HAL_RCC_OscConfig+0x474>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a73      	ldr	r2, [pc, #460]	; (800495c <HAL_RCC_OscConfig+0x474>)
 8004790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004796:	f7fc fb1b 	bl	8000dd0 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479e:	f7fc fb17 	bl	8000dd0 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e10c      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b0:	4b6a      	ldr	r3, [pc, #424]	; (800495c <HAL_RCC_OscConfig+0x474>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d106      	bne.n	80047d2 <HAL_RCC_OscConfig+0x2ea>
 80047c4:	4b64      	ldr	r3, [pc, #400]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 80047c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c8:	4a63      	ldr	r2, [pc, #396]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	6713      	str	r3, [r2, #112]	; 0x70
 80047d0:	e01c      	b.n	800480c <HAL_RCC_OscConfig+0x324>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b05      	cmp	r3, #5
 80047d8:	d10c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x30c>
 80047da:	4b5f      	ldr	r3, [pc, #380]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	4a5e      	ldr	r2, [pc, #376]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 80047e0:	f043 0304 	orr.w	r3, r3, #4
 80047e4:	6713      	str	r3, [r2, #112]	; 0x70
 80047e6:	4b5c      	ldr	r3, [pc, #368]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	4a5b      	ldr	r2, [pc, #364]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	6713      	str	r3, [r2, #112]	; 0x70
 80047f2:	e00b      	b.n	800480c <HAL_RCC_OscConfig+0x324>
 80047f4:	4b58      	ldr	r3, [pc, #352]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	4a57      	ldr	r2, [pc, #348]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 80047fa:	f023 0301 	bic.w	r3, r3, #1
 80047fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004800:	4b55      	ldr	r3, [pc, #340]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 8004802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004804:	4a54      	ldr	r2, [pc, #336]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 8004806:	f023 0304 	bic.w	r3, r3, #4
 800480a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d015      	beq.n	8004840 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004814:	f7fc fadc 	bl	8000dd0 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481a:	e00a      	b.n	8004832 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800481c:	f7fc fad8 	bl	8000dd0 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	; 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e0cb      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004832:	4b49      	ldr	r3, [pc, #292]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 8004834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0ee      	beq.n	800481c <HAL_RCC_OscConfig+0x334>
 800483e:	e014      	b.n	800486a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004840:	f7fc fac6 	bl	8000dd0 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004846:	e00a      	b.n	800485e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fc fac2 	bl	8000dd0 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e0b5      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800485e:	4b3e      	ldr	r3, [pc, #248]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1ee      	bne.n	8004848 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800486a:	7dfb      	ldrb	r3, [r7, #23]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d105      	bne.n	800487c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004870:	4b39      	ldr	r3, [pc, #228]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	4a38      	ldr	r2, [pc, #224]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 8004876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800487a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80a1 	beq.w	80049c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004886:	4b34      	ldr	r3, [pc, #208]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b08      	cmp	r3, #8
 8004890:	d05c      	beq.n	800494c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d141      	bne.n	800491e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489a:	4b31      	ldr	r3, [pc, #196]	; (8004960 <HAL_RCC_OscConfig+0x478>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a0:	f7fc fa96 	bl	8000dd0 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fc fa92 	bl	8000dd0 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e087      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ba:	4b27      	ldr	r3, [pc, #156]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69da      	ldr	r2, [r3, #28]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	019b      	lsls	r3, r3, #6
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	3b01      	subs	r3, #1
 80048e0:	041b      	lsls	r3, r3, #16
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	061b      	lsls	r3, r3, #24
 80048ea:	491b      	ldr	r1, [pc, #108]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <HAL_RCC_OscConfig+0x478>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f6:	f7fc fa6b 	bl	8000dd0 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048fe:	f7fc fa67 	bl	8000dd0 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e05c      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004910:	4b11      	ldr	r3, [pc, #68]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x416>
 800491c:	e054      	b.n	80049c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800491e:	4b10      	ldr	r3, [pc, #64]	; (8004960 <HAL_RCC_OscConfig+0x478>)
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004924:	f7fc fa54 	bl	8000dd0 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492c:	f7fc fa50 	bl	8000dd0 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e045      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_RCC_OscConfig+0x470>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f0      	bne.n	800492c <HAL_RCC_OscConfig+0x444>
 800494a:	e03d      	b.n	80049c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d107      	bne.n	8004964 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e038      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
 8004958:	40023800 	.word	0x40023800
 800495c:	40007000 	.word	0x40007000
 8004960:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004964:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <HAL_RCC_OscConfig+0x4ec>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d028      	beq.n	80049c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800497c:	429a      	cmp	r2, r3
 800497e:	d121      	bne.n	80049c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498a:	429a      	cmp	r2, r3
 800498c:	d11a      	bne.n	80049c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004994:	4013      	ands	r3, r2
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800499a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800499c:	4293      	cmp	r3, r2
 800499e:	d111      	bne.n	80049c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049aa:	085b      	lsrs	r3, r3, #1
 80049ac:	3b01      	subs	r3, #1
 80049ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d107      	bne.n	80049c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800

080049d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0cc      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049ec:	4b68      	ldr	r3, [pc, #416]	; (8004b90 <HAL_RCC_ClockConfig+0x1b8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d90c      	bls.n	8004a14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fa:	4b65      	ldr	r3, [pc, #404]	; (8004b90 <HAL_RCC_ClockConfig+0x1b8>)
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b63      	ldr	r3, [pc, #396]	; (8004b90 <HAL_RCC_ClockConfig+0x1b8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0b8      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d020      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a2c:	4b59      	ldr	r3, [pc, #356]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	4a58      	ldr	r2, [pc, #352]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a44:	4b53      	ldr	r3, [pc, #332]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	4a52      	ldr	r2, [pc, #328]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a50:	4b50      	ldr	r3, [pc, #320]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	494d      	ldr	r1, [pc, #308]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d044      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d107      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a76:	4b47      	ldr	r3, [pc, #284]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d119      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e07f      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d003      	beq.n	8004a96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d107      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a96:	4b3f      	ldr	r3, [pc, #252]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e06f      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa6:	4b3b      	ldr	r3, [pc, #236]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e067      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ab6:	4b37      	ldr	r3, [pc, #220]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f023 0203 	bic.w	r2, r3, #3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4934      	ldr	r1, [pc, #208]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ac8:	f7fc f982 	bl	8000dd0 <HAL_GetTick>
 8004acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ace:	e00a      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad0:	f7fc f97e 	bl	8000dd0 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e04f      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae6:	4b2b      	ldr	r3, [pc, #172]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 020c 	and.w	r2, r3, #12
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d1eb      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004af8:	4b25      	ldr	r3, [pc, #148]	; (8004b90 <HAL_RCC_ClockConfig+0x1b8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d20c      	bcs.n	8004b20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b06:	4b22      	ldr	r3, [pc, #136]	; (8004b90 <HAL_RCC_ClockConfig+0x1b8>)
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0e:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <HAL_RCC_ClockConfig+0x1b8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e032      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b2c:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4916      	ldr	r1, [pc, #88]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	490e      	ldr	r1, [pc, #56]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b5e:	f000 f82d 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 8004b62:	4602      	mov	r2, r0
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	490a      	ldr	r1, [pc, #40]	; (8004b98 <HAL_RCC_ClockConfig+0x1c0>)
 8004b70:	5ccb      	ldrb	r3, [r1, r3]
 8004b72:	fa22 f303 	lsr.w	r3, r2, r3
 8004b76:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b7a:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fc f8e2 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40023c00 	.word	0x40023c00
 8004b94:	40023800 	.word	0x40023800
 8004b98:	0800993c 	.word	0x0800993c
 8004b9c:	20000000 	.word	0x20000000
 8004ba0:	20000004 	.word	0x20000004

08004ba4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004ba8:	4b03      	ldr	r3, [pc, #12]	; (8004bb8 <HAL_RCC_EnableCSS+0x14>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	4247004c 	.word	0x4247004c

08004bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc0:	b090      	sub	sp, #64	; 0x40
 8004bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc8:	2300      	movs	r3, #0
 8004bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bcc:	2300      	movs	r3, #0
 8004bce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bd4:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d00d      	beq.n	8004bfc <HAL_RCC_GetSysClockFreq+0x40>
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	f200 80a1 	bhi.w	8004d28 <HAL_RCC_GetSysClockFreq+0x16c>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bee:	e09b      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf0:	4b53      	ldr	r3, [pc, #332]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bf2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004bf4:	e09b      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bf6:	4b53      	ldr	r3, [pc, #332]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bf8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bfa:	e098      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bfc:	4b4f      	ldr	r3, [pc, #316]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c06:	4b4d      	ldr	r3, [pc, #308]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d028      	beq.n	8004c64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c12:	4b4a      	ldr	r3, [pc, #296]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	2200      	movs	r2, #0
 8004c1a:	623b      	str	r3, [r7, #32]
 8004c1c:	627a      	str	r2, [r7, #36]	; 0x24
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c24:	2100      	movs	r1, #0
 8004c26:	4b47      	ldr	r3, [pc, #284]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c28:	fb03 f201 	mul.w	r2, r3, r1
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	fb00 f303 	mul.w	r3, r0, r3
 8004c32:	4413      	add	r3, r2
 8004c34:	4a43      	ldr	r2, [pc, #268]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c36:	fba0 1202 	umull	r1, r2, r0, r2
 8004c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c3c:	460a      	mov	r2, r1
 8004c3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c42:	4413      	add	r3, r2
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c48:	2200      	movs	r2, #0
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	61fa      	str	r2, [r7, #28]
 8004c4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c56:	f7fb fabf 	bl	80001d8 <__aeabi_uldivmod>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4613      	mov	r3, r2
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c62:	e053      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c64:	4b35      	ldr	r3, [pc, #212]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	099b      	lsrs	r3, r3, #6
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	617a      	str	r2, [r7, #20]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c76:	f04f 0b00 	mov.w	fp, #0
 8004c7a:	4652      	mov	r2, sl
 8004c7c:	465b      	mov	r3, fp
 8004c7e:	f04f 0000 	mov.w	r0, #0
 8004c82:	f04f 0100 	mov.w	r1, #0
 8004c86:	0159      	lsls	r1, r3, #5
 8004c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c8c:	0150      	lsls	r0, r2, #5
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	ebb2 080a 	subs.w	r8, r2, sl
 8004c96:	eb63 090b 	sbc.w	r9, r3, fp
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ca6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004caa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cae:	ebb2 0408 	subs.w	r4, r2, r8
 8004cb2:	eb63 0509 	sbc.w	r5, r3, r9
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	00eb      	lsls	r3, r5, #3
 8004cc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cc4:	00e2      	lsls	r2, r4, #3
 8004cc6:	4614      	mov	r4, r2
 8004cc8:	461d      	mov	r5, r3
 8004cca:	eb14 030a 	adds.w	r3, r4, sl
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	eb45 030b 	adc.w	r3, r5, fp
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	028b      	lsls	r3, r1, #10
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cec:	4621      	mov	r1, r4
 8004cee:	028a      	lsls	r2, r1, #10
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	60fa      	str	r2, [r7, #12]
 8004cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d00:	f7fb fa6a 	bl	80001d8 <__aeabi_uldivmod>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4613      	mov	r3, r2
 8004d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	0c1b      	lsrs	r3, r3, #16
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	3301      	adds	r3, #1
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d26:	e002      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3740      	adds	r7, #64	; 0x40
 8004d34:	46bd      	mov	sp, r7
 8004d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	00f42400 	.word	0x00f42400
 8004d44:	017d7840 	.word	0x017d7840

08004d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d4c:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20000000 	.word	0x20000000

08004d60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d105      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d038      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d88:	4b68      	ldr	r3, [pc, #416]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d8e:	f7fc f81f 	bl	8000dd0 <HAL_GetTick>
 8004d92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d94:	e008      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d96:	f7fc f81b 	bl	8000dd0 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e0bd      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004da8:	4b61      	ldr	r3, [pc, #388]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f0      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	019b      	lsls	r3, r3, #6
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	071b      	lsls	r3, r3, #28
 8004dc6:	495a      	ldr	r1, [pc, #360]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dce:	4b57      	ldr	r3, [pc, #348]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dd4:	f7fb fffc 	bl	8000dd0 <HAL_GetTick>
 8004dd8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ddc:	f7fb fff8 	bl	8000dd0 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e09a      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dee:	4b50      	ldr	r3, [pc, #320]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8083 	beq.w	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	4b48      	ldr	r3, [pc, #288]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	4a47      	ldr	r2, [pc, #284]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e16:	6413      	str	r3, [r2, #64]	; 0x40
 8004e18:	4b45      	ldr	r3, [pc, #276]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e24:	4b43      	ldr	r3, [pc, #268]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a42      	ldr	r2, [pc, #264]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e30:	f7fb ffce 	bl	8000dd0 <HAL_GetTick>
 8004e34:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e38:	f7fb ffca 	bl	8000dd0 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e06c      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e4a:	4b3a      	ldr	r3, [pc, #232]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e56:	4b36      	ldr	r3, [pc, #216]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d02f      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d028      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e74:	4b2e      	ldr	r3, [pc, #184]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e7e:	4b2e      	ldr	r3, [pc, #184]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e84:	4b2c      	ldr	r3, [pc, #176]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e8a:	4a29      	ldr	r2, [pc, #164]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e90:	4b27      	ldr	r3, [pc, #156]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d114      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fb ff98 	bl	8000dd0 <HAL_GetTick>
 8004ea0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea2:	e00a      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ea4:	f7fb ff94 	bl	8000dd0 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e034      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eba:	4b1d      	ldr	r3, [pc, #116]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0ee      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ed2:	d10d      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004ed4:	4b16      	ldr	r3, [pc, #88]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee8:	4911      	ldr	r1, [pc, #68]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
 8004eee:	e005      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4a0e      	ldr	r2, [pc, #56]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004efa:	6093      	str	r3, [r2, #8]
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f08:	4909      	ldr	r1, [pc, #36]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	7d1a      	ldrb	r2, [r3, #20]
 8004f1e:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f20:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	42470068 	.word	0x42470068
 8004f30:	40023800 	.word	0x40023800
 8004f34:	40007000 	.word	0x40007000
 8004f38:	42470e40 	.word	0x42470e40
 8004f3c:	424711e0 	.word	0x424711e0

08004f40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d140      	bne.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004f5e:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d131      	bne.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f74:	4b1f      	ldr	r3, [pc, #124]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f76:	617b      	str	r3, [r7, #20]
          break;
 8004f78:	e031      	b.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f86:	d109      	bne.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004f88:	4b19      	ldr	r3, [pc, #100]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f92:	4a19      	ldr	r2, [pc, #100]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	e008      	b.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004f9c:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fa6:	4a15      	ldr	r2, [pc, #84]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004fae:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb4:	099b      	lsrs	r3, r3, #6
 8004fb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	fb02 f303 	mul.w	r3, r2, r3
 8004fc0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc8:	0f1b      	lsrs	r3, r3, #28
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd4:	617b      	str	r3, [r7, #20]
          break;
 8004fd6:	e002      	b.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
          break;
 8004fdc:	bf00      	nop
        }
      }
      break;
 8004fde:	bf00      	nop
    }
  }
  return frequency;
 8004fe0:	697b      	ldr	r3, [r7, #20]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	00bb8000 	.word	0x00bb8000
 8004ff8:	017d7840 	.word	0x017d7840
 8004ffc:	00f42400 	.word	0x00f42400

08005000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e041      	b.n	8005096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fb fe1a 	bl	8000c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3304      	adds	r3, #4
 800503c:	4619      	mov	r1, r3
 800503e:	4610      	mov	r0, r2
 8005040:	f000 fa2e 	bl	80054a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d122      	bne.n	80050fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d11b      	bne.n	80050fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f06f 0202 	mvn.w	r2, #2
 80050ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f9bf 	bl	8005464 <HAL_TIM_IC_CaptureCallback>
 80050e6:	e005      	b.n	80050f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f9b1 	bl	8005450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f9c2 	bl	8005478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b04      	cmp	r3, #4
 8005106:	d122      	bne.n	800514e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b04      	cmp	r3, #4
 8005114:	d11b      	bne.n	800514e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f06f 0204 	mvn.w	r2, #4
 800511e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f995 	bl	8005464 <HAL_TIM_IC_CaptureCallback>
 800513a:	e005      	b.n	8005148 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f987 	bl	8005450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f998 	bl	8005478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b08      	cmp	r3, #8
 800515a:	d122      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b08      	cmp	r3, #8
 8005168:	d11b      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f06f 0208 	mvn.w	r2, #8
 8005172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2204      	movs	r2, #4
 8005178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f96b 	bl	8005464 <HAL_TIM_IC_CaptureCallback>
 800518e:	e005      	b.n	800519c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f95d 	bl	8005450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f96e 	bl	8005478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d122      	bne.n	80051f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b10      	cmp	r3, #16
 80051bc:	d11b      	bne.n	80051f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0210 	mvn.w	r2, #16
 80051c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2208      	movs	r2, #8
 80051cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f941 	bl	8005464 <HAL_TIM_IC_CaptureCallback>
 80051e2:	e005      	b.n	80051f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f933 	bl	8005450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f944 	bl	8005478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b01      	cmp	r3, #1
 8005202:	d10e      	bne.n	8005222 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b01      	cmp	r3, #1
 8005210:	d107      	bne.n	8005222 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f06f 0201 	mvn.w	r2, #1
 800521a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f90d 	bl	800543c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522c:	2b80      	cmp	r3, #128	; 0x80
 800522e:	d10e      	bne.n	800524e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	2b80      	cmp	r3, #128	; 0x80
 800523c:	d107      	bne.n	800524e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fabb 	bl	80057c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b40      	cmp	r3, #64	; 0x40
 800525a:	d10e      	bne.n	800527a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005266:	2b40      	cmp	r3, #64	; 0x40
 8005268:	d107      	bne.n	800527a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f909 	bl	800548c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b20      	cmp	r3, #32
 8005286:	d10e      	bne.n	80052a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b20      	cmp	r3, #32
 8005294:	d107      	bne.n	80052a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f06f 0220 	mvn.w	r2, #32
 800529e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fa85 	bl	80057b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_TIM_ConfigClockSource+0x1c>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e0b4      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x186>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052f0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005302:	d03e      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0xd4>
 8005304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005308:	f200 8087 	bhi.w	800541a <HAL_TIM_ConfigClockSource+0x16c>
 800530c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005310:	f000 8086 	beq.w	8005420 <HAL_TIM_ConfigClockSource+0x172>
 8005314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005318:	d87f      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
 800531a:	2b70      	cmp	r3, #112	; 0x70
 800531c:	d01a      	beq.n	8005354 <HAL_TIM_ConfigClockSource+0xa6>
 800531e:	2b70      	cmp	r3, #112	; 0x70
 8005320:	d87b      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
 8005322:	2b60      	cmp	r3, #96	; 0x60
 8005324:	d050      	beq.n	80053c8 <HAL_TIM_ConfigClockSource+0x11a>
 8005326:	2b60      	cmp	r3, #96	; 0x60
 8005328:	d877      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
 800532a:	2b50      	cmp	r3, #80	; 0x50
 800532c:	d03c      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0xfa>
 800532e:	2b50      	cmp	r3, #80	; 0x50
 8005330:	d873      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d058      	beq.n	80053e8 <HAL_TIM_ConfigClockSource+0x13a>
 8005336:	2b40      	cmp	r3, #64	; 0x40
 8005338:	d86f      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
 800533a:	2b30      	cmp	r3, #48	; 0x30
 800533c:	d064      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0x15a>
 800533e:	2b30      	cmp	r3, #48	; 0x30
 8005340:	d86b      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
 8005342:	2b20      	cmp	r3, #32
 8005344:	d060      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0x15a>
 8005346:	2b20      	cmp	r3, #32
 8005348:	d867      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d05c      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0x15a>
 800534e:	2b10      	cmp	r3, #16
 8005350:	d05a      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0x15a>
 8005352:	e062      	b.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	6899      	ldr	r1, [r3, #8]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f000 f996 	bl	8005694 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005376:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	609a      	str	r2, [r3, #8]
      break;
 8005380:	e04f      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6899      	ldr	r1, [r3, #8]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f000 f97f 	bl	8005694 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053a4:	609a      	str	r2, [r3, #8]
      break;
 80053a6:	e03c      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	6859      	ldr	r1, [r3, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	461a      	mov	r2, r3
 80053b6:	f000 f8f3 	bl	80055a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2150      	movs	r1, #80	; 0x50
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f94c 	bl	800565e <TIM_ITRx_SetConfig>
      break;
 80053c6:	e02c      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	6859      	ldr	r1, [r3, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	461a      	mov	r2, r3
 80053d6:	f000 f912 	bl	80055fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2160      	movs	r1, #96	; 0x60
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f93c 	bl	800565e <TIM_ITRx_SetConfig>
      break;
 80053e6:	e01c      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	6859      	ldr	r1, [r3, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	461a      	mov	r2, r3
 80053f6:	f000 f8d3 	bl	80055a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2140      	movs	r1, #64	; 0x40
 8005400:	4618      	mov	r0, r3
 8005402:	f000 f92c 	bl	800565e <TIM_ITRx_SetConfig>
      break;
 8005406:	e00c      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f000 f923 	bl	800565e <TIM_ITRx_SetConfig>
      break;
 8005418:	e003      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	73fb      	strb	r3, [r7, #15]
      break;
 800541e:	e000      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005420:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005432:	7bfb      	ldrb	r3, [r7, #15]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a34      	ldr	r2, [pc, #208]	; (8005584 <TIM_Base_SetConfig+0xe4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00f      	beq.n	80054d8 <TIM_Base_SetConfig+0x38>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054be:	d00b      	beq.n	80054d8 <TIM_Base_SetConfig+0x38>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a31      	ldr	r2, [pc, #196]	; (8005588 <TIM_Base_SetConfig+0xe8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d007      	beq.n	80054d8 <TIM_Base_SetConfig+0x38>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a30      	ldr	r2, [pc, #192]	; (800558c <TIM_Base_SetConfig+0xec>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_Base_SetConfig+0x38>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a2f      	ldr	r2, [pc, #188]	; (8005590 <TIM_Base_SetConfig+0xf0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d108      	bne.n	80054ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a25      	ldr	r2, [pc, #148]	; (8005584 <TIM_Base_SetConfig+0xe4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01b      	beq.n	800552a <TIM_Base_SetConfig+0x8a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f8:	d017      	beq.n	800552a <TIM_Base_SetConfig+0x8a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a22      	ldr	r2, [pc, #136]	; (8005588 <TIM_Base_SetConfig+0xe8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <TIM_Base_SetConfig+0x8a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a21      	ldr	r2, [pc, #132]	; (800558c <TIM_Base_SetConfig+0xec>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00f      	beq.n	800552a <TIM_Base_SetConfig+0x8a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a20      	ldr	r2, [pc, #128]	; (8005590 <TIM_Base_SetConfig+0xf0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00b      	beq.n	800552a <TIM_Base_SetConfig+0x8a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a1f      	ldr	r2, [pc, #124]	; (8005594 <TIM_Base_SetConfig+0xf4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <TIM_Base_SetConfig+0x8a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <TIM_Base_SetConfig+0xf8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_Base_SetConfig+0x8a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a1d      	ldr	r2, [pc, #116]	; (800559c <TIM_Base_SetConfig+0xfc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d108      	bne.n	800553c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a08      	ldr	r2, [pc, #32]	; (8005584 <TIM_Base_SetConfig+0xe4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d103      	bne.n	8005570 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	615a      	str	r2, [r3, #20]
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40014000 	.word	0x40014000
 8005598:	40014400 	.word	0x40014400
 800559c:	40014800 	.word	0x40014800

080055a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	f023 0201 	bic.w	r2, r3, #1
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f023 030a 	bic.w	r3, r3, #10
 80055dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	621a      	str	r2, [r3, #32]
}
 80055f2:	bf00      	nop
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055fe:	b480      	push	{r7}
 8005600:	b087      	sub	sp, #28
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f023 0210 	bic.w	r2, r3, #16
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005628:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	031b      	lsls	r3, r3, #12
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800563a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800565e:	b480      	push	{r7}
 8005660:	b085      	sub	sp, #20
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005674:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	f043 0307 	orr.w	r3, r3, #7
 8005680:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	609a      	str	r2, [r3, #8]
}
 8005688:	bf00      	nop
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	021a      	lsls	r2, r3, #8
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e050      	b.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005712:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a1c      	ldr	r2, [pc, #112]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d018      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005738:	d013      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00e      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a16      	ldr	r2, [pc, #88]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d004      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a13      	ldr	r2, [pc, #76]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d10c      	bne.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	4313      	orrs	r3, r2
 8005772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40010000 	.word	0x40010000
 80057a0:	40000400 	.word	0x40000400
 80057a4:	40000800 	.word	0x40000800
 80057a8:	40000c00 	.word	0x40000c00
 80057ac:	40014000 	.word	0x40014000

080057b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057d8:	b084      	sub	sp, #16
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	f107 001c 	add.w	r0, r7, #28
 80057e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d122      	bne.n	8005836 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581a:	2b01      	cmp	r3, #1
 800581c:	d105      	bne.n	800582a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f001 fbee 	bl	800700c <USB_CoreReset>
 8005830:	4603      	mov	r3, r0
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	e01a      	b.n	800586c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f001 fbe2 	bl	800700c <USB_CoreReset>
 8005848:	4603      	mov	r3, r0
 800584a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800584c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005856:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	639a      	str	r2, [r3, #56]	; 0x38
 800585e:	e005      	b.n	800586c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	2b01      	cmp	r3, #1
 8005870:	d10b      	bne.n	800588a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f043 0206 	orr.w	r2, r3, #6
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f043 0220 	orr.w	r2, r3, #32
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800588a:	7bfb      	ldrb	r3, [r7, #15]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005896:	b004      	add	sp, #16
 8005898:	4770      	bx	lr
	...

0800589c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d165      	bne.n	800597c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4a41      	ldr	r2, [pc, #260]	; (80059b8 <USB_SetTurnaroundTime+0x11c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d906      	bls.n	80058c6 <USB_SetTurnaroundTime+0x2a>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4a40      	ldr	r2, [pc, #256]	; (80059bc <USB_SetTurnaroundTime+0x120>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d202      	bcs.n	80058c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058c0:	230f      	movs	r3, #15
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e062      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4a3c      	ldr	r2, [pc, #240]	; (80059bc <USB_SetTurnaroundTime+0x120>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d306      	bcc.n	80058dc <USB_SetTurnaroundTime+0x40>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	4a3b      	ldr	r2, [pc, #236]	; (80059c0 <USB_SetTurnaroundTime+0x124>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d202      	bcs.n	80058dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80058d6:	230e      	movs	r3, #14
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	e057      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4a38      	ldr	r2, [pc, #224]	; (80059c0 <USB_SetTurnaroundTime+0x124>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d306      	bcc.n	80058f2 <USB_SetTurnaroundTime+0x56>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4a37      	ldr	r2, [pc, #220]	; (80059c4 <USB_SetTurnaroundTime+0x128>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d202      	bcs.n	80058f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80058ec:	230d      	movs	r3, #13
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e04c      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	4a33      	ldr	r2, [pc, #204]	; (80059c4 <USB_SetTurnaroundTime+0x128>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d306      	bcc.n	8005908 <USB_SetTurnaroundTime+0x6c>
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4a32      	ldr	r2, [pc, #200]	; (80059c8 <USB_SetTurnaroundTime+0x12c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d802      	bhi.n	8005908 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005902:	230c      	movs	r3, #12
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e041      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4a2f      	ldr	r2, [pc, #188]	; (80059c8 <USB_SetTurnaroundTime+0x12c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d906      	bls.n	800591e <USB_SetTurnaroundTime+0x82>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4a2e      	ldr	r2, [pc, #184]	; (80059cc <USB_SetTurnaroundTime+0x130>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d802      	bhi.n	800591e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005918:	230b      	movs	r3, #11
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e036      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4a2a      	ldr	r2, [pc, #168]	; (80059cc <USB_SetTurnaroundTime+0x130>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d906      	bls.n	8005934 <USB_SetTurnaroundTime+0x98>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	4a29      	ldr	r2, [pc, #164]	; (80059d0 <USB_SetTurnaroundTime+0x134>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d802      	bhi.n	8005934 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800592e:	230a      	movs	r3, #10
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e02b      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4a26      	ldr	r2, [pc, #152]	; (80059d0 <USB_SetTurnaroundTime+0x134>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d906      	bls.n	800594a <USB_SetTurnaroundTime+0xae>
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4a25      	ldr	r2, [pc, #148]	; (80059d4 <USB_SetTurnaroundTime+0x138>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d202      	bcs.n	800594a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005944:	2309      	movs	r3, #9
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	e020      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4a21      	ldr	r2, [pc, #132]	; (80059d4 <USB_SetTurnaroundTime+0x138>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d306      	bcc.n	8005960 <USB_SetTurnaroundTime+0xc4>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	4a20      	ldr	r2, [pc, #128]	; (80059d8 <USB_SetTurnaroundTime+0x13c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d802      	bhi.n	8005960 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800595a:	2308      	movs	r3, #8
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	e015      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4a1d      	ldr	r2, [pc, #116]	; (80059d8 <USB_SetTurnaroundTime+0x13c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d906      	bls.n	8005976 <USB_SetTurnaroundTime+0xda>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4a1c      	ldr	r2, [pc, #112]	; (80059dc <USB_SetTurnaroundTime+0x140>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d202      	bcs.n	8005976 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005970:	2307      	movs	r3, #7
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	e00a      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005976:	2306      	movs	r3, #6
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e007      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005982:	2309      	movs	r3, #9
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	e001      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005988:	2309      	movs	r3, #9
 800598a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	029b      	lsls	r3, r3, #10
 80059a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80059a4:	431a      	orrs	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	00d8acbf 	.word	0x00d8acbf
 80059bc:	00e4e1c0 	.word	0x00e4e1c0
 80059c0:	00f42400 	.word	0x00f42400
 80059c4:	01067380 	.word	0x01067380
 80059c8:	011a499f 	.word	0x011a499f
 80059cc:	01312cff 	.word	0x01312cff
 80059d0:	014ca43f 	.word	0x014ca43f
 80059d4:	016e3600 	.word	0x016e3600
 80059d8:	01a6ab1f 	.word	0x01a6ab1f
 80059dc:	01e84800 	.word	0x01e84800

080059e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f043 0201 	orr.w	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f023 0201 	bic.w	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d115      	bne.n	8005a72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a52:	2001      	movs	r0, #1
 8005a54:	f7fb f9c8 	bl	8000de8 <HAL_Delay>
      ms++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 fa45 	bl	8006eee <USB_GetMode>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d01e      	beq.n	8005aa8 <USB_SetCurrentMode+0x84>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b31      	cmp	r3, #49	; 0x31
 8005a6e:	d9f0      	bls.n	8005a52 <USB_SetCurrentMode+0x2e>
 8005a70:	e01a      	b.n	8005aa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a72:	78fb      	ldrb	r3, [r7, #3]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d115      	bne.n	8005aa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a84:	2001      	movs	r0, #1
 8005a86:	f7fb f9af 	bl	8000de8 <HAL_Delay>
      ms++;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 fa2c 	bl	8006eee <USB_GetMode>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <USB_SetCurrentMode+0x84>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b31      	cmp	r3, #49	; 0x31
 8005aa0:	d9f0      	bls.n	8005a84 <USB_SetCurrentMode+0x60>
 8005aa2:	e001      	b.n	8005aa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e005      	b.n	8005ab4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b32      	cmp	r3, #50	; 0x32
 8005aac:	d101      	bne.n	8005ab2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005abc:	b084      	sub	sp, #16
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b086      	sub	sp, #24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	e009      	b.n	8005af0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	3340      	adds	r3, #64	; 0x40
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	3301      	adds	r3, #1
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2b0e      	cmp	r3, #14
 8005af4:	d9f2      	bls.n	8005adc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d11c      	bne.n	8005b36 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b0a:	f043 0302 	orr.w	r3, r3, #2
 8005b0e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38
 8005b34:	e00b      	b.n	8005b4e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b54:	461a      	mov	r2, r3
 8005b56:	2300      	movs	r3, #0
 8005b58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b60:	4619      	mov	r1, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b68:	461a      	mov	r2, r3
 8005b6a:	680b      	ldr	r3, [r1, #0]
 8005b6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d10c      	bne.n	8005b8e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d104      	bne.n	8005b84 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f965 	bl	8005e4c <USB_SetDevSpeed>
 8005b82:	e008      	b.n	8005b96 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b84:	2101      	movs	r1, #1
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f960 	bl	8005e4c <USB_SetDevSpeed>
 8005b8c:	e003      	b.n	8005b96 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b8e:	2103      	movs	r1, #3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f95b 	bl	8005e4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b96:	2110      	movs	r1, #16
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f8f3 	bl	8005d84 <USB_FlushTxFifo>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f91f 	bl	8005dec <USB_FlushRxFifo>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bca:	461a      	mov	r2, r3
 8005bcc:	2300      	movs	r3, #0
 8005bce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	2300      	movs	r3, #0
 8005bda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	613b      	str	r3, [r7, #16]
 8005be0:	e043      	b.n	8005c6a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bf8:	d118      	bne.n	8005c2c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	e013      	b.n	8005c3e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c22:	461a      	mov	r2, r3
 8005c24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	e008      	b.n	8005c3e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	461a      	mov	r2, r3
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	3301      	adds	r3, #1
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d3b7      	bcc.n	8005be2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c72:	2300      	movs	r3, #0
 8005c74:	613b      	str	r3, [r7, #16]
 8005c76:	e043      	b.n	8005d00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c8e:	d118      	bne.n	8005cc2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10a      	bne.n	8005cac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	e013      	b.n	8005cd4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb8:	461a      	mov	r2, r3
 8005cba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	e008      	b.n	8005cd4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	461a      	mov	r2, r3
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	613b      	str	r3, [r7, #16]
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d3b7      	bcc.n	8005c78 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d105      	bne.n	8005d3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f043 0210 	orr.w	r2, r3, #16
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699a      	ldr	r2, [r3, #24]
 8005d40:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <USB_DevInit+0x2c4>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d005      	beq.n	8005d5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f043 0208 	orr.w	r2, r3, #8
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d107      	bne.n	8005d70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d68:	f043 0304 	orr.w	r3, r3, #4
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d7c:	b004      	add	sp, #16
 8005d7e:	4770      	bx	lr
 8005d80:	803c3800 	.word	0x803c3800

08005d84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3301      	adds	r3, #1
 8005d96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <USB_FlushTxFifo+0x64>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d901      	bls.n	8005da4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e01b      	b.n	8005ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	daf2      	bge.n	8005d92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	019b      	lsls	r3, r3, #6
 8005db4:	f043 0220 	orr.w	r2, r3, #32
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a08      	ldr	r2, [pc, #32]	; (8005de8 <USB_FlushTxFifo+0x64>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d901      	bls.n	8005dce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e006      	b.n	8005ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d0f0      	beq.n	8005dbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	00030d40 	.word	0x00030d40

08005dec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4a11      	ldr	r2, [pc, #68]	; (8005e48 <USB_FlushRxFifo+0x5c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d901      	bls.n	8005e0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e018      	b.n	8005e3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	daf2      	bge.n	8005df8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2210      	movs	r2, #16
 8005e1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4a08      	ldr	r2, [pc, #32]	; (8005e48 <USB_FlushRxFifo+0x5c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d901      	bls.n	8005e2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e006      	b.n	8005e3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f003 0310 	and.w	r3, r3, #16
 8005e36:	2b10      	cmp	r3, #16
 8005e38:	d0f0      	beq.n	8005e1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	00030d40 	.word	0x00030d40

08005e4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b087      	sub	sp, #28
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 0306 	and.w	r3, r3, #6
 8005e96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d102      	bne.n	8005ea4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	75fb      	strb	r3, [r7, #23]
 8005ea2:	e00a      	b.n	8005eba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d002      	beq.n	8005eb0 <USB_GetDevSpeed+0x32>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b06      	cmp	r3, #6
 8005eae:	d102      	bne.n	8005eb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	75fb      	strb	r3, [r7, #23]
 8005eb4:	e001      	b.n	8005eba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005eb6:	230f      	movs	r3, #15
 8005eb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d13a      	bne.n	8005f5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	68f9      	ldr	r1, [r7, #12]
 8005efe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d155      	bne.n	8005fc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	791b      	ldrb	r3, [r3, #4]
 8005f36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	059b      	lsls	r3, r3, #22
 8005f3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f40:	4313      	orrs	r3, r2
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	e036      	b.n	8005fc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f60:	69da      	ldr	r2, [r3, #28]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f70:	041b      	lsls	r3, r3, #16
 8005f72:	68f9      	ldr	r1, [r7, #12]
 8005f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d11a      	bne.n	8005fc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	791b      	ldrb	r3, [r3, #4]
 8005fac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fae:	430b      	orrs	r3, r1
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
	...

08005fd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	785b      	ldrb	r3, [r3, #1]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d161      	bne.n	80060b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800600a:	d11f      	bne.n	800604c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	440a      	add	r2, r1
 8006022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006026:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800602a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006046:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800604a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	2101      	movs	r1, #1
 800605e:	fa01 f303 	lsl.w	r3, r1, r3
 8006062:	b29b      	uxth	r3, r3
 8006064:	43db      	mvns	r3, r3
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800606c:	4013      	ands	r3, r2
 800606e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	f003 030f 	and.w	r3, r3, #15
 8006080:	2101      	movs	r1, #1
 8006082:	fa01 f303 	lsl.w	r3, r1, r3
 8006086:	b29b      	uxth	r3, r3
 8006088:	43db      	mvns	r3, r3
 800608a:	68f9      	ldr	r1, [r7, #12]
 800608c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006090:	4013      	ands	r3, r2
 8006092:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	0159      	lsls	r1, r3, #5
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	440b      	add	r3, r1
 80060aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ae:	4619      	mov	r1, r3
 80060b0:	4b35      	ldr	r3, [pc, #212]	; (8006188 <USB_DeactivateEndpoint+0x1b0>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	600b      	str	r3, [r1, #0]
 80060b6:	e060      	b.n	800617a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060ce:	d11f      	bne.n	8006110 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	0151      	lsls	r1, r2, #5
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	440a      	add	r2, r1
 8006106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800610a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800610e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	2101      	movs	r1, #1
 8006122:	fa01 f303 	lsl.w	r3, r1, r3
 8006126:	041b      	lsls	r3, r3, #16
 8006128:	43db      	mvns	r3, r3
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006130:	4013      	ands	r3, r2
 8006132:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613a:	69da      	ldr	r2, [r3, #28]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	f003 030f 	and.w	r3, r3, #15
 8006144:	2101      	movs	r1, #1
 8006146:	fa01 f303 	lsl.w	r3, r1, r3
 800614a:	041b      	lsls	r3, r3, #16
 800614c:	43db      	mvns	r3, r3
 800614e:	68f9      	ldr	r1, [r7, #12]
 8006150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006154:	4013      	ands	r3, r2
 8006156:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	0159      	lsls	r1, r3, #5
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	440b      	add	r3, r1
 800616e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006172:	4619      	mov	r1, r3
 8006174:	4b05      	ldr	r3, [pc, #20]	; (800618c <USB_DeactivateEndpoint+0x1b4>)
 8006176:	4013      	ands	r3, r2
 8006178:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	ec337800 	.word	0xec337800
 800618c:	eff37800 	.word	0xeff37800

08006190 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	f040 815c 	bne.w	800646a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d132      	bne.n	8006220 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	69fa      	ldr	r2, [r7, #28]
 8006212:	440a      	add	r2, r1
 8006214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006218:	0cdb      	lsrs	r3, r3, #19
 800621a:	04db      	lsls	r3, r3, #19
 800621c:	6113      	str	r3, [r2, #16]
 800621e:	e074      	b.n	800630a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	440a      	add	r2, r1
 8006236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623a:	0cdb      	lsrs	r3, r3, #19
 800623c:	04db      	lsls	r3, r3, #19
 800623e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	0151      	lsls	r1, r2, #5
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	440a      	add	r2, r1
 8006256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800625a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800625e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006262:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6999      	ldr	r1, [r3, #24]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	440b      	add	r3, r1
 800627c:	1e59      	subs	r1, r3, #1
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	fbb1 f3f3 	udiv	r3, r1, r3
 8006286:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006288:	4b9d      	ldr	r3, [pc, #628]	; (8006500 <USB_EPStartXfer+0x370>)
 800628a:	400b      	ands	r3, r1
 800628c:	69b9      	ldr	r1, [r7, #24]
 800628e:	0148      	lsls	r0, r1, #5
 8006290:	69f9      	ldr	r1, [r7, #28]
 8006292:	4401      	add	r1, r0
 8006294:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006298:	4313      	orrs	r3, r2
 800629a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062b2:	69b9      	ldr	r1, [r7, #24]
 80062b4:	0148      	lsls	r0, r1, #5
 80062b6:	69f9      	ldr	r1, [r7, #28]
 80062b8:	4401      	add	r1, r0
 80062ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062be:	4313      	orrs	r3, r2
 80062c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	791b      	ldrb	r3, [r3, #4]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d11f      	bne.n	800630a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	0151      	lsls	r1, r2, #5
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	440a      	add	r2, r1
 80062e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80062e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	0151      	lsls	r1, r2, #5
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	440a      	add	r2, r1
 8006300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006304:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006308:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d14b      	bne.n	80063a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d009      	beq.n	800632c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006324:	461a      	mov	r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	791b      	ldrb	r3, [r3, #4]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d128      	bne.n	8006386 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006340:	2b00      	cmp	r3, #0
 8006342:	d110      	bne.n	8006366 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	e00f      	b.n	8006386 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	440a      	add	r2, r1
 800637c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006384:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	0151      	lsls	r1, r2, #5
 8006398:	69fa      	ldr	r2, [r7, #28]
 800639a:	440a      	add	r2, r1
 800639c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e133      	b.n	8006610 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	791b      	ldrb	r3, [r3, #4]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d015      	beq.n	80063fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 811b 	beq.w	8006610 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	2101      	movs	r1, #1
 80063ec:	fa01 f303 	lsl.w	r3, r1, r3
 80063f0:	69f9      	ldr	r1, [r7, #28]
 80063f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063f6:	4313      	orrs	r3, r2
 80063f8:	634b      	str	r3, [r1, #52]	; 0x34
 80063fa:	e109      	b.n	8006610 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006408:	2b00      	cmp	r3, #0
 800640a:	d110      	bne.n	800642e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	0151      	lsls	r1, r2, #5
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	440a      	add	r2, r1
 8006422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006426:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	e00f      	b.n	800644e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	440a      	add	r2, r1
 8006444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6919      	ldr	r1, [r3, #16]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	781a      	ldrb	r2, [r3, #0]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	b298      	uxth	r0, r3
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	4603      	mov	r3, r0
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fade 	bl	8006a24 <USB_WritePacket>
 8006468:	e0d2      	b.n	8006610 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	69fa      	ldr	r2, [r7, #28]
 800647e:	440a      	add	r2, r1
 8006480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006484:	0cdb      	lsrs	r3, r3, #19
 8006486:	04db      	lsls	r3, r3, #19
 8006488:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d126      	bne.n	8006504 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064cc:	69b9      	ldr	r1, [r7, #24]
 80064ce:	0148      	lsls	r0, r1, #5
 80064d0:	69f9      	ldr	r1, [r7, #28]
 80064d2:	4401      	add	r1, r0
 80064d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064d8:	4313      	orrs	r3, r2
 80064da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064fa:	6113      	str	r3, [r2, #16]
 80064fc:	e03a      	b.n	8006574 <USB_EPStartXfer+0x3e4>
 80064fe:	bf00      	nop
 8006500:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	699a      	ldr	r2, [r3, #24]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	4413      	add	r3, r2
 800650e:	1e5a      	subs	r2, r3, #1
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	fbb2 f3f3 	udiv	r3, r2, r3
 8006518:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	8afa      	ldrh	r2, [r7, #22]
 8006520:	fb03 f202 	mul.w	r2, r3, r2
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	8afb      	ldrh	r3, [r7, #22]
 8006538:	04d9      	lsls	r1, r3, #19
 800653a:	4b38      	ldr	r3, [pc, #224]	; (800661c <USB_EPStartXfer+0x48c>)
 800653c:	400b      	ands	r3, r1
 800653e:	69b9      	ldr	r1, [r7, #24]
 8006540:	0148      	lsls	r0, r1, #5
 8006542:	69f9      	ldr	r1, [r7, #28]
 8006544:	4401      	add	r1, r0
 8006546:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800654a:	4313      	orrs	r3, r2
 800654c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006564:	69b9      	ldr	r1, [r7, #24]
 8006566:	0148      	lsls	r0, r1, #5
 8006568:	69f9      	ldr	r1, [r7, #28]
 800656a:	4401      	add	r1, r0
 800656c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006570:	4313      	orrs	r3, r2
 8006572:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d10d      	bne.n	8006596 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d009      	beq.n	8006596 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	6919      	ldr	r1, [r3, #16]
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006592:	460a      	mov	r2, r1
 8006594:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	791b      	ldrb	r3, [r3, #4]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d128      	bne.n	80065f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d110      	bne.n	80065d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	e00f      	b.n	80065f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	440a      	add	r2, r1
 8006606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800660a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800660e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3720      	adds	r7, #32
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	1ff80000 	.word	0x1ff80000

08006620 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	2b01      	cmp	r3, #1
 800663e:	f040 80ce 	bne.w	80067de <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d132      	bne.n	80066b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	0151      	lsls	r1, r2, #5
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	440a      	add	r2, r1
 8006660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006664:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006668:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800666c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	0151      	lsls	r1, r2, #5
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	440a      	add	r2, r1
 8006684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800668c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	0151      	lsls	r1, r2, #5
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	440a      	add	r2, r1
 80066a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a8:	0cdb      	lsrs	r3, r3, #19
 80066aa:	04db      	lsls	r3, r3, #19
 80066ac:	6113      	str	r3, [r2, #16]
 80066ae:	e04e      	b.n	800674e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	0151      	lsls	r1, r2, #5
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	440a      	add	r2, r1
 80066c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ca:	0cdb      	lsrs	r3, r3, #19
 80066cc:	04db      	lsls	r3, r3, #19
 80066ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	0151      	lsls	r1, r2, #5
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	440a      	add	r2, r1
 80066e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	699a      	ldr	r2, [r3, #24]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d903      	bls.n	8006708 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006726:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006734:	691a      	ldr	r2, [r3, #16]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800673e:	6939      	ldr	r1, [r7, #16]
 8006740:	0148      	lsls	r0, r1, #5
 8006742:	6979      	ldr	r1, [r7, #20]
 8006744:	4401      	add	r1, r0
 8006746:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800674a:	4313      	orrs	r3, r2
 800674c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d11e      	bne.n	8006792 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006768:	461a      	mov	r2, r3
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	440a      	add	r2, r1
 8006786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	e097      	b.n	80068c2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 8083 	beq.w	80068c2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	2101      	movs	r1, #1
 80067ce:	fa01 f303 	lsl.w	r3, r1, r3
 80067d2:	6979      	ldr	r1, [r7, #20]
 80067d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067d8:	4313      	orrs	r3, r2
 80067da:	634b      	str	r3, [r1, #52]	; 0x34
 80067dc:	e071      	b.n	80068c2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f8:	0cdb      	lsrs	r3, r3, #19
 80067fa:	04db      	lsls	r3, r3, #19
 80067fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	0151      	lsls	r1, r2, #5
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	440a      	add	r2, r1
 8006814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006818:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800681c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006820:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	4413      	add	r3, r2
 8006842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	0151      	lsls	r1, r2, #5
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	440a      	add	r2, r1
 8006850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006858:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006870:	6939      	ldr	r1, [r7, #16]
 8006872:	0148      	lsls	r0, r1, #5
 8006874:	6979      	ldr	r1, [r7, #20]
 8006876:	4401      	add	r1, r0
 8006878:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800687c:	4313      	orrs	r3, r2
 800687e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006880:	79fb      	ldrb	r3, [r7, #7]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d10d      	bne.n	80068a2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d009      	beq.n	80068a2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	6919      	ldr	r1, [r3, #16]
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689e:	460a      	mov	r2, r1
 80068a0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	0151      	lsls	r1, r2, #5
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	440a      	add	r2, r1
 80068b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	785b      	ldrb	r3, [r3, #1]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d14a      	bne.n	8006984 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006906:	f040 8086 	bne.w	8006a16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	4413      	add	r3, r2
 8006914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	7812      	ldrb	r2, [r2, #0]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	440a      	add	r2, r1
 8006924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006928:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800692c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	7812      	ldrb	r2, [r2, #0]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	440a      	add	r2, r1
 8006948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800694c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006950:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3301      	adds	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f242 7210 	movw	r2, #10000	; 0x2710
 800695e:	4293      	cmp	r3, r2
 8006960:	d902      	bls.n	8006968 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	75fb      	strb	r3, [r7, #23]
          break;
 8006966:	e056      	b.n	8006a16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	4413      	add	r3, r2
 8006972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800697c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006980:	d0e7      	beq.n	8006952 <USB_EPStopXfer+0x82>
 8006982:	e048      	b.n	8006a16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800699c:	d13b      	bne.n	8006a16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	7812      	ldrb	r2, [r2, #0]
 80069b2:	0151      	lsls	r1, r2, #5
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	440a      	add	r2, r1
 80069b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	7812      	ldrb	r2, [r2, #0]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3301      	adds	r3, #1
 80069ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d902      	bls.n	80069fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	75fb      	strb	r3, [r7, #23]
          break;
 80069fa:	e00c      	b.n	8006a16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a14:	d0e7      	beq.n	80069e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b089      	sub	sp, #36	; 0x24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	4611      	mov	r1, r2
 8006a30:	461a      	mov	r2, r3
 8006a32:	460b      	mov	r3, r1
 8006a34:	71fb      	strb	r3, [r7, #7]
 8006a36:	4613      	mov	r3, r2
 8006a38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d123      	bne.n	8006a92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a4a:	88bb      	ldrh	r3, [r7, #4]
 8006a4c:	3303      	adds	r3, #3
 8006a4e:	089b      	lsrs	r3, r3, #2
 8006a50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a52:	2300      	movs	r3, #0
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	e018      	b.n	8006a8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	031a      	lsls	r2, r3, #12
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a64:	461a      	mov	r2, r3
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	3301      	adds	r3, #1
 8006a76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	3301      	adds	r3, #1
 8006a82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	3301      	adds	r3, #1
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d3e2      	bcc.n	8006a58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3724      	adds	r7, #36	; 0x24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b08b      	sub	sp, #44	; 0x2c
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ab6:	88fb      	ldrh	r3, [r7, #6]
 8006ab8:	089b      	lsrs	r3, r3, #2
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006abe:	88fb      	ldrh	r3, [r7, #6]
 8006ac0:	f003 0303 	and.w	r3, r3, #3
 8006ac4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	623b      	str	r3, [r7, #32]
 8006aca:	e014      	b.n	8006af6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	3301      	adds	r3, #1
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	3301      	adds	r3, #1
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	3301      	adds	r3, #1
 8006af4:	623b      	str	r3, [r7, #32]
 8006af6:	6a3a      	ldr	r2, [r7, #32]
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d3e6      	bcc.n	8006acc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006afe:	8bfb      	ldrh	r3, [r7, #30]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d01e      	beq.n	8006b42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f107 0310 	add.w	r3, r7, #16
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	fa22 f303 	lsr.w	r3, r2, r3
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	701a      	strb	r2, [r3, #0]
      i++;
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	3301      	adds	r3, #1
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b36:	8bfb      	ldrh	r3, [r7, #30]
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b3c:	8bfb      	ldrh	r3, [r7, #30]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1ea      	bne.n	8006b18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	372c      	adds	r7, #44	; 0x2c
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	785b      	ldrb	r3, [r3, #1]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d12c      	bne.n	8006bc6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	db12      	blt.n	8006ba4 <USB_EPSetStall+0x54>
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00f      	beq.n	8006ba4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	0151      	lsls	r1, r2, #5
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	440a      	add	r2, r1
 8006b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ba2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	0151      	lsls	r1, r2, #5
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	440a      	add	r2, r1
 8006bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	e02b      	b.n	8006c1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	db12      	blt.n	8006bfe <USB_EPSetStall+0xae>
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00f      	beq.n	8006bfe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	0151      	lsls	r1, r2, #5
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bfc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	0151      	lsls	r1, r2, #5
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	440a      	add	r2, r1
 8006c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d128      	bne.n	8006c9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	0151      	lsls	r1, r2, #5
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	440a      	add	r2, r1
 8006c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	791b      	ldrb	r3, [r3, #4]
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d003      	beq.n	8006c78 <USB_EPClearStall+0x4c>
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	791b      	ldrb	r3, [r3, #4]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d138      	bne.n	8006cea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	0151      	lsls	r1, r2, #5
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	440a      	add	r2, r1
 8006c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	e027      	b.n	8006cea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	0151      	lsls	r1, r2, #5
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	440a      	add	r2, r1
 8006cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	791b      	ldrb	r3, [r3, #4]
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d003      	beq.n	8006cca <USB_EPClearStall+0x9e>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	791b      	ldrb	r3, [r3, #4]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d10f      	bne.n	8006cea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006d2c:	68f9      	ldr	r1, [r7, #12]
 8006d2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d32:	4313      	orrs	r3, r2
 8006d34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d5e:	f023 0303 	bic.w	r3, r3, #3
 8006d62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d72:	f023 0302 	bic.w	r3, r3, #2
 8006d76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b085      	sub	sp, #20
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006da0:	f023 0303 	bic.w	r3, r3, #3
 8006da4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006db4:	f043 0302 	orr.w	r3, r3, #2
 8006db8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006de0:	68fb      	ldr	r3, [r7, #12]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b085      	sub	sp, #20
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	4013      	ands	r3, r2
 8006e10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	0c1b      	lsrs	r3, r3, #16
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b085      	sub	sp, #20
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	4013      	ands	r3, r2
 8006e44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	b29b      	uxth	r3, r3
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b085      	sub	sp, #20
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e66:	78fb      	ldrb	r3, [r7, #3]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	4013      	ands	r3, r2
 8006e82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e84:	68bb      	ldr	r3, [r7, #8]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b087      	sub	sp, #28
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	f003 030f 	and.w	r3, r3, #15
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec2:	01db      	lsls	r3, r3, #7
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ecc:	78fb      	ldrb	r3, [r7, #3]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	4013      	ands	r3, r2
 8006ede:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	371c      	adds	r7, #28
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	f003 0301 	and.w	r3, r3, #1
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b085      	sub	sp, #20
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f28:	f023 0307 	bic.w	r3, r3, #7
 8006f2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	333c      	adds	r3, #60	; 0x3c
 8006f66:	3304      	adds	r3, #4
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	4a26      	ldr	r2, [pc, #152]	; (8007008 <USB_EP0_OutStart+0xb8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d90a      	bls.n	8006f8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f84:	d101      	bne.n	8006f8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	e037      	b.n	8006ffa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f90:	461a      	mov	r2, r3
 8006f92:	2300      	movs	r3, #0
 8006f94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fb8:	f043 0318 	orr.w	r3, r3, #24
 8006fbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fcc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006fd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006fd2:	7afb      	ldrb	r3, [r7, #11]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d10f      	bne.n	8006ff8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fde:	461a      	mov	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ff6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	4f54300a 	.word	0x4f54300a

0800700c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3301      	adds	r3, #1
 800701c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	4a13      	ldr	r2, [pc, #76]	; (8007070 <USB_CoreReset+0x64>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d901      	bls.n	800702a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e01b      	b.n	8007062 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	daf2      	bge.n	8007018 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f043 0201 	orr.w	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4a09      	ldr	r2, [pc, #36]	; (8007070 <USB_CoreReset+0x64>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d901      	bls.n	8007054 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e006      	b.n	8007062 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	2b01      	cmp	r3, #1
 800705e:	d0f0      	beq.n	8007042 <USB_CoreReset+0x36>

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	00030d40 	.word	0x00030d40

08007074 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8007080:	f643 4050 	movw	r0, #15440	; 0x3c50
 8007084:	f002 fbb4 	bl	80097f0 <USBD_static_malloc>
 8007088:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d109      	bne.n	80070a4 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	32b0      	adds	r2, #176	; 0xb0
 800709a:	2100      	movs	r1, #0
 800709c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80070a0:	2302      	movs	r3, #2
 80070a2:	e07e      	b.n	80071a2 <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	32b0      	adds	r2, #176	; 0xb0
 80070ae:	68f9      	ldr	r1, [r7, #12]
 80070b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	32b0      	adds	r2, #176	; 0xb0
 80070be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	7c1b      	ldrb	r3, [r3, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10e      	bne.n	80070ee <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 80070d0:	4b36      	ldr	r3, [pc, #216]	; (80071ac <USBD_AUDIO_Init+0x138>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	f003 020f 	and.w	r2, r3, #15
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	440b      	add	r3, r1
 80070e4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80070e8:	2201      	movs	r2, #1
 80070ea:	801a      	strh	r2, [r3, #0]
 80070ec:	e00d      	b.n	800710a <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 80070ee:	4b2f      	ldr	r3, [pc, #188]	; (80071ac <USBD_AUDIO_Init+0x138>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	f003 020f 	and.w	r2, r3, #15
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	440b      	add	r3, r1
 8007102:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007106:	2201      	movs	r2, #1
 8007108:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800710a:	4b28      	ldr	r3, [pc, #160]	; (80071ac <USBD_AUDIO_Init+0x138>)
 800710c:	7819      	ldrb	r1, [r3, #0]
 800710e:	23c0      	movs	r3, #192	; 0xc0
 8007110:	2201      	movs	r2, #1
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f002 fa49 	bl	80095aa <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8007118:	4b24      	ldr	r3, [pc, #144]	; (80071ac <USBD_AUDIO_Init+0x138>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	f003 020f 	and.w	r2, r3, #15
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007130:	2201      	movs	r2, #1
 8007132:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007140:	2203      	movs	r2, #3
 8007142:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800714c:	2200      	movs	r2, #0
 800714e:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007158:	2200      	movs	r2, #0
 800715a:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	33b0      	adds	r3, #176	; 0xb0
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2200      	movs	r2, #0
 800717e:	2146      	movs	r1, #70	; 0x46
 8007180:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8007184:	4798      	blx	r3
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800718c:	2303      	movs	r3, #3
 800718e:	e008      	b.n	80071a2 <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 8007190:	4b06      	ldr	r3, [pc, #24]	; (80071ac <USBD_AUDIO_Init+0x138>)
 8007192:	7819      	ldrb	r1, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	1d1a      	adds	r2, r3, #4
 8007198:	23c0      	movs	r3, #192	; 0xc0
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f002 faf4 	bl	8009788 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	200000be 	.word	0x200000be

080071b0 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 80071bc:	4b28      	ldr	r3, [pc, #160]	; (8007260 <USBD_AUDIO_DeInit+0xb0>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f002 fa17 	bl	80095f6 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 80071c8:	4b25      	ldr	r3, [pc, #148]	; (8007260 <USBD_AUDIO_DeInit+0xb0>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	f003 020f 	and.w	r2, r3, #15
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	440b      	add	r3, r1
 80071dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071e0:	2200      	movs	r2, #0
 80071e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 80071e4:	4b1e      	ldr	r3, [pc, #120]	; (8007260 <USBD_AUDIO_DeInit+0xb0>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	f003 020f 	and.w	r2, r3, #15
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	440b      	add	r3, r1
 80071f8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80071fc:	2200      	movs	r2, #0
 80071fe:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	32b0      	adds	r2, #176	; 0xb0
 800720a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d020      	beq.n	8007254 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	33b0      	adds	r3, #176	; 0xb0
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2000      	movs	r0, #0
 8007226:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	32b0      	adds	r2, #176	; 0xb0
 8007232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007236:	4618      	mov	r0, r3
 8007238:	f002 fae8 	bl	800980c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	32b0      	adds	r2, #176	; 0xb0
 8007246:	2100      	movs	r1, #0
 8007248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	200000be 	.word	0x200000be

08007264 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	32b0      	adds	r2, #176	; 0xb0
 8007280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007284:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800728c:	2303      	movs	r3, #3
 800728e:	e0c1      	b.n	8007414 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01a      	beq.n	80072d2 <USBD_AUDIO_Setup+0x6e>
 800729c:	2b20      	cmp	r3, #32
 800729e:	f040 80b1 	bne.w	8007404 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	785b      	ldrb	r3, [r3, #1]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d006      	beq.n	80072b8 <USBD_AUDIO_Setup+0x54>
 80072aa:	2b81      	cmp	r3, #129	; 0x81
 80072ac:	d109      	bne.n	80072c2 <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa91 	bl	80077d8 <AUDIO_REQ_GetCurrent>
          break;
 80072b6:	e00b      	b.n	80072d0 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fab8 	bl	8007830 <AUDIO_REQ_SetCurrent>
          break;
 80072c0:	e006      	b.n	80072d0 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 fd1c 	bl	8008d02 <USBD_CtlError>
          ret = USBD_FAIL;
 80072ca:	2303      	movs	r3, #3
 80072cc:	75fb      	strb	r3, [r7, #23]
          break;
 80072ce:	bf00      	nop
      }
      break;
 80072d0:	e09f      	b.n	8007412 <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	785b      	ldrb	r3, [r3, #1]
 80072d6:	2b0b      	cmp	r3, #11
 80072d8:	f200 8089 	bhi.w	80073ee <USBD_AUDIO_Setup+0x18a>
 80072dc:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <USBD_AUDIO_Setup+0x80>)
 80072de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e2:	bf00      	nop
 80072e4:	08007315 	.word	0x08007315
 80072e8:	080073fd 	.word	0x080073fd
 80072ec:	080073ef 	.word	0x080073ef
 80072f0:	080073ef 	.word	0x080073ef
 80072f4:	080073ef 	.word	0x080073ef
 80072f8:	080073ef 	.word	0x080073ef
 80072fc:	0800733f 	.word	0x0800733f
 8007300:	080073ef 	.word	0x080073ef
 8007304:	080073ef 	.word	0x080073ef
 8007308:	080073ef 	.word	0x080073ef
 800730c:	08007387 	.word	0x08007387
 8007310:	080073af 	.word	0x080073af
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b03      	cmp	r3, #3
 800731e:	d107      	bne.n	8007330 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007320:	f107 0308 	add.w	r3, r7, #8
 8007324:	2202      	movs	r2, #2
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 fd5b 	bl	8008de4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800732e:	e068      	b.n	8007402 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 fce5 	bl	8008d02 <USBD_CtlError>
            ret = USBD_FAIL;
 8007338:	2303      	movs	r3, #3
 800733a:	75fb      	strb	r3, [r7, #23]
          break;
 800733c:	e061      	b.n	8007402 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	885b      	ldrh	r3, [r3, #2]
 8007342:	0a1b      	lsrs	r3, r3, #8
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b21      	cmp	r3, #33	; 0x21
 8007348:	d15a      	bne.n	8007400 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8007350:	4618      	mov	r0, r3
 8007352:	f000 fadb 	bl	800790c <USBD_AUDIO_GetAudioHeaderDesc>
 8007356:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00c      	beq.n	8007378 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	88db      	ldrh	r3, [r3, #6]
 8007362:	2b09      	cmp	r3, #9
 8007364:	bf28      	it	cs
 8007366:	2309      	movcs	r3, #9
 8007368:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800736a:	897b      	ldrh	r3, [r7, #10]
 800736c:	461a      	mov	r2, r3
 800736e:	68f9      	ldr	r1, [r7, #12]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 fd37 	bl	8008de4 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8007376:	e043      	b.n	8007400 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f001 fcc1 	bl	8008d02 <USBD_CtlError>
              ret = USBD_FAIL;
 8007380:	2303      	movs	r3, #3
 8007382:	75fb      	strb	r3, [r7, #23]
          break;
 8007384:	e03c      	b.n	8007400 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b03      	cmp	r3, #3
 8007390:	d106      	bne.n	80073a0 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	2201      	movs	r2, #1
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 fd23 	bl	8008de4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800739e:	e030      	b.n	8007402 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 fcad 	bl	8008d02 <USBD_CtlError>
            ret = USBD_FAIL;
 80073a8:	2303      	movs	r3, #3
 80073aa:	75fb      	strb	r3, [r7, #23]
          break;
 80073ac:	e029      	b.n	8007402 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d112      	bne.n	80073e0 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	885b      	ldrh	r3, [r3, #2]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d806      	bhi.n	80073d2 <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	885b      	ldrh	r3, [r3, #2]
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073d0:	e017      	b.n	8007402 <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 fc94 	bl	8008d02 <USBD_CtlError>
              ret = USBD_FAIL;
 80073da:	2303      	movs	r3, #3
 80073dc:	75fb      	strb	r3, [r7, #23]
          break;
 80073de:	e010      	b.n	8007402 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fc8d 	bl	8008d02 <USBD_CtlError>
            ret = USBD_FAIL;
 80073e8:	2303      	movs	r3, #3
 80073ea:	75fb      	strb	r3, [r7, #23]
          break;
 80073ec:	e009      	b.n	8007402 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 fc86 	bl	8008d02 <USBD_CtlError>
          ret = USBD_FAIL;
 80073f6:	2303      	movs	r3, #3
 80073f8:	75fb      	strb	r3, [r7, #23]
          break;
 80073fa:	e002      	b.n	8007402 <USBD_AUDIO_Setup+0x19e>
          break;
 80073fc:	bf00      	nop
 80073fe:	e008      	b.n	8007412 <USBD_AUDIO_Setup+0x1ae>
          break;
 8007400:	bf00      	nop
      }
      break;
 8007402:	e006      	b.n	8007412 <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f001 fc7b 	bl	8008d02 <USBD_CtlError>
      ret = USBD_FAIL;
 800740c:	2303      	movs	r3, #3
 800740e:	75fb      	strb	r3, [r7, #23]
      break;
 8007410:	bf00      	nop
  }

  return (uint8_t)ret;
 8007412:	7dfb      	ldrb	r3, [r7, #23]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	226d      	movs	r2, #109	; 0x6d
 8007428:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800742a:	4b03      	ldr	r3, [pc, #12]	; (8007438 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	20000044 	.word	0x20000044

0800743c <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	32b0      	adds	r2, #176	; 0xb0
 8007468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007474:	2303      	movs	r3, #3
 8007476:	e02a      	b.n	80074ce <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800747e:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 8007482:	2b01      	cmp	r3, #1
 8007484:	d122      	bne.n	80074cc <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800748c:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 8007490:	2b02      	cmp	r3, #2
 8007492:	d11b      	bne.n	80074cc <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	33b0      	adds	r3, #176	; 0xb0
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80074ac:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 80074b0:	4610      	mov	r0, r2
 80074b2:	4798      	blx	r3
      haudio->control.cmd = 0U;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <USBD_AUDIO_Sync>:
  * @param  pdev: device instance
  * @param  offset: audio offset
  * @retval status
  */
void USBD_AUDIO_Sync(USBD_HandleTypeDef *pdev, AUDIO_OffsetTypeDef offset)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	460b      	mov	r3, r1
 800750c:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;
 800750e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8007512:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	32b0      	adds	r2, #176	; 0xb0
 800751e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80a3 	beq.w	800766e <USBD_AUDIO_Sync+0x16c>
  {
    return;
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	32b0      	adds	r2, #176	; 0xb0
 8007532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007536:	60bb      	str	r3, [r7, #8]

  haudio->offset = offset;
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800753e:	461a      	mov	r2, r3
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	f882 3c04 	strb.w	r3, [r2, #3076]	; 0xc04

  if (haudio->rd_enable == 1U)
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800754c:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 8007550:	2b01      	cmp	r3, #1
 8007552:	d11b      	bne.n	800758c <USBD_AUDIO_Sync+0x8a>
  {
    haudio->rd_ptr += (uint16_t)BufferSize;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800755a:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	b29b      	uxth	r3, r3
 8007562:	4413      	add	r3, r2
 8007564:	b29a      	uxth	r2, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800756c:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06

    if (haudio->rd_ptr == AUDIO_TOTAL_BUF_SIZE)
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007576:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800757a:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800757e:	d105      	bne.n	800758c <USBD_AUDIO_Sync+0x8a>
    {
      /* roll back */
      haudio->rd_ptr = 0U;
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007586:	2200      	movs	r2, #0
 8007588:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
    }
  }

  if (haudio->rd_ptr > haudio->wr_ptr)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007592:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800759c:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d924      	bls.n	80075ee <USBD_AUDIO_Sync+0xec>
  {
    if ((haudio->rd_ptr - haudio->wr_ptr) < AUDIO_OUT_PACKET)
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075aa:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 80075ae:	461a      	mov	r2, r3
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075b6:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2bbf      	cmp	r3, #191	; 0xbf
 80075be:	dc03      	bgt.n	80075c8 <USBD_AUDIO_Sync+0xc6>
    {
      BufferSize += 4U;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3304      	adds	r3, #4
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	e036      	b.n	8007636 <USBD_AUDIO_Sync+0x134>
    }
    else
    {
      if ((haudio->rd_ptr - haudio->wr_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075ce:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 80075d2:	461a      	mov	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075da:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 80075e4:	dd27      	ble.n	8007636 <USBD_AUDIO_Sync+0x134>
      {
        BufferSize -= 4U;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3b04      	subs	r3, #4
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	e023      	b.n	8007636 <USBD_AUDIO_Sync+0x134>
      }
    }
  }
  else
  {
    if ((haudio->wr_ptr - haudio->rd_ptr) < AUDIO_OUT_PACKET)
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075f4:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80075f8:	461a      	mov	r2, r3
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007600:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2bbf      	cmp	r3, #191	; 0xbf
 8007608:	dc03      	bgt.n	8007612 <USBD_AUDIO_Sync+0x110>
    {
      BufferSize -= 4U;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3b04      	subs	r3, #4
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	e011      	b.n	8007636 <USBD_AUDIO_Sync+0x134>
    }
    else
    {
      if ((haudio->wr_ptr - haudio->rd_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007618:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800761c:	461a      	mov	r2, r3
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007624:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 800762e:	dd02      	ble.n	8007636 <USBD_AUDIO_Sync+0x134>
      {
        BufferSize += 4U;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3304      	adds	r3, #4
 8007634:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  if (haudio->offset == AUDIO_OFFSET_FULL)
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800763c:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 8007640:	2b02      	cmp	r3, #2
 8007642:	d115      	bne.n	8007670 <USBD_AUDIO_Sync+0x16e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	33b0      	adds	r3, #176	; 0xb0
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	1d10      	adds	r0, r2, #4
 800765a:	2202      	movs	r2, #2
 800765c:	68f9      	ldr	r1, [r7, #12]
 800765e:	4798      	blx	r3
                                                                        BufferSize, AUDIO_CMD_PLAY);
    haudio->offset = AUDIO_OFFSET_NONE;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
 800766c:	e000      	b.n	8007670 <USBD_AUDIO_Sync+0x16e>
    return;
 800766e:	bf00      	nop
  }
}
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	460b      	mov	r3, r1
 8007680:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
	...

080076ac <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	32b0      	adds	r2, #176	; 0xb0
 80076c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c6:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e07c      	b.n	80077cc <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 80076d2:	4b40      	ldr	r3, [pc, #256]	; (80077d4 <USBD_AUDIO_DataOut+0x128>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	78fa      	ldrb	r2, [r7, #3]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d176      	bne.n	80077ca <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f002 f872 	bl	80097ca <USBD_LL_GetRxDataSize>
 80076e6:	4603      	mov	r3, r0
 80076e8:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	33b0      	adds	r3, #176	; 0xb0
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8007702:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 8007706:	4611      	mov	r1, r2
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	440a      	add	r2, r1
 800770c:	1d10      	adds	r0, r2, #4
 800770e:	8979      	ldrh	r1, [r7, #10]
 8007710:	2201      	movs	r2, #1
 8007712:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800771a:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 800771e:	897b      	ldrh	r3, [r7, #10]
 8007720:	4413      	add	r3, r2
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800772a:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007734:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8007738:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800773c:	d121      	bne.n	8007782 <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007744:	2200      	movs	r2, #0
 8007746:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007750:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 8007754:	2b03      	cmp	r3, #3
 8007756:	d114      	bne.n	8007782 <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	33b0      	adds	r3, #176	; 0xb0
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	1d10      	adds	r0, r2, #4
 800776e:	2201      	movs	r2, #1
 8007770:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8007774:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007788:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10d      	bne.n	80077ac <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007796:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800779a:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800779e:	d105      	bne.n	80077ac <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 80077ac:	4b09      	ldr	r3, [pc, #36]	; (80077d4 <USBD_AUDIO_DataOut+0x128>)
 80077ae:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80077b6:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80077ba:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4413      	add	r3, r2
 80077c0:	1d1a      	adds	r2, r3, #4
 80077c2:	23c0      	movs	r3, #192	; 0xc0
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 ffdf 	bl	8009788 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	200000be 	.word	0x200000be

080077d8 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	32b0      	adds	r2, #176	; 0xb0
 80077ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f0:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d017      	beq.n	8007828 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80077fe:	330b      	adds	r3, #11
 8007800:	2240      	movs	r2, #64	; 0x40
 8007802:	2100      	movs	r1, #0
 8007804:	4618      	mov	r0, r3
 8007806:	f002 f85b 	bl	80098c0 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007810:	330b      	adds	r3, #11
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	88d2      	ldrh	r2, [r2, #6]
 8007816:	2a40      	cmp	r2, #64	; 0x40
 8007818:	bf28      	it	cs
 800781a:	2240      	movcs	r2, #64	; 0x40
 800781c:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f001 fadf 	bl	8008de4 <USBD_CtlSendData>
 8007826:	e000      	b.n	800782a <AUDIO_REQ_GetCurrent+0x52>
    return;
 8007828:	bf00      	nop
}
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	32b0      	adds	r2, #176	; 0xb0
 8007844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007848:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d02f      	beq.n	80078b0 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	88db      	ldrh	r3, [r3, #6]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d02c      	beq.n	80078b2 <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	88db      	ldrh	r3, [r3, #6]
 8007868:	2b3f      	cmp	r3, #63	; 0x3f
 800786a:	d803      	bhi.n	8007874 <AUDIO_REQ_SetCurrent+0x44>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	88db      	ldrh	r3, [r3, #6]
 8007870:	b2da      	uxtb	r2, r3
 8007872:	e000      	b.n	8007876 <AUDIO_REQ_SetCurrent+0x46>
 8007874:	2240      	movs	r2, #64	; 0x40
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800787c:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	889b      	ldrh	r3, [r3, #4]
 8007884:	0a1b      	lsrs	r3, r3, #8
 8007886:	b29b      	uxth	r3, r3
 8007888:	b2da      	uxtb	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007890:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800789a:	330b      	adds	r3, #11
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80078a2:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 fac7 	bl	8008e3c <USBD_CtlPrepareRx>
 80078ae:	e000      	b.n	80078b2 <AUDIO_REQ_SetCurrent+0x82>
    return;
 80078b0:	bf00      	nop
  }
}
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	220a      	movs	r2, #10
 80078c4:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 80078c6:	4b03      	ldr	r3, [pc, #12]	; (80078d4 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	200000b4 	.word	0x200000b4

080078d8 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e009      	b.n	8007900 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	33b0      	adds	r3, #176	; 0xb0
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 800791c:	2300      	movs	r3, #0
 800791e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	885b      	ldrh	r3, [r3, #2]
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	429a      	cmp	r2, r3
 800792e:	d91c      	bls.n	800796a <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	b29b      	uxth	r3, r3
 8007936:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007938:	e011      	b.n	800795e <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800793a:	f107 030a 	add.w	r3, r7, #10
 800793e:	4619      	mov	r1, r3
 8007940:	6978      	ldr	r0, [r7, #20]
 8007942:	f000 fbe0 	bl	8008106 <USBD_GetNextDesc>
 8007946:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	785b      	ldrb	r3, [r3, #1]
 800794c:	2b24      	cmp	r3, #36	; 0x24
 800794e:	d106      	bne.n	800795e <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8007954:	2b01      	cmp	r3, #1
 8007956:	d102      	bne.n	800795e <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	613b      	str	r3, [r7, #16]
        break;
 800795c:	e005      	b.n	800796a <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	885b      	ldrh	r3, [r3, #2]
 8007962:	b29a      	uxth	r2, r3
 8007964:	897b      	ldrh	r3, [r7, #10]
 8007966:	429a      	cmp	r2, r3
 8007968:	d8e7      	bhi.n	800793a <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 800796a:	693b      	ldr	r3, [r7, #16]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	4613      	mov	r3, r2
 8007980:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007988:	2303      	movs	r3, #3
 800798a:	e01f      	b.n	80079cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	79fa      	ldrb	r2, [r7, #7]
 80079be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f001 fd8b 	bl	80094dc <USBD_LL_Init>
 80079c6:	4603      	mov	r3, r0
 80079c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80079ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3718      	adds	r7, #24
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e025      	b.n	8007a38 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	32ae      	adds	r2, #174	; 0xae
 80079fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00f      	beq.n	8007a28 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	32ae      	adds	r2, #174	; 0xae
 8007a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	f107 020e 	add.w	r2, r7, #14
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	4798      	blx	r3
 8007a20:	4602      	mov	r2, r0
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 fd93 	bl	8009574 <USBD_LL_Start>
 8007a4e:	4603      	mov	r3, r0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a60:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	460b      	mov	r3, r1
 8007a78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d009      	beq.n	8007a9c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	78fa      	ldrb	r2, [r7, #3]
 8007a92:	4611      	mov	r1, r2
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	78fa      	ldrb	r2, [r7, #3]
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	4798      	blx	r3
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007acc:	2303      	movs	r3, #3
 8007ace:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 f8ce 	bl	8008c8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007b00:	461a      	mov	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b0e:	f003 031f 	and.w	r3, r3, #31
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d01a      	beq.n	8007b4c <USBD_LL_SetupStage+0x72>
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d822      	bhi.n	8007b60 <USBD_LL_SetupStage+0x86>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <USBD_LL_SetupStage+0x4a>
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d00a      	beq.n	8007b38 <USBD_LL_SetupStage+0x5e>
 8007b22:	e01d      	b.n	8007b60 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fb25 	bl	800817c <USBD_StdDevReq>
 8007b32:	4603      	mov	r3, r0
 8007b34:	73fb      	strb	r3, [r7, #15]
      break;
 8007b36:	e020      	b.n	8007b7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fb8d 	bl	8008260 <USBD_StdItfReq>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73fb      	strb	r3, [r7, #15]
      break;
 8007b4a:	e016      	b.n	8007b7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fbef 	bl	8008338 <USBD_StdEPReq>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b5e:	e00c      	b.n	8007b7a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f001 fd60 	bl	8009634 <USBD_LL_StallEP>
 8007b74:	4603      	mov	r3, r0
 8007b76:	73fb      	strb	r3, [r7, #15]
      break;
 8007b78:	bf00      	nop
  }

  return ret;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007b96:	7afb      	ldrb	r3, [r7, #11]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d16e      	bne.n	8007c7a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ba2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	f040 8098 	bne.w	8007ce0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d913      	bls.n	8007be4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	1ad2      	subs	r2, r2, r3
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	bf28      	it	cs
 8007bd6:	4613      	movcs	r3, r2
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f001 f94a 	bl	8008e76 <USBD_CtlContinueRx>
 8007be2:	e07d      	b.n	8007ce0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bea:	f003 031f 	and.w	r3, r3, #31
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d014      	beq.n	8007c1c <USBD_LL_DataOutStage+0x98>
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d81d      	bhi.n	8007c32 <USBD_LL_DataOutStage+0xae>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <USBD_LL_DataOutStage+0x7c>
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d003      	beq.n	8007c06 <USBD_LL_DataOutStage+0x82>
 8007bfe:	e018      	b.n	8007c32 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	75bb      	strb	r3, [r7, #22]
            break;
 8007c04:	e018      	b.n	8007c38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	4619      	mov	r1, r3
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 fa5e 	bl	80080d2 <USBD_CoreFindIF>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75bb      	strb	r3, [r7, #22]
            break;
 8007c1a:	e00d      	b.n	8007c38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	4619      	mov	r1, r3
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 fa60 	bl	80080ec <USBD_CoreFindEP>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	75bb      	strb	r3, [r7, #22]
            break;
 8007c30:	e002      	b.n	8007c38 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	75bb      	strb	r3, [r7, #22]
            break;
 8007c36:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007c38:	7dbb      	ldrb	r3, [r7, #22]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d119      	bne.n	8007c72 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d113      	bne.n	8007c72 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007c4a:	7dba      	ldrb	r2, [r7, #22]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	32ae      	adds	r2, #174	; 0xae
 8007c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00b      	beq.n	8007c72 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007c5a:	7dba      	ldrb	r2, [r7, #22]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007c62:	7dba      	ldrb	r2, [r7, #22]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	32ae      	adds	r2, #174	; 0xae
 8007c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f001 f910 	bl	8008e98 <USBD_CtlSendStatus>
 8007c78:	e032      	b.n	8007ce0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007c7a:	7afb      	ldrb	r3, [r7, #11]
 8007c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	4619      	mov	r1, r3
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 fa31 	bl	80080ec <USBD_CoreFindEP>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c8e:	7dbb      	ldrb	r3, [r7, #22]
 8007c90:	2bff      	cmp	r3, #255	; 0xff
 8007c92:	d025      	beq.n	8007ce0 <USBD_LL_DataOutStage+0x15c>
 8007c94:	7dbb      	ldrb	r3, [r7, #22]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d122      	bne.n	8007ce0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d117      	bne.n	8007cd6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007ca6:	7dba      	ldrb	r2, [r7, #22]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	32ae      	adds	r2, #174	; 0xae
 8007cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00f      	beq.n	8007cd6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007cb6:	7dba      	ldrb	r2, [r7, #22]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007cbe:	7dba      	ldrb	r2, [r7, #22]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	32ae      	adds	r2, #174	; 0xae
 8007cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	7afa      	ldrb	r2, [r7, #11]
 8007ccc:	4611      	mov	r1, r2
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	4798      	blx	r3
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d001      	beq.n	8007ce0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
 8007cde:	e000      	b.n	8007ce2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b086      	sub	sp, #24
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	607a      	str	r2, [r7, #4]
 8007cf6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007cf8:	7afb      	ldrb	r3, [r7, #11]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d16f      	bne.n	8007dde <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3314      	adds	r3, #20
 8007d02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d15a      	bne.n	8007dc4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d914      	bls.n	8007d44 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	689a      	ldr	r2, [r3, #8]
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	1ad2      	subs	r2, r2, r3
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f001 f872 	bl	8008e1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d36:	2300      	movs	r3, #0
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f001 fd23 	bl	8009788 <USBD_LL_PrepareReceive>
 8007d42:	e03f      	b.n	8007dc4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d11c      	bne.n	8007d8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d316      	bcc.n	8007d8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d20f      	bcs.n	8007d8a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f001 f853 	bl	8008e1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2100      	movs	r1, #0
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f001 fd00 	bl	8009788 <USBD_LL_PrepareReceive>
 8007d88:	e01c      	b.n	8007dc4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d10f      	bne.n	8007db6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007db6:	2180      	movs	r1, #128	; 0x80
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f001 fc3b 	bl	8009634 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f001 f87d 	bl	8008ebe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d03a      	beq.n	8007e44 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f7ff fe42 	bl	8007a58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ddc:	e032      	b.n	8007e44 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007dde:	7afb      	ldrb	r3, [r7, #11]
 8007de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	4619      	mov	r1, r3
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 f97f 	bl	80080ec <USBD_CoreFindEP>
 8007dee:	4603      	mov	r3, r0
 8007df0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	2bff      	cmp	r3, #255	; 0xff
 8007df6:	d025      	beq.n	8007e44 <USBD_LL_DataInStage+0x15a>
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d122      	bne.n	8007e44 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d11c      	bne.n	8007e44 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007e0a:	7dfa      	ldrb	r2, [r7, #23]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	32ae      	adds	r2, #174	; 0xae
 8007e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d014      	beq.n	8007e44 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007e1a:	7dfa      	ldrb	r2, [r7, #23]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007e22:	7dfa      	ldrb	r2, [r7, #23]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	32ae      	adds	r2, #174	; 0xae
 8007e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	7afa      	ldrb	r2, [r7, #11]
 8007e30:	4611      	mov	r1, r2
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	4798      	blx	r3
 8007e36:	4603      	mov	r3, r0
 8007e38:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007e3a:	7dbb      	ldrb	r3, [r7, #22]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007e40:	7dbb      	ldrb	r3, [r7, #22]
 8007e42:	e000      	b.n	8007e46 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d014      	beq.n	8007eb4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00e      	beq.n	8007eb4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6852      	ldr	r2, [r2, #4]
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	4798      	blx	r3
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007eb4:	2340      	movs	r3, #64	; 0x40
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2100      	movs	r1, #0
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f001 fb75 	bl	80095aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2240      	movs	r2, #64	; 0x40
 8007ecc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ed0:	2340      	movs	r3, #64	; 0x40
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2180      	movs	r1, #128	; 0x80
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 fb67 	bl	80095aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2240      	movs	r2, #64	; 0x40
 8007ee6:	621a      	str	r2, [r3, #32]

  return ret;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	78fa      	ldrb	r2, [r7, #3]
 8007f02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b083      	sub	sp, #12
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2204      	movs	r2, #4
 8007f2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d106      	bne.n	8007f60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b082      	sub	sp, #8
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d110      	bne.n	8007fa4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00b      	beq.n	8007fa4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	32ae      	adds	r2, #174	; 0xae
 8007fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e01c      	b.n	800800a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d115      	bne.n	8008008 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	32ae      	adds	r2, #174	; 0xae
 8007fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fea:	6a1b      	ldr	r3, [r3, #32]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00b      	beq.n	8008008 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	32ae      	adds	r2, #174	; 0xae
 8007ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	78fa      	ldrb	r2, [r7, #3]
 8008002:	4611      	mov	r1, r2
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	460b      	mov	r3, r1
 800801c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	32ae      	adds	r2, #174	; 0xae
 8008028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008030:	2303      	movs	r3, #3
 8008032:	e01c      	b.n	800806e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b03      	cmp	r3, #3
 800803e:	d115      	bne.n	800806c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	32ae      	adds	r2, #174	; 0xae
 800804a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00b      	beq.n	800806c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	32ae      	adds	r2, #174	; 0xae
 800805e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	78fa      	ldrb	r2, [r7, #3]
 8008066:	4611      	mov	r1, r2
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00e      	beq.n	80080c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	6852      	ldr	r2, [r2, #4]
 80080b6:	b2d2      	uxtb	r2, r2
 80080b8:	4611      	mov	r1, r2
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	4798      	blx	r3
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80080c4:	2303      	movs	r3, #3
 80080c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	460b      	mov	r3, r1
 80080dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	460b      	mov	r3, r1
 80080f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008106:	b480      	push	{r7}
 8008108:	b085      	sub	sp, #20
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	881a      	ldrh	r2, [r3, #0]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	4413      	add	r3, r2
 8008120:	b29a      	uxth	r2, r3
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4413      	add	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008132:	68fb      	ldr	r3, [r7, #12]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	3301      	adds	r3, #1
 8008156:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800815e:	8a3b      	ldrh	r3, [r7, #16]
 8008160:	021b      	lsls	r3, r3, #8
 8008162:	b21a      	sxth	r2, r3
 8008164:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008168:	4313      	orrs	r3, r2
 800816a:	b21b      	sxth	r3, r3
 800816c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800816e:	89fb      	ldrh	r3, [r7, #14]
}
 8008170:	4618      	mov	r0, r3
 8008172:	371c      	adds	r7, #28
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008192:	2b40      	cmp	r3, #64	; 0x40
 8008194:	d005      	beq.n	80081a2 <USBD_StdDevReq+0x26>
 8008196:	2b40      	cmp	r3, #64	; 0x40
 8008198:	d857      	bhi.n	800824a <USBD_StdDevReq+0xce>
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00f      	beq.n	80081be <USBD_StdDevReq+0x42>
 800819e:	2b20      	cmp	r3, #32
 80081a0:	d153      	bne.n	800824a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	32ae      	adds	r2, #174	; 0xae
 80081ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	4798      	blx	r3
 80081b8:	4603      	mov	r3, r0
 80081ba:	73fb      	strb	r3, [r7, #15]
      break;
 80081bc:	e04a      	b.n	8008254 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	2b09      	cmp	r3, #9
 80081c4:	d83b      	bhi.n	800823e <USBD_StdDevReq+0xc2>
 80081c6:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <USBD_StdDevReq+0x50>)
 80081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081cc:	08008221 	.word	0x08008221
 80081d0:	08008235 	.word	0x08008235
 80081d4:	0800823f 	.word	0x0800823f
 80081d8:	0800822b 	.word	0x0800822b
 80081dc:	0800823f 	.word	0x0800823f
 80081e0:	080081ff 	.word	0x080081ff
 80081e4:	080081f5 	.word	0x080081f5
 80081e8:	0800823f 	.word	0x0800823f
 80081ec:	08008217 	.word	0x08008217
 80081f0:	08008209 	.word	0x08008209
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fa3c 	bl	8008674 <USBD_GetDescriptor>
          break;
 80081fc:	e024      	b.n	8008248 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fba1 	bl	8008948 <USBD_SetAddress>
          break;
 8008206:	e01f      	b.n	8008248 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fbe0 	bl	80089d0 <USBD_SetConfig>
 8008210:	4603      	mov	r3, r0
 8008212:	73fb      	strb	r3, [r7, #15]
          break;
 8008214:	e018      	b.n	8008248 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fc83 	bl	8008b24 <USBD_GetConfig>
          break;
 800821e:	e013      	b.n	8008248 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008220:	6839      	ldr	r1, [r7, #0]
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fcb4 	bl	8008b90 <USBD_GetStatus>
          break;
 8008228:	e00e      	b.n	8008248 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800822a:	6839      	ldr	r1, [r7, #0]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fce3 	bl	8008bf8 <USBD_SetFeature>
          break;
 8008232:	e009      	b.n	8008248 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fd07 	bl	8008c4a <USBD_ClrFeature>
          break;
 800823c:	e004      	b.n	8008248 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fd5e 	bl	8008d02 <USBD_CtlError>
          break;
 8008246:	bf00      	nop
      }
      break;
 8008248:	e004      	b.n	8008254 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fd58 	bl	8008d02 <USBD_CtlError>
      break;
 8008252:	bf00      	nop
  }

  return ret;
 8008254:	7bfb      	ldrb	r3, [r7, #15]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop

08008260 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008276:	2b40      	cmp	r3, #64	; 0x40
 8008278:	d005      	beq.n	8008286 <USBD_StdItfReq+0x26>
 800827a:	2b40      	cmp	r3, #64	; 0x40
 800827c:	d852      	bhi.n	8008324 <USBD_StdItfReq+0xc4>
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <USBD_StdItfReq+0x26>
 8008282:	2b20      	cmp	r3, #32
 8008284:	d14e      	bne.n	8008324 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828c:	b2db      	uxtb	r3, r3
 800828e:	3b01      	subs	r3, #1
 8008290:	2b02      	cmp	r3, #2
 8008292:	d840      	bhi.n	8008316 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	889b      	ldrh	r3, [r3, #4]
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b02      	cmp	r3, #2
 800829c:	d836      	bhi.n	800830c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	889b      	ldrh	r3, [r3, #4]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff ff13 	bl	80080d2 <USBD_CoreFindIF>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	2bff      	cmp	r3, #255	; 0xff
 80082b4:	d01d      	beq.n	80082f2 <USBD_StdItfReq+0x92>
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d11a      	bne.n	80082f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80082bc:	7bba      	ldrb	r2, [r7, #14]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	32ae      	adds	r2, #174	; 0xae
 80082c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00f      	beq.n	80082ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80082cc:	7bba      	ldrb	r2, [r7, #14]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082d4:	7bba      	ldrb	r2, [r7, #14]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	32ae      	adds	r2, #174	; 0xae
 80082da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	4798      	blx	r3
 80082e6:	4603      	mov	r3, r0
 80082e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80082ea:	e004      	b.n	80082f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80082ec:	2303      	movs	r3, #3
 80082ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80082f0:	e001      	b.n	80082f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80082f2:	2303      	movs	r3, #3
 80082f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	88db      	ldrh	r3, [r3, #6]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d110      	bne.n	8008320 <USBD_StdItfReq+0xc0>
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10d      	bne.n	8008320 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fdc7 	bl	8008e98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800830a:	e009      	b.n	8008320 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fcf7 	bl	8008d02 <USBD_CtlError>
          break;
 8008314:	e004      	b.n	8008320 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fcf2 	bl	8008d02 <USBD_CtlError>
          break;
 800831e:	e000      	b.n	8008322 <USBD_StdItfReq+0xc2>
          break;
 8008320:	bf00      	nop
      }
      break;
 8008322:	e004      	b.n	800832e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fceb 	bl	8008d02 <USBD_CtlError>
      break;
 800832c:	bf00      	nop
  }

  return ret;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	889b      	ldrh	r3, [r3, #4]
 800834a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008354:	2b40      	cmp	r3, #64	; 0x40
 8008356:	d007      	beq.n	8008368 <USBD_StdEPReq+0x30>
 8008358:	2b40      	cmp	r3, #64	; 0x40
 800835a:	f200 817f 	bhi.w	800865c <USBD_StdEPReq+0x324>
 800835e:	2b00      	cmp	r3, #0
 8008360:	d02a      	beq.n	80083b8 <USBD_StdEPReq+0x80>
 8008362:	2b20      	cmp	r3, #32
 8008364:	f040 817a 	bne.w	800865c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7ff febd 	bl	80080ec <USBD_CoreFindEP>
 8008372:	4603      	mov	r3, r0
 8008374:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008376:	7b7b      	ldrb	r3, [r7, #13]
 8008378:	2bff      	cmp	r3, #255	; 0xff
 800837a:	f000 8174 	beq.w	8008666 <USBD_StdEPReq+0x32e>
 800837e:	7b7b      	ldrb	r3, [r7, #13]
 8008380:	2b00      	cmp	r3, #0
 8008382:	f040 8170 	bne.w	8008666 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008386:	7b7a      	ldrb	r2, [r7, #13]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800838e:	7b7a      	ldrb	r2, [r7, #13]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	32ae      	adds	r2, #174	; 0xae
 8008394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 8163 	beq.w	8008666 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80083a0:	7b7a      	ldrb	r2, [r7, #13]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	32ae      	adds	r2, #174	; 0xae
 80083a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	4798      	blx	r3
 80083b2:	4603      	mov	r3, r0
 80083b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80083b6:	e156      	b.n	8008666 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	785b      	ldrb	r3, [r3, #1]
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d008      	beq.n	80083d2 <USBD_StdEPReq+0x9a>
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	f300 8145 	bgt.w	8008650 <USBD_StdEPReq+0x318>
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 809b 	beq.w	8008502 <USBD_StdEPReq+0x1ca>
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d03c      	beq.n	800844a <USBD_StdEPReq+0x112>
 80083d0:	e13e      	b.n	8008650 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d002      	beq.n	80083e4 <USBD_StdEPReq+0xac>
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d016      	beq.n	8008410 <USBD_StdEPReq+0xd8>
 80083e2:	e02c      	b.n	800843e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00d      	beq.n	8008406 <USBD_StdEPReq+0xce>
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	2b80      	cmp	r3, #128	; 0x80
 80083ee:	d00a      	beq.n	8008406 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f001 f91d 	bl	8009634 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083fa:	2180      	movs	r1, #128	; 0x80
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 f919 	bl	8009634 <USBD_LL_StallEP>
 8008402:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008404:	e020      	b.n	8008448 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fc7a 	bl	8008d02 <USBD_CtlError>
              break;
 800840e:	e01b      	b.n	8008448 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	885b      	ldrh	r3, [r3, #2]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10e      	bne.n	8008436 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00b      	beq.n	8008436 <USBD_StdEPReq+0xfe>
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	2b80      	cmp	r3, #128	; 0x80
 8008422:	d008      	beq.n	8008436 <USBD_StdEPReq+0xfe>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	88db      	ldrh	r3, [r3, #6]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d104      	bne.n	8008436 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f001 f8ff 	bl	8009634 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fd2e 	bl	8008e98 <USBD_CtlSendStatus>

              break;
 800843c:	e004      	b.n	8008448 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fc5e 	bl	8008d02 <USBD_CtlError>
              break;
 8008446:	bf00      	nop
          }
          break;
 8008448:	e107      	b.n	800865a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b02      	cmp	r3, #2
 8008454:	d002      	beq.n	800845c <USBD_StdEPReq+0x124>
 8008456:	2b03      	cmp	r3, #3
 8008458:	d016      	beq.n	8008488 <USBD_StdEPReq+0x150>
 800845a:	e04b      	b.n	80084f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00d      	beq.n	800847e <USBD_StdEPReq+0x146>
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	2b80      	cmp	r3, #128	; 0x80
 8008466:	d00a      	beq.n	800847e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f001 f8e1 	bl	8009634 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008472:	2180      	movs	r1, #128	; 0x80
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f001 f8dd 	bl	8009634 <USBD_LL_StallEP>
 800847a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800847c:	e040      	b.n	8008500 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fc3e 	bl	8008d02 <USBD_CtlError>
              break;
 8008486:	e03b      	b.n	8008500 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	885b      	ldrh	r3, [r3, #2]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d136      	bne.n	80084fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008496:	2b00      	cmp	r3, #0
 8008498:	d004      	beq.n	80084a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f001 f8e7 	bl	8009672 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fcf7 	bl	8008e98 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff fe1c 	bl	80080ec <USBD_CoreFindEP>
 80084b4:	4603      	mov	r3, r0
 80084b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084b8:	7b7b      	ldrb	r3, [r7, #13]
 80084ba:	2bff      	cmp	r3, #255	; 0xff
 80084bc:	d01f      	beq.n	80084fe <USBD_StdEPReq+0x1c6>
 80084be:	7b7b      	ldrb	r3, [r7, #13]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d11c      	bne.n	80084fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80084c4:	7b7a      	ldrb	r2, [r7, #13]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80084cc:	7b7a      	ldrb	r2, [r7, #13]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	32ae      	adds	r2, #174	; 0xae
 80084d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d010      	beq.n	80084fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084dc:	7b7a      	ldrb	r2, [r7, #13]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	32ae      	adds	r2, #174	; 0xae
 80084e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
 80084ee:	4603      	mov	r3, r0
 80084f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80084f2:	e004      	b.n	80084fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fc03 	bl	8008d02 <USBD_CtlError>
              break;
 80084fc:	e000      	b.n	8008500 <USBD_StdEPReq+0x1c8>
              break;
 80084fe:	bf00      	nop
          }
          break;
 8008500:	e0ab      	b.n	800865a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d002      	beq.n	8008514 <USBD_StdEPReq+0x1dc>
 800850e:	2b03      	cmp	r3, #3
 8008510:	d032      	beq.n	8008578 <USBD_StdEPReq+0x240>
 8008512:	e097      	b.n	8008644 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008514:	7bbb      	ldrb	r3, [r7, #14]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d007      	beq.n	800852a <USBD_StdEPReq+0x1f2>
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	2b80      	cmp	r3, #128	; 0x80
 800851e:	d004      	beq.n	800852a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fbed 	bl	8008d02 <USBD_CtlError>
                break;
 8008528:	e091      	b.n	800864e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800852a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800852e:	2b00      	cmp	r3, #0
 8008530:	da0b      	bge.n	800854a <USBD_StdEPReq+0x212>
 8008532:	7bbb      	ldrb	r3, [r7, #14]
 8008534:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008538:	4613      	mov	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	3310      	adds	r3, #16
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	4413      	add	r3, r2
 8008546:	3304      	adds	r3, #4
 8008548:	e00b      	b.n	8008562 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800854a:	7bbb      	ldrb	r3, [r7, #14]
 800854c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	4413      	add	r3, r2
 8008560:	3304      	adds	r3, #4
 8008562:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2202      	movs	r2, #2
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fc37 	bl	8008de4 <USBD_CtlSendData>
              break;
 8008576:	e06a      	b.n	800864e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800857c:	2b00      	cmp	r3, #0
 800857e:	da11      	bge.n	80085a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	f003 020f 	and.w	r2, r3, #15
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	440b      	add	r3, r1
 8008592:	3324      	adds	r3, #36	; 0x24
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d117      	bne.n	80085ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fbb0 	bl	8008d02 <USBD_CtlError>
                  break;
 80085a2:	e054      	b.n	800864e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	f003 020f 	and.w	r2, r3, #15
 80085aa:	6879      	ldr	r1, [r7, #4]
 80085ac:	4613      	mov	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	440b      	add	r3, r1
 80085b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085ba:	881b      	ldrh	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d104      	bne.n	80085ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fb9d 	bl	8008d02 <USBD_CtlError>
                  break;
 80085c8:	e041      	b.n	800864e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	da0b      	bge.n	80085ea <USBD_StdEPReq+0x2b2>
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085d8:	4613      	mov	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	3310      	adds	r3, #16
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	4413      	add	r3, r2
 80085e6:	3304      	adds	r3, #4
 80085e8:	e00b      	b.n	8008602 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085f0:	4613      	mov	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	4413      	add	r3, r2
 8008600:	3304      	adds	r3, #4
 8008602:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <USBD_StdEPReq+0x2d8>
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	2b80      	cmp	r3, #128	; 0x80
 800860e:	d103      	bne.n	8008618 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	e00e      	b.n	8008636 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 f847 	bl	80096b0 <USBD_LL_IsStallEP>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d003      	beq.n	8008630 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2201      	movs	r2, #1
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	e002      	b.n	8008636 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2200      	movs	r2, #0
 8008634:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	2202      	movs	r2, #2
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fbd1 	bl	8008de4 <USBD_CtlSendData>
              break;
 8008642:	e004      	b.n	800864e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fb5b 	bl	8008d02 <USBD_CtlError>
              break;
 800864c:	bf00      	nop
          }
          break;
 800864e:	e004      	b.n	800865a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fb55 	bl	8008d02 <USBD_CtlError>
          break;
 8008658:	bf00      	nop
      }
      break;
 800865a:	e005      	b.n	8008668 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fb4f 	bl	8008d02 <USBD_CtlError>
      break;
 8008664:	e000      	b.n	8008668 <USBD_StdEPReq+0x330>
      break;
 8008666:	bf00      	nop
  }

  return ret;
 8008668:	7bfb      	ldrb	r3, [r7, #15]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	885b      	ldrh	r3, [r3, #2]
 800868e:	0a1b      	lsrs	r3, r3, #8
 8008690:	b29b      	uxth	r3, r3
 8008692:	3b01      	subs	r3, #1
 8008694:	2b06      	cmp	r3, #6
 8008696:	f200 8128 	bhi.w	80088ea <USBD_GetDescriptor+0x276>
 800869a:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <USBD_GetDescriptor+0x2c>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080086bd 	.word	0x080086bd
 80086a4:	080086d5 	.word	0x080086d5
 80086a8:	08008715 	.word	0x08008715
 80086ac:	080088eb 	.word	0x080088eb
 80086b0:	080088eb 	.word	0x080088eb
 80086b4:	0800888b 	.word	0x0800888b
 80086b8:	080088b7 	.word	0x080088b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	7c12      	ldrb	r2, [r2, #16]
 80086c8:	f107 0108 	add.w	r1, r7, #8
 80086cc:	4610      	mov	r0, r2
 80086ce:	4798      	blx	r3
 80086d0:	60f8      	str	r0, [r7, #12]
      break;
 80086d2:	e112      	b.n	80088fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	7c1b      	ldrb	r3, [r3, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10d      	bne.n	80086f8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	f107 0208 	add.w	r2, r7, #8
 80086e8:	4610      	mov	r0, r2
 80086ea:	4798      	blx	r3
 80086ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3301      	adds	r3, #1
 80086f2:	2202      	movs	r2, #2
 80086f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086f6:	e100      	b.n	80088fa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008700:	f107 0208 	add.w	r2, r7, #8
 8008704:	4610      	mov	r0, r2
 8008706:	4798      	blx	r3
 8008708:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3301      	adds	r3, #1
 800870e:	2202      	movs	r2, #2
 8008710:	701a      	strb	r2, [r3, #0]
      break;
 8008712:	e0f2      	b.n	80088fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	885b      	ldrh	r3, [r3, #2]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b05      	cmp	r3, #5
 800871c:	f200 80ac 	bhi.w	8008878 <USBD_GetDescriptor+0x204>
 8008720:	a201      	add	r2, pc, #4	; (adr r2, 8008728 <USBD_GetDescriptor+0xb4>)
 8008722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008726:	bf00      	nop
 8008728:	08008741 	.word	0x08008741
 800872c:	08008775 	.word	0x08008775
 8008730:	080087a9 	.word	0x080087a9
 8008734:	080087dd 	.word	0x080087dd
 8008738:	08008811 	.word	0x08008811
 800873c:	08008845 	.word	0x08008845
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00b      	beq.n	8008764 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	7c12      	ldrb	r2, [r2, #16]
 8008758:	f107 0108 	add.w	r1, r7, #8
 800875c:	4610      	mov	r0, r2
 800875e:	4798      	blx	r3
 8008760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008762:	e091      	b.n	8008888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 facb 	bl	8008d02 <USBD_CtlError>
            err++;
 800876c:	7afb      	ldrb	r3, [r7, #11]
 800876e:	3301      	adds	r3, #1
 8008770:	72fb      	strb	r3, [r7, #11]
          break;
 8008772:	e089      	b.n	8008888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00b      	beq.n	8008798 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	7c12      	ldrb	r2, [r2, #16]
 800878c:	f107 0108 	add.w	r1, r7, #8
 8008790:	4610      	mov	r0, r2
 8008792:	4798      	blx	r3
 8008794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008796:	e077      	b.n	8008888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fab1 	bl	8008d02 <USBD_CtlError>
            err++;
 80087a0:	7afb      	ldrb	r3, [r7, #11]
 80087a2:	3301      	adds	r3, #1
 80087a4:	72fb      	strb	r3, [r7, #11]
          break;
 80087a6:	e06f      	b.n	8008888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00b      	beq.n	80087cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	7c12      	ldrb	r2, [r2, #16]
 80087c0:	f107 0108 	add.w	r1, r7, #8
 80087c4:	4610      	mov	r0, r2
 80087c6:	4798      	blx	r3
 80087c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ca:	e05d      	b.n	8008888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fa97 	bl	8008d02 <USBD_CtlError>
            err++;
 80087d4:	7afb      	ldrb	r3, [r7, #11]
 80087d6:	3301      	adds	r3, #1
 80087d8:	72fb      	strb	r3, [r7, #11]
          break;
 80087da:	e055      	b.n	8008888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	7c12      	ldrb	r2, [r2, #16]
 80087f4:	f107 0108 	add.w	r1, r7, #8
 80087f8:	4610      	mov	r0, r2
 80087fa:	4798      	blx	r3
 80087fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087fe:	e043      	b.n	8008888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fa7d 	bl	8008d02 <USBD_CtlError>
            err++;
 8008808:	7afb      	ldrb	r3, [r7, #11]
 800880a:	3301      	adds	r3, #1
 800880c:	72fb      	strb	r3, [r7, #11]
          break;
 800880e:	e03b      	b.n	8008888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00b      	beq.n	8008834 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	7c12      	ldrb	r2, [r2, #16]
 8008828:	f107 0108 	add.w	r1, r7, #8
 800882c:	4610      	mov	r0, r2
 800882e:	4798      	blx	r3
 8008830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008832:	e029      	b.n	8008888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fa63 	bl	8008d02 <USBD_CtlError>
            err++;
 800883c:	7afb      	ldrb	r3, [r7, #11]
 800883e:	3301      	adds	r3, #1
 8008840:	72fb      	strb	r3, [r7, #11]
          break;
 8008842:	e021      	b.n	8008888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00b      	beq.n	8008868 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	7c12      	ldrb	r2, [r2, #16]
 800885c:	f107 0108 	add.w	r1, r7, #8
 8008860:	4610      	mov	r0, r2
 8008862:	4798      	blx	r3
 8008864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008866:	e00f      	b.n	8008888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fa49 	bl	8008d02 <USBD_CtlError>
            err++;
 8008870:	7afb      	ldrb	r3, [r7, #11]
 8008872:	3301      	adds	r3, #1
 8008874:	72fb      	strb	r3, [r7, #11]
          break;
 8008876:	e007      	b.n	8008888 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fa41 	bl	8008d02 <USBD_CtlError>
          err++;
 8008880:	7afb      	ldrb	r3, [r7, #11]
 8008882:	3301      	adds	r3, #1
 8008884:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008886:	bf00      	nop
      }
      break;
 8008888:	e037      	b.n	80088fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	7c1b      	ldrb	r3, [r3, #16]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d109      	bne.n	80088a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800889a:	f107 0208 	add.w	r2, r7, #8
 800889e:	4610      	mov	r0, r2
 80088a0:	4798      	blx	r3
 80088a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088a4:	e029      	b.n	80088fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fa2a 	bl	8008d02 <USBD_CtlError>
        err++;
 80088ae:	7afb      	ldrb	r3, [r7, #11]
 80088b0:	3301      	adds	r3, #1
 80088b2:	72fb      	strb	r3, [r7, #11]
      break;
 80088b4:	e021      	b.n	80088fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	7c1b      	ldrb	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10d      	bne.n	80088da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c6:	f107 0208 	add.w	r2, r7, #8
 80088ca:	4610      	mov	r0, r2
 80088cc:	4798      	blx	r3
 80088ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3301      	adds	r3, #1
 80088d4:	2207      	movs	r2, #7
 80088d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088d8:	e00f      	b.n	80088fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fa10 	bl	8008d02 <USBD_CtlError>
        err++;
 80088e2:	7afb      	ldrb	r3, [r7, #11]
 80088e4:	3301      	adds	r3, #1
 80088e6:	72fb      	strb	r3, [r7, #11]
      break;
 80088e8:	e007      	b.n	80088fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fa08 	bl	8008d02 <USBD_CtlError>
      err++;
 80088f2:	7afb      	ldrb	r3, [r7, #11]
 80088f4:	3301      	adds	r3, #1
 80088f6:	72fb      	strb	r3, [r7, #11]
      break;
 80088f8:	bf00      	nop
  }

  if (err != 0U)
 80088fa:	7afb      	ldrb	r3, [r7, #11]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d11e      	bne.n	800893e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	88db      	ldrh	r3, [r3, #6]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d016      	beq.n	8008936 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008908:	893b      	ldrh	r3, [r7, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00e      	beq.n	800892c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	88da      	ldrh	r2, [r3, #6]
 8008912:	893b      	ldrh	r3, [r7, #8]
 8008914:	4293      	cmp	r3, r2
 8008916:	bf28      	it	cs
 8008918:	4613      	movcs	r3, r2
 800891a:	b29b      	uxth	r3, r3
 800891c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800891e:	893b      	ldrh	r3, [r7, #8]
 8008920:	461a      	mov	r2, r3
 8008922:	68f9      	ldr	r1, [r7, #12]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fa5d 	bl	8008de4 <USBD_CtlSendData>
 800892a:	e009      	b.n	8008940 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f9e7 	bl	8008d02 <USBD_CtlError>
 8008934:	e004      	b.n	8008940 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 faae 	bl	8008e98 <USBD_CtlSendStatus>
 800893c:	e000      	b.n	8008940 <USBD_GetDescriptor+0x2cc>
    return;
 800893e:	bf00      	nop
  }
}
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop

08008948 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	889b      	ldrh	r3, [r3, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d131      	bne.n	80089be <USBD_SetAddress+0x76>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	88db      	ldrh	r3, [r3, #6]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d12d      	bne.n	80089be <USBD_SetAddress+0x76>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	885b      	ldrh	r3, [r3, #2]
 8008966:	2b7f      	cmp	r3, #127	; 0x7f
 8008968:	d829      	bhi.n	80089be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	885b      	ldrh	r3, [r3, #2]
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008974:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b03      	cmp	r3, #3
 8008980:	d104      	bne.n	800898c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f9bc 	bl	8008d02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800898a:	e01d      	b.n	80089c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	7bfa      	ldrb	r2, [r7, #15]
 8008990:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 feb5 	bl	8009708 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fa7a 	bl	8008e98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d004      	beq.n	80089b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2202      	movs	r2, #2
 80089ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089b2:	e009      	b.n	80089c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089bc:	e004      	b.n	80089c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f99e 	bl	8008d02 <USBD_CtlError>
  }
}
 80089c6:	bf00      	nop
 80089c8:	bf00      	nop
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	885b      	ldrh	r3, [r3, #2]
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	4b4e      	ldr	r3, [pc, #312]	; (8008b20 <USBD_SetConfig+0x150>)
 80089e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80089e8:	4b4d      	ldr	r3, [pc, #308]	; (8008b20 <USBD_SetConfig+0x150>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d905      	bls.n	80089fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f985 	bl	8008d02 <USBD_CtlError>
    return USBD_FAIL;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e08c      	b.n	8008b16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d002      	beq.n	8008a0e <USBD_SetConfig+0x3e>
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d029      	beq.n	8008a60 <USBD_SetConfig+0x90>
 8008a0c:	e075      	b.n	8008afa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a0e:	4b44      	ldr	r3, [pc, #272]	; (8008b20 <USBD_SetConfig+0x150>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d020      	beq.n	8008a58 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008a16:	4b42      	ldr	r3, [pc, #264]	; (8008b20 <USBD_SetConfig+0x150>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a20:	4b3f      	ldr	r3, [pc, #252]	; (8008b20 <USBD_SetConfig+0x150>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7ff f821 	bl	8007a6e <USBD_SetClassConfig>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d008      	beq.n	8008a48 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 f962 	bl	8008d02 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2202      	movs	r2, #2
 8008a42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a46:	e065      	b.n	8008b14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fa25 	bl	8008e98 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2203      	movs	r2, #3
 8008a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a56:	e05d      	b.n	8008b14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fa1d 	bl	8008e98 <USBD_CtlSendStatus>
      break;
 8008a5e:	e059      	b.n	8008b14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a60:	4b2f      	ldr	r3, [pc, #188]	; (8008b20 <USBD_SetConfig+0x150>)
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d112      	bne.n	8008a8e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008a70:	4b2b      	ldr	r3, [pc, #172]	; (8008b20 <USBD_SetConfig+0x150>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	461a      	mov	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a7a:	4b29      	ldr	r3, [pc, #164]	; (8008b20 <USBD_SetConfig+0x150>)
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7ff f810 	bl	8007aa6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fa06 	bl	8008e98 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a8c:	e042      	b.n	8008b14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008a8e:	4b24      	ldr	r3, [pc, #144]	; (8008b20 <USBD_SetConfig+0x150>)
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	461a      	mov	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d02a      	beq.n	8008af2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7fe fffe 	bl	8007aa6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008aaa:	4b1d      	ldr	r3, [pc, #116]	; (8008b20 <USBD_SetConfig+0x150>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ab4:	4b1a      	ldr	r3, [pc, #104]	; (8008b20 <USBD_SetConfig+0x150>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7fe ffd7 	bl	8007a6e <USBD_SetClassConfig>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00f      	beq.n	8008aea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f918 	bl	8008d02 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7fe ffe3 	bl	8007aa6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ae8:	e014      	b.n	8008b14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f9d4 	bl	8008e98 <USBD_CtlSendStatus>
      break;
 8008af0:	e010      	b.n	8008b14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f9d0 	bl	8008e98 <USBD_CtlSendStatus>
      break;
 8008af8:	e00c      	b.n	8008b14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f900 	bl	8008d02 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b02:	4b07      	ldr	r3, [pc, #28]	; (8008b20 <USBD_SetConfig+0x150>)
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7fe ffcc 	bl	8007aa6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	73fb      	strb	r3, [r7, #15]
      break;
 8008b12:	bf00      	nop
  }

  return ret;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	2000028c 	.word	0x2000028c

08008b24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	88db      	ldrh	r3, [r3, #6]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d004      	beq.n	8008b40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f8e2 	bl	8008d02 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b3e:	e023      	b.n	8008b88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	dc02      	bgt.n	8008b52 <USBD_GetConfig+0x2e>
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	dc03      	bgt.n	8008b58 <USBD_GetConfig+0x34>
 8008b50:	e015      	b.n	8008b7e <USBD_GetConfig+0x5a>
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d00b      	beq.n	8008b6e <USBD_GetConfig+0x4a>
 8008b56:	e012      	b.n	8008b7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3308      	adds	r3, #8
 8008b62:	2201      	movs	r2, #1
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f93c 	bl	8008de4 <USBD_CtlSendData>
        break;
 8008b6c:	e00c      	b.n	8008b88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3304      	adds	r3, #4
 8008b72:	2201      	movs	r2, #1
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f934 	bl	8008de4 <USBD_CtlSendData>
        break;
 8008b7c:	e004      	b.n	8008b88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f8be 	bl	8008d02 <USBD_CtlError>
        break;
 8008b86:	bf00      	nop
}
 8008b88:	bf00      	nop
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d81e      	bhi.n	8008be6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	88db      	ldrh	r3, [r3, #6]
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d004      	beq.n	8008bba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f8a5 	bl	8008d02 <USBD_CtlError>
        break;
 8008bb8:	e01a      	b.n	8008bf0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d005      	beq.n	8008bd6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	f043 0202 	orr.w	r2, r3, #2
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	330c      	adds	r3, #12
 8008bda:	2202      	movs	r2, #2
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f900 	bl	8008de4 <USBD_CtlSendData>
      break;
 8008be4:	e004      	b.n	8008bf0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f88a 	bl	8008d02 <USBD_CtlError>
      break;
 8008bee:	bf00      	nop
  }
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	885b      	ldrh	r3, [r3, #2]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d107      	bne.n	8008c1a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f940 	bl	8008e98 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008c18:	e013      	b.n	8008c42 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	885b      	ldrh	r3, [r3, #2]
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d10b      	bne.n	8008c3a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	889b      	ldrh	r3, [r3, #4]
 8008c26:	0a1b      	lsrs	r3, r3, #8
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f930 	bl	8008e98 <USBD_CtlSendStatus>
}
 8008c38:	e003      	b.n	8008c42 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f860 	bl	8008d02 <USBD_CtlError>
}
 8008c42:	bf00      	nop
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b082      	sub	sp, #8
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d80b      	bhi.n	8008c7a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	885b      	ldrh	r3, [r3, #2]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d10c      	bne.n	8008c84 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f910 	bl	8008e98 <USBD_CtlSendStatus>
      }
      break;
 8008c78:	e004      	b.n	8008c84 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f840 	bl	8008d02 <USBD_CtlError>
      break;
 8008c82:	e000      	b.n	8008c86 <USBD_ClrFeature+0x3c>
      break;
 8008c84:	bf00      	nop
  }
}
 8008c86:	bf00      	nop
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	781a      	ldrb	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	781a      	ldrb	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f7ff fa41 	bl	8008140 <SWAPBYTE>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f7ff fa34 	bl	8008140 <SWAPBYTE>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	461a      	mov	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f7ff fa27 	bl	8008140 <SWAPBYTE>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	80da      	strh	r2, [r3, #6]
}
 8008cfa:	bf00      	nop
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d0c:	2180      	movs	r1, #128	; 0x80
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fc90 	bl	8009634 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d14:	2100      	movs	r1, #0
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fc8c 	bl	8009634 <USBD_LL_StallEP>
}
 8008d1c:	bf00      	nop
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d036      	beq.n	8008da8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d3e:	6938      	ldr	r0, [r7, #16]
 8008d40:	f000 f836 	bl	8008db0 <USBD_GetLen>
 8008d44:	4603      	mov	r3, r0
 8008d46:	3301      	adds	r3, #1
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	4413      	add	r3, r2
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	7812      	ldrb	r2, [r2, #0]
 8008d5c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	3301      	adds	r3, #1
 8008d62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	4413      	add	r3, r2
 8008d6a:	2203      	movs	r2, #3
 8008d6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	3301      	adds	r3, #1
 8008d72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d74:	e013      	b.n	8008d9e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008d76:	7dfb      	ldrb	r3, [r7, #23]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	7812      	ldrb	r2, [r2, #0]
 8008d80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	3301      	adds	r3, #1
 8008d86:	613b      	str	r3, [r7, #16]
    idx++;
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	4413      	add	r3, r2
 8008d94:	2200      	movs	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1e7      	bne.n	8008d76 <USBD_GetString+0x52>
 8008da6:	e000      	b.n	8008daa <USBD_GetString+0x86>
    return;
 8008da8:	bf00      	nop
  }
}
 8008daa:	3718      	adds	r7, #24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008db8:	2300      	movs	r3, #0
 8008dba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008dc0:	e005      	b.n	8008dce <USBD_GetLen+0x1e>
  {
    len++;
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1f5      	bne.n	8008dc2 <USBD_GetLen+0x12>
  }

  return len;
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2202      	movs	r2, #2
 8008df4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	2100      	movs	r1, #0
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 fc9b 	bl	8009746 <USBD_LL_Transmit>

  return USBD_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	60f8      	str	r0, [r7, #12]
 8008e22:	60b9      	str	r1, [r7, #8]
 8008e24:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 fc8a 	bl	8009746 <USBD_LL_Transmit>

  return USBD_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2203      	movs	r2, #3
 8008e4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	2100      	movs	r1, #0
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 fc8e 	bl	8009788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b084      	sub	sp, #16
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	60f8      	str	r0, [r7, #12]
 8008e7e:	60b9      	str	r1, [r7, #8]
 8008e80:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	2100      	movs	r1, #0
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f000 fc7d 	bl	8009788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2204      	movs	r2, #4
 8008ea4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2100      	movs	r1, #0
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fc49 	bl	8009746 <USBD_LL_Transmit>

  return USBD_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b082      	sub	sp, #8
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2205      	movs	r2, #5
 8008eca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fc57 	bl	8009788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	4912      	ldr	r1, [pc, #72]	; (8008f34 <MX_USB_DEVICE_Init+0x50>)
 8008eec:	4812      	ldr	r0, [pc, #72]	; (8008f38 <MX_USB_DEVICE_Init+0x54>)
 8008eee:	f7fe fd41 	bl	8007974 <USBD_Init>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ef8:	f7f7 fdd8 	bl	8000aac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8008efc:	490f      	ldr	r1, [pc, #60]	; (8008f3c <MX_USB_DEVICE_Init+0x58>)
 8008efe:	480e      	ldr	r0, [pc, #56]	; (8008f38 <MX_USB_DEVICE_Init+0x54>)
 8008f00:	f7fe fd68 	bl	80079d4 <USBD_RegisterClass>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f0a:	f7f7 fdcf 	bl	8000aac <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8008f0e:	490c      	ldr	r1, [pc, #48]	; (8008f40 <MX_USB_DEVICE_Init+0x5c>)
 8008f10:	4809      	ldr	r0, [pc, #36]	; (8008f38 <MX_USB_DEVICE_Init+0x54>)
 8008f12:	f7fe fce1 	bl	80078d8 <USBD_AUDIO_RegisterInterface>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f1c:	f7f7 fdc6 	bl	8000aac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f20:	4805      	ldr	r0, [pc, #20]	; (8008f38 <MX_USB_DEVICE_Init+0x54>)
 8008f22:	f7fe fd8d 	bl	8007a40 <USBD_Start>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d001      	beq.n	8008f30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f2c:	f7f7 fdbe 	bl	8000aac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f30:	bf00      	nop
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	200000dc 	.word	0x200000dc
 8008f38:	20000290 	.word	0x20000290
 8008f3c:	2000000c 	.word	0x2000000c
 8008f40:	200000c0 	.word	0x200000c0

08008f44 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8008f50:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b082      	sub	sp, #8
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
	Audio_Player_Stop();
 8008f66:	f7f7 fb6f 	bl	8000648 <Audio_Player_Stop>
  UNUSED(options);
  return (USBD_OK);
 8008f6a:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 8008f82:	79fb      	ldrb	r3, [r7, #7]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d002      	beq.n	8008f8e <AUDIO_AudioCmd_FS+0x1a>
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d005      	beq.n	8008f98 <AUDIO_AudioCmd_FS+0x24>
 8008f8c:	e009      	b.n	8008fa2 <AUDIO_AudioCmd_FS+0x2e>
  {
    case AUDIO_CMD_START:
    	Audio_Player_Play(pbuf, size);
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f7f7 fb39 	bl	8000608 <Audio_Player_Play>
    break;
 8008f96:	e004      	b.n	8008fa2 <AUDIO_AudioCmd_FS+0x2e>

    case AUDIO_CMD_PLAY:
    	Audio_Player_Play(pbuf, size);
 8008f98:	68b9      	ldr	r1, [r7, #8]
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7f7 fb34 	bl	8000608 <Audio_Player_Play>
    break;
 8008fa0:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008fa2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 8008fb6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 8008fce:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8008fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008fee:	4804      	ldr	r0, [pc, #16]	; (8009000 <AUDIO_PeriodicTC_FS+0x24>)
 8008ff0:	f7f9 f83b 	bl	800206a <HAL_GPIO_TogglePin>
  return (USBD_OK);
 8008ff4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	40020800 	.word	0x40020800

08009004 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8009008:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800900c:	4802      	ldr	r0, [pc, #8]	; (8009018 <AUDIO_GetState_FS+0x14>)
 800900e:	f7f9 f82c 	bl	800206a <HAL_GPIO_TogglePin>
  return (USBD_OK);
 8009012:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009014:	4618      	mov	r0, r3
 8009016:	bd80      	pop	{r7, pc}
 8009018:	40020800 	.word	0x40020800

0800901c <TransferComplete_CallBack_FS>:
/**
  * @brief  Manages the DMA full transfer complete event.
  * @retval None
  */
void TransferComplete_CallBack_FS(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_FULL);
 8009020:	2102      	movs	r1, #2
 8009022:	4802      	ldr	r0, [pc, #8]	; (800902c <TransferComplete_CallBack_FS+0x10>)
 8009024:	f7fe fa6d 	bl	8007502 <USBD_AUDIO_Sync>
  /* USER CODE END 7 */
}
 8009028:	bf00      	nop
 800902a:	bd80      	pop	{r7, pc}
 800902c:	20000290 	.word	0x20000290

08009030 <HalfTransfer_CallBack_FS>:
/**
  * @brief  Manages the DMA Half transfer complete event.
  * @retval None
  */
void HalfTransfer_CallBack_FS(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_HALF);
 8009034:	2101      	movs	r1, #1
 8009036:	4802      	ldr	r0, [pc, #8]	; (8009040 <HalfTransfer_CallBack_FS+0x10>)
 8009038:	f7fe fa63 	bl	8007502 <USBD_AUDIO_Sync>
  /* USER CODE END 8 */
}
 800903c:	bf00      	nop
 800903e:	bd80      	pop	{r7, pc}
 8009040:	20000290 	.word	0x20000290

08009044 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	4603      	mov	r3, r0
 800904c:	6039      	str	r1, [r7, #0]
 800904e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	2212      	movs	r2, #18
 8009054:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009056:	4b03      	ldr	r3, [pc, #12]	; (8009064 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009058:	4618      	mov	r0, r3
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	200000f8 	.word	0x200000f8

08009068 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	6039      	str	r1, [r7, #0]
 8009072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	2204      	movs	r2, #4
 8009078:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800907a:	4b03      	ldr	r3, [pc, #12]	; (8009088 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	2000010c 	.word	0x2000010c

0800908c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	4603      	mov	r3, r0
 8009094:	6039      	str	r1, [r7, #0]
 8009096:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009098:	79fb      	ldrb	r3, [r7, #7]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d105      	bne.n	80090aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	4907      	ldr	r1, [pc, #28]	; (80090c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80090a2:	4808      	ldr	r0, [pc, #32]	; (80090c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80090a4:	f7ff fe3e 	bl	8008d24 <USBD_GetString>
 80090a8:	e004      	b.n	80090b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	4904      	ldr	r1, [pc, #16]	; (80090c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80090ae:	4805      	ldr	r0, [pc, #20]	; (80090c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80090b0:	f7ff fe38 	bl	8008d24 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090b4:	4b02      	ldr	r3, [pc, #8]	; (80090c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	2000056c 	.word	0x2000056c
 80090c4:	080098e8 	.word	0x080098e8

080090c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	4603      	mov	r3, r0
 80090d0:	6039      	str	r1, [r7, #0]
 80090d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	4904      	ldr	r1, [pc, #16]	; (80090e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090d8:	4804      	ldr	r0, [pc, #16]	; (80090ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090da:	f7ff fe23 	bl	8008d24 <USBD_GetString>
  return USBD_StrDesc;
 80090de:	4b02      	ldr	r3, [pc, #8]	; (80090e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	2000056c 	.word	0x2000056c
 80090ec:	08009908 	.word	0x08009908

080090f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	6039      	str	r1, [r7, #0]
 80090fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	221a      	movs	r2, #26
 8009100:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009102:	f000 f843 	bl	800918c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009106:	4b02      	ldr	r3, [pc, #8]	; (8009110 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009108:	4618      	mov	r0, r3
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	20000110 	.word	0x20000110

08009114 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	4603      	mov	r3, r0
 800911c:	6039      	str	r1, [r7, #0]
 800911e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d105      	bne.n	8009132 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	4907      	ldr	r1, [pc, #28]	; (8009148 <USBD_FS_ConfigStrDescriptor+0x34>)
 800912a:	4808      	ldr	r0, [pc, #32]	; (800914c <USBD_FS_ConfigStrDescriptor+0x38>)
 800912c:	f7ff fdfa 	bl	8008d24 <USBD_GetString>
 8009130:	e004      	b.n	800913c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	4904      	ldr	r1, [pc, #16]	; (8009148 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009136:	4805      	ldr	r0, [pc, #20]	; (800914c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009138:	f7ff fdf4 	bl	8008d24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800913c:	4b02      	ldr	r3, [pc, #8]	; (8009148 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	2000056c 	.word	0x2000056c
 800914c:	0800991c 	.word	0x0800991c

08009150 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	6039      	str	r1, [r7, #0]
 800915a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800915c:	79fb      	ldrb	r3, [r7, #7]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d105      	bne.n	800916e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	4907      	ldr	r1, [pc, #28]	; (8009184 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009166:	4808      	ldr	r0, [pc, #32]	; (8009188 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009168:	f7ff fddc 	bl	8008d24 <USBD_GetString>
 800916c:	e004      	b.n	8009178 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	4904      	ldr	r1, [pc, #16]	; (8009184 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009172:	4805      	ldr	r0, [pc, #20]	; (8009188 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009174:	f7ff fdd6 	bl	8008d24 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009178:	4b02      	ldr	r3, [pc, #8]	; (8009184 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800917a:	4618      	mov	r0, r3
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	2000056c 	.word	0x2000056c
 8009188:	0800992c 	.word	0x0800992c

0800918c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009192:	4b0f      	ldr	r3, [pc, #60]	; (80091d0 <Get_SerialNum+0x44>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009198:	4b0e      	ldr	r3, [pc, #56]	; (80091d4 <Get_SerialNum+0x48>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800919e:	4b0e      	ldr	r3, [pc, #56]	; (80091d8 <Get_SerialNum+0x4c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4413      	add	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d009      	beq.n	80091c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091b2:	2208      	movs	r2, #8
 80091b4:	4909      	ldr	r1, [pc, #36]	; (80091dc <Get_SerialNum+0x50>)
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 f814 	bl	80091e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091bc:	2204      	movs	r2, #4
 80091be:	4908      	ldr	r1, [pc, #32]	; (80091e0 <Get_SerialNum+0x54>)
 80091c0:	68b8      	ldr	r0, [r7, #8]
 80091c2:	f000 f80f 	bl	80091e4 <IntToUnicode>
  }
}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	1fff7a10 	.word	0x1fff7a10
 80091d4:	1fff7a14 	.word	0x1fff7a14
 80091d8:	1fff7a18 	.word	0x1fff7a18
 80091dc:	20000112 	.word	0x20000112
 80091e0:	20000122 	.word	0x20000122

080091e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b087      	sub	sp, #28
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	4613      	mov	r3, r2
 80091f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091f6:	2300      	movs	r3, #0
 80091f8:	75fb      	strb	r3, [r7, #23]
 80091fa:	e027      	b.n	800924c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	0f1b      	lsrs	r3, r3, #28
 8009200:	2b09      	cmp	r3, #9
 8009202:	d80b      	bhi.n	800921c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	0f1b      	lsrs	r3, r3, #28
 8009208:	b2da      	uxtb	r2, r3
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	4619      	mov	r1, r3
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	440b      	add	r3, r1
 8009214:	3230      	adds	r2, #48	; 0x30
 8009216:	b2d2      	uxtb	r2, r2
 8009218:	701a      	strb	r2, [r3, #0]
 800921a:	e00a      	b.n	8009232 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	0f1b      	lsrs	r3, r3, #28
 8009220:	b2da      	uxtb	r2, r3
 8009222:	7dfb      	ldrb	r3, [r7, #23]
 8009224:	005b      	lsls	r3, r3, #1
 8009226:	4619      	mov	r1, r3
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	440b      	add	r3, r1
 800922c:	3237      	adds	r2, #55	; 0x37
 800922e:	b2d2      	uxtb	r2, r2
 8009230:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	011b      	lsls	r3, r3, #4
 8009236:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009238:	7dfb      	ldrb	r3, [r7, #23]
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	3301      	adds	r3, #1
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	4413      	add	r3, r2
 8009242:	2200      	movs	r2, #0
 8009244:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	3301      	adds	r3, #1
 800924a:	75fb      	strb	r3, [r7, #23]
 800924c:	7dfa      	ldrb	r2, [r7, #23]
 800924e:	79fb      	ldrb	r3, [r7, #7]
 8009250:	429a      	cmp	r2, r3
 8009252:	d3d3      	bcc.n	80091fc <IntToUnicode+0x18>
  }
}
 8009254:	bf00      	nop
 8009256:	bf00      	nop
 8009258:	371c      	adds	r7, #28
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
	...

08009264 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b08a      	sub	sp, #40	; 0x28
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800926c:	f107 0314 	add.w	r3, r7, #20
 8009270:	2200      	movs	r2, #0
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	605a      	str	r2, [r3, #4]
 8009276:	609a      	str	r2, [r3, #8]
 8009278:	60da      	str	r2, [r3, #12]
 800927a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009284:	d13a      	bne.n	80092fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009286:	2300      	movs	r3, #0
 8009288:	613b      	str	r3, [r7, #16]
 800928a:	4b1e      	ldr	r3, [pc, #120]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 800928c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928e:	4a1d      	ldr	r2, [pc, #116]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 8009290:	f043 0301 	orr.w	r3, r3, #1
 8009294:	6313      	str	r3, [r2, #48]	; 0x30
 8009296:	4b1b      	ldr	r3, [pc, #108]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 8009298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	613b      	str	r3, [r7, #16]
 80092a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80092a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80092a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092a8:	2302      	movs	r3, #2
 80092aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092ac:	2300      	movs	r3, #0
 80092ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092b0:	2303      	movs	r3, #3
 80092b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092b4:	230a      	movs	r3, #10
 80092b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092b8:	f107 0314 	add.w	r3, r7, #20
 80092bc:	4619      	mov	r1, r3
 80092be:	4812      	ldr	r0, [pc, #72]	; (8009308 <HAL_PCD_MspInit+0xa4>)
 80092c0:	f7f8 fd36 	bl	8001d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092c4:	4b0f      	ldr	r3, [pc, #60]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 80092c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c8:	4a0e      	ldr	r2, [pc, #56]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 80092ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ce:	6353      	str	r3, [r2, #52]	; 0x34
 80092d0:	2300      	movs	r3, #0
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	4b0b      	ldr	r3, [pc, #44]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 80092d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d8:	4a0a      	ldr	r2, [pc, #40]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 80092da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092de:	6453      	str	r3, [r2, #68]	; 0x44
 80092e0:	4b08      	ldr	r3, [pc, #32]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 80092e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092ec:	2200      	movs	r2, #0
 80092ee:	2100      	movs	r1, #0
 80092f0:	2043      	movs	r0, #67	; 0x43
 80092f2:	f7f8 f8ea 	bl	80014ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092f6:	2043      	movs	r0, #67	; 0x43
 80092f8:	f7f8 f903 	bl	8001502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092fc:	bf00      	nop
 80092fe:	3728      	adds	r7, #40	; 0x28
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	40023800 	.word	0x40023800
 8009308:	40020000 	.word	0x40020000

0800930c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009320:	4619      	mov	r1, r3
 8009322:	4610      	mov	r0, r2
 8009324:	f7fe fbd9 	bl	8007ada <USBD_LL_SetupStage>
}
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009342:	78fa      	ldrb	r2, [r7, #3]
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	4613      	mov	r3, r2
 8009348:	00db      	lsls	r3, r3, #3
 800934a:	4413      	add	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	440b      	add	r3, r1
 8009350:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	78fb      	ldrb	r3, [r7, #3]
 8009358:	4619      	mov	r1, r3
 800935a:	f7fe fc13 	bl	8007b84 <USBD_LL_DataOutStage>
}
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b082      	sub	sp, #8
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	460b      	mov	r3, r1
 8009370:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	4613      	mov	r3, r2
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	4413      	add	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	440b      	add	r3, r1
 8009386:	334c      	adds	r3, #76	; 0x4c
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	78fb      	ldrb	r3, [r7, #3]
 800938c:	4619      	mov	r1, r3
 800938e:	f7fe fcac 	bl	8007cea <USBD_LL_DataInStage>
}
 8009392:	bf00      	nop
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b082      	sub	sp, #8
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fe fde0 	bl	8007f6e <USBD_LL_SOF>
}
 80093ae:	bf00      	nop
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80093be:	2301      	movs	r3, #1
 80093c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d001      	beq.n	80093ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80093ca:	f7f7 fb6f 	bl	8000aac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093d4:	7bfa      	ldrb	r2, [r7, #15]
 80093d6:	4611      	mov	r1, r2
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fe fd8a 	bl	8007ef2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fe fd32 	bl	8007e4e <USBD_LL_Reset>
}
 80093ea:	bf00      	nop
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fd85 	bl	8007f12 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	6812      	ldr	r2, [r2, #0]
 8009416:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800941a:	f043 0301 	orr.w	r3, r3, #1
 800941e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a1b      	ldr	r3, [r3, #32]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d005      	beq.n	8009434 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009428:	4b04      	ldr	r3, [pc, #16]	; (800943c <HAL_PCD_SuspendCallback+0x48>)
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	4a03      	ldr	r2, [pc, #12]	; (800943c <HAL_PCD_SuspendCallback+0x48>)
 800942e:	f043 0306 	orr.w	r3, r3, #6
 8009432:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009434:	bf00      	nop
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	e000ed00 	.word	0xe000ed00

08009440 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe fd75 	bl	8007f3e <USBD_LL_Resume>
}
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800946e:	78fa      	ldrb	r2, [r7, #3]
 8009470:	4611      	mov	r1, r2
 8009472:	4618      	mov	r0, r3
 8009474:	f7fe fdcd 	bl	8008012 <USBD_LL_IsoOUTIncomplete>
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009492:	78fa      	ldrb	r2, [r7, #3]
 8009494:	4611      	mov	r1, r2
 8009496:	4618      	mov	r0, r3
 8009498:	f7fe fd89 	bl	8007fae <USBD_LL_IsoINIncomplete>
}
 800949c:	bf00      	nop
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe fddf 	bl	8008076 <USBD_LL_DevConnected>
}
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fe fddc 	bl	800808c <USBD_LL_DevDisconnected>
}
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d13c      	bne.n	8009566 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80094ec:	4a20      	ldr	r2, [pc, #128]	; (8009570 <USBD_LL_Init+0x94>)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a1e      	ldr	r2, [pc, #120]	; (8009570 <USBD_LL_Init+0x94>)
 80094f8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094fc:	4b1c      	ldr	r3, [pc, #112]	; (8009570 <USBD_LL_Init+0x94>)
 80094fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009502:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009504:	4b1a      	ldr	r3, [pc, #104]	; (8009570 <USBD_LL_Init+0x94>)
 8009506:	2204      	movs	r2, #4
 8009508:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800950a:	4b19      	ldr	r3, [pc, #100]	; (8009570 <USBD_LL_Init+0x94>)
 800950c:	2202      	movs	r2, #2
 800950e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009510:	4b17      	ldr	r3, [pc, #92]	; (8009570 <USBD_LL_Init+0x94>)
 8009512:	2200      	movs	r2, #0
 8009514:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009516:	4b16      	ldr	r3, [pc, #88]	; (8009570 <USBD_LL_Init+0x94>)
 8009518:	2202      	movs	r2, #2
 800951a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800951c:	4b14      	ldr	r3, [pc, #80]	; (8009570 <USBD_LL_Init+0x94>)
 800951e:	2200      	movs	r2, #0
 8009520:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009522:	4b13      	ldr	r3, [pc, #76]	; (8009570 <USBD_LL_Init+0x94>)
 8009524:	2200      	movs	r2, #0
 8009526:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009528:	4b11      	ldr	r3, [pc, #68]	; (8009570 <USBD_LL_Init+0x94>)
 800952a:	2200      	movs	r2, #0
 800952c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800952e:	4b10      	ldr	r3, [pc, #64]	; (8009570 <USBD_LL_Init+0x94>)
 8009530:	2200      	movs	r2, #0
 8009532:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009534:	4b0e      	ldr	r3, [pc, #56]	; (8009570 <USBD_LL_Init+0x94>)
 8009536:	2200      	movs	r2, #0
 8009538:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800953a:	480d      	ldr	r0, [pc, #52]	; (8009570 <USBD_LL_Init+0x94>)
 800953c:	f7f9 fd56 	bl	8002fec <HAL_PCD_Init>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009546:	f7f7 fab1 	bl	8000aac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800954a:	2180      	movs	r1, #128	; 0x80
 800954c:	4808      	ldr	r0, [pc, #32]	; (8009570 <USBD_LL_Init+0x94>)
 800954e:	f7fa ffae 	bl	80044ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009552:	2240      	movs	r2, #64	; 0x40
 8009554:	2100      	movs	r1, #0
 8009556:	4806      	ldr	r0, [pc, #24]	; (8009570 <USBD_LL_Init+0x94>)
 8009558:	f7fa ff62 	bl	8004420 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800955c:	2280      	movs	r2, #128	; 0x80
 800955e:	2101      	movs	r1, #1
 8009560:	4803      	ldr	r0, [pc, #12]	; (8009570 <USBD_LL_Init+0x94>)
 8009562:	f7fa ff5d 	bl	8004420 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	2000076c 	.word	0x2000076c

08009574 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800958a:	4618      	mov	r0, r3
 800958c:	f7f9 fe4b 	bl	8003226 <HAL_PCD_Start>
 8009590:	4603      	mov	r3, r0
 8009592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009594:	7bfb      	ldrb	r3, [r7, #15]
 8009596:	4618      	mov	r0, r3
 8009598:	f000 f942 	bl	8009820 <USBD_Get_USB_Status>
 800959c:	4603      	mov	r3, r0
 800959e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	4608      	mov	r0, r1
 80095b4:	4611      	mov	r1, r2
 80095b6:	461a      	mov	r2, r3
 80095b8:	4603      	mov	r3, r0
 80095ba:	70fb      	strb	r3, [r7, #3]
 80095bc:	460b      	mov	r3, r1
 80095be:	70bb      	strb	r3, [r7, #2]
 80095c0:	4613      	mov	r3, r2
 80095c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80095d2:	78bb      	ldrb	r3, [r7, #2]
 80095d4:	883a      	ldrh	r2, [r7, #0]
 80095d6:	78f9      	ldrb	r1, [r7, #3]
 80095d8:	f7fa fb1c 	bl	8003c14 <HAL_PCD_EP_Open>
 80095dc:	4603      	mov	r3, r0
 80095de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 f91c 	bl	8009820 <USBD_Get_USB_Status>
 80095e8:	4603      	mov	r3, r0
 80095ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009610:	78fa      	ldrb	r2, [r7, #3]
 8009612:	4611      	mov	r1, r2
 8009614:	4618      	mov	r0, r3
 8009616:	f7fa fb65 	bl	8003ce4 <HAL_PCD_EP_Close>
 800961a:	4603      	mov	r3, r0
 800961c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	4618      	mov	r0, r3
 8009622:	f000 f8fd 	bl	8009820 <USBD_Get_USB_Status>
 8009626:	4603      	mov	r3, r0
 8009628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800962a:	7bbb      	ldrb	r3, [r7, #14]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	460b      	mov	r3, r1
 800963e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800964e:	78fa      	ldrb	r2, [r7, #3]
 8009650:	4611      	mov	r1, r2
 8009652:	4618      	mov	r0, r3
 8009654:	f7fa fc3d 	bl	8003ed2 <HAL_PCD_EP_SetStall>
 8009658:	4603      	mov	r3, r0
 800965a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800965c:	7bfb      	ldrb	r3, [r7, #15]
 800965e:	4618      	mov	r0, r3
 8009660:	f000 f8de 	bl	8009820 <USBD_Get_USB_Status>
 8009664:	4603      	mov	r3, r0
 8009666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009668:	7bbb      	ldrb	r3, [r7, #14]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	460b      	mov	r3, r1
 800967c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800968c:	78fa      	ldrb	r2, [r7, #3]
 800968e:	4611      	mov	r1, r2
 8009690:	4618      	mov	r0, r3
 8009692:	f7fa fc82 	bl	8003f9a <HAL_PCD_EP_ClrStall>
 8009696:	4603      	mov	r3, r0
 8009698:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800969a:	7bfb      	ldrb	r3, [r7, #15]
 800969c:	4618      	mov	r0, r3
 800969e:	f000 f8bf 	bl	8009820 <USBD_Get_USB_Status>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	da0b      	bge.n	80096e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096cc:	78fb      	ldrb	r3, [r7, #3]
 80096ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096d2:	68f9      	ldr	r1, [r7, #12]
 80096d4:	4613      	mov	r3, r2
 80096d6:	00db      	lsls	r3, r3, #3
 80096d8:	4413      	add	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	440b      	add	r3, r1
 80096de:	333e      	adds	r3, #62	; 0x3e
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	e00b      	b.n	80096fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096ea:	68f9      	ldr	r1, [r7, #12]
 80096ec:	4613      	mov	r3, r2
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	440b      	add	r3, r1
 80096f6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80096fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009722:	78fa      	ldrb	r2, [r7, #3]
 8009724:	4611      	mov	r1, r2
 8009726:	4618      	mov	r0, r3
 8009728:	f7fa fa4f 	bl	8003bca <HAL_PCD_SetAddress>
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	4618      	mov	r0, r3
 8009734:	f000 f874 	bl	8009820 <USBD_Get_USB_Status>
 8009738:	4603      	mov	r3, r0
 800973a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800973c:	7bbb      	ldrb	r3, [r7, #14]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b086      	sub	sp, #24
 800974a:	af00      	add	r7, sp, #0
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	603b      	str	r3, [r7, #0]
 8009752:	460b      	mov	r3, r1
 8009754:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009764:	7af9      	ldrb	r1, [r7, #11]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	f7fa fb68 	bl	8003e3e <HAL_PCD_EP_Transmit>
 800976e:	4603      	mov	r3, r0
 8009770:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	4618      	mov	r0, r3
 8009776:	f000 f853 	bl	8009820 <USBD_Get_USB_Status>
 800977a:	4603      	mov	r3, r0
 800977c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800977e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3718      	adds	r7, #24
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	607a      	str	r2, [r7, #4]
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	460b      	mov	r3, r1
 8009796:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80097a6:	7af9      	ldrb	r1, [r7, #11]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	f7fa fae4 	bl	8003d78 <HAL_PCD_EP_Receive>
 80097b0:	4603      	mov	r3, r0
 80097b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 f832 	bl	8009820 <USBD_Get_USB_Status>
 80097bc:	4603      	mov	r3, r0
 80097be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3718      	adds	r7, #24
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b082      	sub	sp, #8
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	460b      	mov	r3, r1
 80097d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097dc:	78fa      	ldrb	r2, [r7, #3]
 80097de:	4611      	mov	r1, r2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fa fb14 	bl	8003e0e <HAL_PCD_EP_GetRxCount>
 80097e6:	4603      	mov	r3, r0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097f8:	4b03      	ldr	r3, [pc, #12]	; (8009808 <USBD_static_malloc+0x18>)
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	20000c78 	.word	0x20000c78

0800980c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]

}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800982e:	79fb      	ldrb	r3, [r7, #7]
 8009830:	2b03      	cmp	r3, #3
 8009832:	d817      	bhi.n	8009864 <USBD_Get_USB_Status+0x44>
 8009834:	a201      	add	r2, pc, #4	; (adr r2, 800983c <USBD_Get_USB_Status+0x1c>)
 8009836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983a:	bf00      	nop
 800983c:	0800984d 	.word	0x0800984d
 8009840:	08009853 	.word	0x08009853
 8009844:	08009859 	.word	0x08009859
 8009848:	0800985f 	.word	0x0800985f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	73fb      	strb	r3, [r7, #15]
    break;
 8009850:	e00b      	b.n	800986a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009852:	2303      	movs	r3, #3
 8009854:	73fb      	strb	r3, [r7, #15]
    break;
 8009856:	e008      	b.n	800986a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009858:	2301      	movs	r3, #1
 800985a:	73fb      	strb	r3, [r7, #15]
    break;
 800985c:	e005      	b.n	800986a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800985e:	2303      	movs	r3, #3
 8009860:	73fb      	strb	r3, [r7, #15]
    break;
 8009862:	e002      	b.n	800986a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009864:	2303      	movs	r3, #3
 8009866:	73fb      	strb	r3, [r7, #15]
    break;
 8009868:	bf00      	nop
  }
  return usb_status;
 800986a:	7bfb      	ldrb	r3, [r7, #15]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3714      	adds	r7, #20
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <__libc_init_array>:
 8009878:	b570      	push	{r4, r5, r6, lr}
 800987a:	4d0d      	ldr	r5, [pc, #52]	; (80098b0 <__libc_init_array+0x38>)
 800987c:	4c0d      	ldr	r4, [pc, #52]	; (80098b4 <__libc_init_array+0x3c>)
 800987e:	1b64      	subs	r4, r4, r5
 8009880:	10a4      	asrs	r4, r4, #2
 8009882:	2600      	movs	r6, #0
 8009884:	42a6      	cmp	r6, r4
 8009886:	d109      	bne.n	800989c <__libc_init_array+0x24>
 8009888:	4d0b      	ldr	r5, [pc, #44]	; (80098b8 <__libc_init_array+0x40>)
 800988a:	4c0c      	ldr	r4, [pc, #48]	; (80098bc <__libc_init_array+0x44>)
 800988c:	f000 f820 	bl	80098d0 <_init>
 8009890:	1b64      	subs	r4, r4, r5
 8009892:	10a4      	asrs	r4, r4, #2
 8009894:	2600      	movs	r6, #0
 8009896:	42a6      	cmp	r6, r4
 8009898:	d105      	bne.n	80098a6 <__libc_init_array+0x2e>
 800989a:	bd70      	pop	{r4, r5, r6, pc}
 800989c:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a0:	4798      	blx	r3
 80098a2:	3601      	adds	r6, #1
 80098a4:	e7ee      	b.n	8009884 <__libc_init_array+0xc>
 80098a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098aa:	4798      	blx	r3
 80098ac:	3601      	adds	r6, #1
 80098ae:	e7f2      	b.n	8009896 <__libc_init_array+0x1e>
 80098b0:	0800995c 	.word	0x0800995c
 80098b4:	0800995c 	.word	0x0800995c
 80098b8:	0800995c 	.word	0x0800995c
 80098bc:	08009960 	.word	0x08009960

080098c0 <memset>:
 80098c0:	4402      	add	r2, r0
 80098c2:	4603      	mov	r3, r0
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d100      	bne.n	80098ca <memset+0xa>
 80098c8:	4770      	bx	lr
 80098ca:	f803 1b01 	strb.w	r1, [r3], #1
 80098ce:	e7f9      	b.n	80098c4 <memset+0x4>

080098d0 <_init>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	bf00      	nop
 80098d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d6:	bc08      	pop	{r3}
 80098d8:	469e      	mov	lr, r3
 80098da:	4770      	bx	lr

080098dc <_fini>:
 80098dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098de:	bf00      	nop
 80098e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098e2:	bc08      	pop	{r3}
 80098e4:	469e      	mov	lr, r3
 80098e6:	4770      	bx	lr
