
f411_usb_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009894  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08009a2c  08009a2c  00019a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a90  08009a90  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a90  08009a90  00019a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a98  08009a98  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a9c  08009a9c  00019a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08009aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047a0  2000012c  08009bcc  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200048cc  08009bcc  000248cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019713  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045f6  00000000  00000000  0003986f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0003de68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  0003f400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8f3  00000000  00000000  00040770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0fe  00000000  00000000  0005d063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009df31  00000000  00000000  0007b161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119092  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005794  00000000  00000000  001190e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000012c 	.word	0x2000012c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009a14 	.word	0x08009a14

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000130 	.word	0x20000130
 80001d4:	08009a14 	.word	0x08009a14

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004e2:	463b      	mov	r3, r7
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <MX_ADC1_Init+0x98>)
 80004f0:	4a21      	ldr	r2, [pc, #132]	; (8000578 <MX_ADC1_Init+0x9c>)
 80004f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004f4:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <MX_ADC1_Init+0x98>)
 80004f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fc:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_ADC1_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_ADC1_Init+0x98>)
 800050a:	2200      	movs	r2, #0
 800050c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050e:	4b19      	ldr	r3, [pc, #100]	; (8000574 <MX_ADC1_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_ADC1_Init+0x98>)
 800051e:	4a17      	ldr	r2, [pc, #92]	; (800057c <MX_ADC1_Init+0xa0>)
 8000520:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_ADC1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_ADC1_Init+0x98>)
 800052a:	2201      	movs	r2, #1
 800052c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_ADC1_Init+0x98>)
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_ADC1_Init+0x98>)
 8000538:	2201      	movs	r2, #1
 800053a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053c:	480d      	ldr	r0, [pc, #52]	; (8000574 <MX_ADC1_Init+0x98>)
 800053e:	f000 fcb5 	bl	8000eac <HAL_ADC_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000548:	f000 faee 	bl	8000b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800054c:	2306      	movs	r3, #6
 800054e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000550:	2301      	movs	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_ADC1_Init+0x98>)
 800055e:	f000 fce9 	bl	8000f34 <HAL_ADC_ConfigChannel>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000568:	f000 fade 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000148 	.word	0x20000148
 8000578:	40012000 	.word	0x40012000
 800057c:	0f000001 	.word	0x0f000001

08000580 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a17      	ldr	r2, [pc, #92]	; (80005fc <HAL_ADC_MspInit+0x7c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d127      	bne.n	80005f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005aa:	4a15      	ldr	r2, [pc, #84]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b0:	6453      	str	r3, [r2, #68]	; 0x44
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005da:	2340      	movs	r3, #64	; 0x40
 80005dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005de:	2303      	movs	r3, #3
 80005e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4805      	ldr	r0, [pc, #20]	; (8000604 <HAL_ADC_MspInit+0x84>)
 80005ee:	f001 fbdd 	bl	8001dac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	; 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40012000 	.word	0x40012000
 8000600:	40023800 	.word	0x40023800
 8000604:	40020000 	.word	0x40020000

08000608 <Audio_Player_Play>:
#define DMA_MAX_SZE                     0xFFFF
#define DMA_MAX(_X_)                (((_X_) <= DMA_MAX_SZE)? (_X_):DMA_MAX_SZE)
#define AUDIODATA_SIZE                  2   /* 16-bits audio data size */

void Audio_Player_Play(uint8_t* pBuffer, uint32_t Size)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	if(Size > 0xFFFF) {
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000618:	d307      	bcc.n	800062a <Audio_Player_Play+0x22>
		Size = 0xFFFF;
 800061a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061e:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <Audio_Player_Play+0x38>)
 8000626:	f001 fd5e 	bl	80020e6 <HAL_GPIO_TogglePin>
	}
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)pBuffer, Size);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	b29b      	uxth	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	4804      	ldr	r0, [pc, #16]	; (8000644 <Audio_Player_Play+0x3c>)
 8000634:	f001 feb2 	bl	800239c <HAL_I2S_Transmit_DMA>
//	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020800 	.word	0x40020800
 8000644:	20000198 	.word	0x20000198

08000648 <Audio_Player_Stop>:
{
	HAL_I2S_DMAResume(&hi2s2);
}

void Audio_Player_Stop(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	HAL_I2S_DMAStop(&hi2s2);
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <Audio_Player_Stop+0x10>)
 800064e:	f001 ff4d 	bl	80024ec <HAL_I2S_DMAStop>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000198 	.word	0x20000198

0800065c <HAL_I2S_TxHalfCpltCallback>:
{
//	WM8978_VolumeCtl(vol);
}

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <HAL_I2S_TxHalfCpltCallback+0x20>)
 800066a:	f001 fd3c 	bl	80020e6 <HAL_GPIO_TogglePin>
	HalfTransfer_CallBack_FS();
 800066e:	f008 fd81 	bl	8009174 <HalfTransfer_CallBack_FS>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40020800 	.word	0x40020800

08000680 <HAL_I2S_TxCpltCallback>:


void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <HAL_I2S_TxCpltCallback+0x20>)
 800068e:	f001 fd2a 	bl	80020e6 <HAL_GPIO_TogglePin>
	TransferComplete_CallBack_FS();
 8000692:	f008 fd65 	bl	8009160 <TransferComplete_CallBack_FS>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020800 	.word	0x40020800

080006a4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_CRC_Init+0x20>)
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <MX_CRC_Init+0x24>)
 80006ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_CRC_Init+0x20>)
 80006b0:	f000 ff7f 	bl	80015b2 <HAL_CRC_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ba:	f000 fa35 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000190 	.word	0x20000190
 80006c8:	40023000 	.word	0x40023000

080006cc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <HAL_CRC_MspInit+0x3c>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d10d      	bne.n	80006fa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <HAL_CRC_MspInit+0x40>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a09      	ldr	r2, [pc, #36]	; (800070c <HAL_CRC_MspInit+0x40>)
 80006e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <HAL_CRC_MspInit+0x40>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023000 	.word	0x40023000
 800070c:	40023800 	.word	0x40023800

08000710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_DMA_Init+0x3c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <MX_DMA_Init+0x3c>)
 8000720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_DMA_Init+0x3c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	200f      	movs	r0, #15
 8000738:	f000 ff05 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800073c:	200f      	movs	r0, #15
 800073e:	f000 ff1e 	bl	800157e <HAL_NVIC_EnableIRQ>

}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800

08000750 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b42      	ldr	r3, [pc, #264]	; (8000874 <MX_GPIO_Init+0x124>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a41      	ldr	r2, [pc, #260]	; (8000874 <MX_GPIO_Init+0x124>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b3f      	ldr	r3, [pc, #252]	; (8000874 <MX_GPIO_Init+0x124>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <MX_GPIO_Init+0x124>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a3a      	ldr	r2, [pc, #232]	; (8000874 <MX_GPIO_Init+0x124>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b38      	ldr	r3, [pc, #224]	; (8000874 <MX_GPIO_Init+0x124>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <MX_GPIO_Init+0x124>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a33      	ldr	r2, [pc, #204]	; (8000874 <MX_GPIO_Init+0x124>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <MX_GPIO_Init+0x124>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <MX_GPIO_Init+0x124>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a2c      	ldr	r2, [pc, #176]	; (8000874 <MX_GPIO_Init+0x124>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <MX_GPIO_Init+0x124>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LINK_LED_GPIO_Port, LINK_LED_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007dc:	4826      	ldr	r0, [pc, #152]	; (8000878 <MX_GPIO_Init+0x128>)
 80007de:	f001 fc69 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIVE_LED_Pin|DMP_Pin|FLT_Pin|FMT_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80007e8:	4824      	ldr	r0, [pc, #144]	; (800087c <MX_GPIO_Init+0x12c>)
 80007ea:	f001 fc63 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XMT_GPIO_Port, XMT_Pin, GPIO_PIN_SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f4:	4821      	ldr	r0, [pc, #132]	; (800087c <MX_GPIO_Init+0x12c>)
 80007f6:	f001 fc5d 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LINK_LED_Pin;
 80007fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LINK_LED_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4819      	ldr	r0, [pc, #100]	; (8000878 <MX_GPIO_Init+0x128>)
 8000814:	f001 faca 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MUTE_Pin;
 8000818:	2301      	movs	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MUTE_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4815      	ldr	r0, [pc, #84]	; (8000880 <MX_GPIO_Init+0x130>)
 800082c:	f001 fabe 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIVE_LED_Pin;
 8000830:	2308      	movs	r3, #8
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIVE_LED_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_GPIO_Init+0x12c>)
 8000848:	f001 fab0 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DMP_Pin|FLT_Pin|FMT_Pin|XMT_Pin;
 800084c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_GPIO_Init+0x12c>)
 8000866:	f001 faa1 	bl	8001dac <HAL_GPIO_Init>

}
 800086a:	bf00      	nop
 800086c:	3728      	adds	r7, #40	; 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40020800 	.word	0x40020800
 800087c:	40020400 	.word	0x40020400
 8000880:	40020000 	.word	0x40020000

08000884 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_I2S2_Init+0x54>)
 800088a:	4a14      	ldr	r2, [pc, #80]	; (80008dc <MX_I2S2_Init+0x58>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_I2S2_Init+0x54>)
 8000890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000894:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_I2S2_Init+0x54>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_I2S2_Init+0x54>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_I2S2_Init+0x54>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_I2S2_Init+0x54>)
 80008aa:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80008ae:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_I2S2_Init+0x54>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_I2S2_Init+0x54>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_I2S2_Init+0x54>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_I2S2_Init+0x54>)
 80008c4:	f001 fc2a 	bl	800211c <HAL_I2S_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80008ce:	f000 f92b 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000198 	.word	0x20000198
 80008dc:	40003800 	.word	0x40003800

080008e0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b090      	sub	sp, #64	; 0x40
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI2)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a3f      	ldr	r2, [pc, #252]	; (8000a0c <HAL_I2S_MspInit+0x12c>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d177      	bne.n	8000a04 <HAL_I2S_MspInit+0x124>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000914:	2301      	movs	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000918:	23c0      	movs	r3, #192	; 0xc0
 800091a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 800091c:	2310      	movs	r3, #16
 800091e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8000920:	2306      	movs	r3, #6
 8000922:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4618      	mov	r0, r3
 800092a:	f004 fa57 	bl	8004ddc <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8000934:	f000 f8f8 	bl	8000b28 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <HAL_I2S_MspInit+0x130>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a33      	ldr	r2, [pc, #204]	; (8000a10 <HAL_I2S_MspInit+0x130>)
 8000942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
 8000948:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <HAL_I2S_MspInit+0x130>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <HAL_I2S_MspInit+0x130>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a2c      	ldr	r2, [pc, #176]	; (8000a10 <HAL_I2S_MspInit+0x130>)
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <HAL_I2S_MspInit+0x130>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 0302 	and.w	r3, r3, #2
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8000970:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000982:	2305      	movs	r3, #5
 8000984:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098a:	4619      	mov	r1, r3
 800098c:	4821      	ldr	r0, [pc, #132]	; (8000a14 <HAL_I2S_MspInit+0x134>)
 800098e:	f001 fa0d 	bl	8001dac <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000992:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 8000994:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <HAL_I2S_MspInit+0x13c>)
 8000996:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 800099a:	2200      	movs	r2, #0
 800099c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 80009a0:	2240      	movs	r2, #64	; 0x40
 80009a2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 80009ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 80009b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009b8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 80009bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 80009ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009ce:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 80009d8:	2203      	movs	r2, #3
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 80009de:	2200      	movs	r2, #0
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 80009ea:	f000 fdff 	bl	80015ec <HAL_DMA_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <HAL_I2S_MspInit+0x118>
    {
      Error_Handler();
 80009f4:	f000 f898 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 80009fc:	639a      	str	r2, [r3, #56]	; 0x38
 80009fe:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <HAL_I2S_MspInit+0x138>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a04:	bf00      	nop
 8000a06:	3740      	adds	r7, #64	; 0x40
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40003800 	.word	0x40003800
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400
 8000a18:	200001e0 	.word	0x200001e0
 8000a1c:	40026070 	.word	0x40026070

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a24:	f000 f9ac 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a28:	f000 f814 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2c:	f7ff fe90 	bl	8000750 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a30:	f7ff fe6e 	bl	8000710 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a34:	f7ff fd52 	bl	80004dc <MX_ADC1_Init>
  MX_I2S2_Init();
 8000a38:	f7ff ff24 	bl	8000884 <MX_I2S2_Init>
  MX_CRC_Init();
 8000a3c:	f7ff fe32 	bl	80006a4 <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 8000a40:	f008 faf2 	bl	8009028 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000a44:	f000 f8f8 	bl	8000c38 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000a48:	4801      	ldr	r0, [pc, #4]	; (8000a50 <main+0x30>)
 8000a4a:	f004 fb67 	bl	800511c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <main+0x2e>
 8000a50:	20000240 	.word	0x20000240

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	; 0x50
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	2230      	movs	r2, #48	; 0x30
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f008 ffce 	bl	8009a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <SystemClock_Config+0xcc>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	4a27      	ldr	r2, [pc, #156]	; (8000b20 <SystemClock_Config+0xcc>)
 8000a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a86:	6413      	str	r3, [r2, #64]	; 0x40
 8000a88:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <SystemClock_Config+0xcc>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <SystemClock_Config+0xd0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a21      	ldr	r2, [pc, #132]	; (8000b24 <SystemClock_Config+0xd0>)
 8000a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <SystemClock_Config+0xd0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ac4:	2319      	movs	r3, #25
 8000ac6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ac8:	23c0      	movs	r3, #192	; 0xc0
 8000aca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0320 	add.w	r3, r7, #32
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 fd43 	bl	8004564 <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae4:	f000 f820 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	230f      	movs	r3, #15
 8000aea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2302      	movs	r3, #2
 8000aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	2103      	movs	r1, #3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 ffa5 	bl	8004a54 <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b10:	f000 f80a 	bl	8000b28 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000b14:	f004 f884 	bl	8004c20 <HAL_RCC_EnableCSS>
}
 8000b18:	bf00      	nop
 8000b1a:	3750      	adds	r7, #80	; 0x50
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40007000 	.word	0x40007000

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd0:	f000 f928 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <DMA1_Stream4_IRQHandler+0x10>)
 8000bde:	f000 fe7b 	bl	80018d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200001e0 	.word	0x200001e0

08000bec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bf2:	f004 faf5 	bl	80051e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000240 	.word	0x20000240

08000c00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <OTG_FS_IRQHandler+0x10>)
 8000c06:	f002 fb7f 	bl	8003308 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000076c 	.word	0x2000076c

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_TIM1_Init+0x9c>)
 8000c56:	4a20      	ldr	r2, [pc, #128]	; (8000cd8 <MX_TIM1_Init+0xa0>)
 8000c58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65535;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_TIM1_Init+0x9c>)
 8000c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_TIM1_Init+0x9c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_TIM1_Init+0x9c>)
 8000c6a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000c6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_TIM1_Init+0x9c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_TIM1_Init+0x9c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_TIM1_Init+0x9c>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c82:	4814      	ldr	r0, [pc, #80]	; (8000cd4 <MX_TIM1_Init+0x9c>)
 8000c84:	f004 f9fa 	bl	800507c <HAL_TIM_Base_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c8e:	f7ff ff4b 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MX_TIM1_Init+0x9c>)
 8000ca0:	f004 fba6 	bl	80053f0 <HAL_TIM_ConfigClockSource>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000caa:	f7ff ff3d 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <MX_TIM1_Init+0x9c>)
 8000cbc:	f004 fdac 	bl	8005818 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000cc6:	f7ff ff2f 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000240 	.word	0x20000240
 8000cd8:	40010000 	.word	0x40010000

08000cdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_TIM_Base_MspInit+0x48>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d115      	bne.n	8000d1a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <HAL_TIM_Base_MspInit+0x4c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <HAL_TIM_Base_MspInit+0x4c>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_TIM_Base_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2019      	movs	r0, #25
 8000d10:	f000 fc19 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d14:	2019      	movs	r0, #25
 8000d16:	f000 fc32 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40010000 	.word	0x40010000
 8000d28:	40023800 	.word	0x40023800

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d32:	490e      	ldr	r1, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d48:	4c0b      	ldr	r4, [pc, #44]	; (8000d78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d56:	f7ff ff5d 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f008 fe2f 	bl	80099bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5e:	f7ff fe5f 	bl	8000a20 <main>
  bx  lr    
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8000d70:	08009aa0 	.word	0x08009aa0
  ldr r2, =_sbss
 8000d74:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8000d78:	200048cc 	.word	0x200048cc

08000d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <HAL_Init+0x40>)
 8000d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_Init+0x40>)
 8000d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_Init+0x40>)
 8000da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 fbc1 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	200f      	movs	r0, #15
 8000db0:	f000 f808 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff febe 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023c00 	.word	0x40023c00

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x54>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x58>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fbd9 	bl	800159a <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00e      	b.n	8000e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d80a      	bhi.n	8000e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 fba1 	bl	8001546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_InitTick+0x5c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000288 	.word	0x20000288

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000288 	.word	0x20000288

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff ffee 	bl	8000e4c <HAL_GetTick>
 8000e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8a:	bf00      	nop
 8000e8c:	f7ff ffde 	bl	8000e4c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008

08000eac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e033      	b.n	8000f2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d109      	bne.n	8000ede <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fb58 	bl	8000580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d118      	bne.n	8000f1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ef2:	f023 0302 	bic.w	r3, r3, #2
 8000ef6:	f043 0202 	orr.w	r2, r3, #2
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 f94a 	bl	8001198 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f023 0303 	bic.w	r3, r3, #3
 8000f12:	f043 0201 	orr.w	r2, r3, #1
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	641a      	str	r2, [r3, #64]	; 0x40
 8000f1a:	e001      	b.n	8000f20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <HAL_ADC_ConfigChannel+0x1c>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	e113      	b.n	8001178 <HAL_ADC_ConfigChannel+0x244>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b09      	cmp	r3, #9
 8000f5e:	d925      	bls.n	8000fac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68d9      	ldr	r1, [r3, #12]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	3b1e      	subs	r3, #30
 8000f76:	2207      	movs	r2, #7
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43da      	mvns	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	400a      	ands	r2, r1
 8000f84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68d9      	ldr	r1, [r3, #12]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	4603      	mov	r3, r0
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4403      	add	r3, r0
 8000f9e:	3b1e      	subs	r3, #30
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	e022      	b.n	8000ff2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6919      	ldr	r1, [r3, #16]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	400a      	ands	r2, r1
 8000fce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6919      	ldr	r1, [r3, #16]
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4403      	add	r3, r0
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d824      	bhi.n	8001044 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	3b05      	subs	r3, #5
 800100c:	221f      	movs	r2, #31
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	400a      	ands	r2, r1
 800101a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	b29b      	uxth	r3, r3
 8001028:	4618      	mov	r0, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	3b05      	subs	r3, #5
 8001036:	fa00 f203 	lsl.w	r2, r0, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	635a      	str	r2, [r3, #52]	; 0x34
 8001042:	e04c      	b.n	80010de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b0c      	cmp	r3, #12
 800104a:	d824      	bhi.n	8001096 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	3b23      	subs	r3, #35	; 0x23
 800105e:	221f      	movs	r2, #31
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43da      	mvns	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	400a      	ands	r2, r1
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	b29b      	uxth	r3, r3
 800107a:	4618      	mov	r0, r3
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	3b23      	subs	r3, #35	; 0x23
 8001088:	fa00 f203 	lsl.w	r2, r0, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	631a      	str	r2, [r3, #48]	; 0x30
 8001094:	e023      	b.n	80010de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	3b41      	subs	r3, #65	; 0x41
 80010a8:	221f      	movs	r2, #31
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	400a      	ands	r2, r1
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	3b41      	subs	r3, #65	; 0x41
 80010d2:	fa00 f203 	lsl.w	r2, r0, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010de:	4b29      	ldr	r3, [pc, #164]	; (8001184 <HAL_ADC_ConfigChannel+0x250>)
 80010e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a28      	ldr	r2, [pc, #160]	; (8001188 <HAL_ADC_ConfigChannel+0x254>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d10f      	bne.n	800110c <HAL_ADC_ConfigChannel+0x1d8>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b12      	cmp	r3, #18
 80010f2:	d10b      	bne.n	800110c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_ADC_ConfigChannel+0x254>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12b      	bne.n	800116e <HAL_ADC_ConfigChannel+0x23a>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a1c      	ldr	r2, [pc, #112]	; (800118c <HAL_ADC_ConfigChannel+0x258>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d003      	beq.n	8001128 <HAL_ADC_ConfigChannel+0x1f4>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b11      	cmp	r3, #17
 8001126:	d122      	bne.n	800116e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a11      	ldr	r2, [pc, #68]	; (800118c <HAL_ADC_ConfigChannel+0x258>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d111      	bne.n	800116e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_ADC_ConfigChannel+0x25c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_ADC_ConfigChannel+0x260>)
 8001150:	fba2 2303 	umull	r2, r3, r2, r3
 8001154:	0c9a      	lsrs	r2, r3, #18
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001160:	e002      	b.n	8001168 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3b01      	subs	r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f9      	bne.n	8001162 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40012300 	.word	0x40012300
 8001188:	40012000 	.word	0x40012000
 800118c:	10000012 	.word	0x10000012
 8001190:	20000000 	.word	0x20000000
 8001194:	431bde83 	.word	0x431bde83

08001198 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011a0:	4b79      	ldr	r3, [pc, #484]	; (8001388 <ADC_Init+0x1f0>)
 80011a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6859      	ldr	r1, [r3, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	021a      	lsls	r2, r3, #8
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6859      	ldr	r1, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6899      	ldr	r1, [r3, #8]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68da      	ldr	r2, [r3, #12]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	4a58      	ldr	r2, [pc, #352]	; (800138c <ADC_Init+0x1f4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d022      	beq.n	8001276 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800123e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6899      	ldr	r1, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6899      	ldr	r1, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	e00f      	b.n	8001296 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001294:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0202 	bic.w	r2, r2, #2
 80012a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6899      	ldr	r1, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7e1b      	ldrb	r3, [r3, #24]
 80012b0:	005a      	lsls	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d01b      	beq.n	80012fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6859      	ldr	r1, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	3b01      	subs	r3, #1
 80012f0:	035a      	lsls	r2, r3, #13
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	e007      	b.n	800130c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800130a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	3b01      	subs	r3, #1
 8001328:	051a      	lsls	r2, r3, #20
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6899      	ldr	r1, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800134e:	025a      	lsls	r2, r3, #9
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6899      	ldr	r1, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	029a      	lsls	r2, r3, #10
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	609a      	str	r2, [r3, #8]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40012300 	.word	0x40012300
 800138c:	0f000001 	.word	0x0f000001

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff8e 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff29 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff3e 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff8e 	bl	8001484 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff31 	bl	80013f4 <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffa2 	bl	80014ec <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e00e      	b.n	80015e2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	795b      	ldrb	r3, [r3, #5]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d105      	bne.n	80015da <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff f879 	bl	80006cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff fc28 	bl	8000e4c <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e099      	b.n	800173c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001628:	e00f      	b.n	800164a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800162a:	f7ff fc0f 	bl	8000e4c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b05      	cmp	r3, #5
 8001636:	d908      	bls.n	800164a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2220      	movs	r2, #32
 800163c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2203      	movs	r2, #3
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e078      	b.n	800173c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e8      	bne.n	800162a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_DMA_Init+0x158>)
 8001664:	4013      	ands	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001676:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4313      	orrs	r3, r2
 800169a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d107      	bne.n	80016b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	4313      	orrs	r3, r2
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f023 0307 	bic.w	r3, r3, #7
 80016ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d117      	bne.n	800170e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00e      	beq.n	800170e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 fadf 	bl	8001cb4 <DMA_CheckFifoParam>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800170a:	2301      	movs	r3, #1
 800170c:	e016      	b.n	800173c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 fa96 	bl	8001c48 <DMA_CalcBaseAndBitshift>
 800171c:	4603      	mov	r3, r0
 800171e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	223f      	movs	r2, #63	; 0x3f
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	f010803f 	.word	0xf010803f

08001748 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_DMA_Start_IT+0x26>
 800176a:	2302      	movs	r3, #2
 800176c:	e040      	b.n	80017f0 <HAL_DMA_Start_IT+0xa8>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b01      	cmp	r3, #1
 8001780:	d12f      	bne.n	80017e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2202      	movs	r2, #2
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 fa28 	bl	8001bec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	223f      	movs	r2, #63	; 0x3f
 80017a2:	409a      	lsls	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0216 	orr.w	r2, r2, #22
 80017b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0208 	orr.w	r2, r2, #8
 80017ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e005      	b.n	80017ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017ea:	2302      	movs	r3, #2
 80017ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001806:	f7ff fb21 	bl	8000e4c <HAL_GetTick>
 800180a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d008      	beq.n	800182a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e052      	b.n	80018d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0216 	bic.w	r2, r2, #22
 8001838:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001848:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	d103      	bne.n	800185a <HAL_DMA_Abort+0x62>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0208 	bic.w	r2, r2, #8
 8001868:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0201 	bic.w	r2, r2, #1
 8001878:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800187a:	e013      	b.n	80018a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800187c:	f7ff fae6 	bl	8000e4c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b05      	cmp	r3, #5
 8001888:	d90c      	bls.n	80018a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2220      	movs	r2, #32
 800188e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2203      	movs	r2, #3
 8001894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e015      	b.n	80018d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1e4      	bne.n	800187c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	223f      	movs	r2, #63	; 0x3f
 80018b8:	409a      	lsls	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018e4:	4b8e      	ldr	r3, [pc, #568]	; (8001b20 <HAL_DMA_IRQHandler+0x248>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a8e      	ldr	r2, [pc, #568]	; (8001b24 <HAL_DMA_IRQHandler+0x24c>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	0a9b      	lsrs	r3, r3, #10
 80018f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	2208      	movs	r2, #8
 8001904:	409a      	lsls	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4013      	ands	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d01a      	beq.n	8001944 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0204 	bic.w	r2, r2, #4
 800192a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001930:	2208      	movs	r2, #8
 8001932:	409a      	lsls	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193c:	f043 0201 	orr.w	r2, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001948:	2201      	movs	r2, #1
 800194a:	409a      	lsls	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d012      	beq.n	800197a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00b      	beq.n	800197a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001966:	2201      	movs	r2, #1
 8001968:	409a      	lsls	r2, r3
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001972:	f043 0202 	orr.w	r2, r3, #2
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197e:	2204      	movs	r2, #4
 8001980:	409a      	lsls	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4013      	ands	r3, r2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d012      	beq.n	80019b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00b      	beq.n	80019b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199c:	2204      	movs	r2, #4
 800199e:	409a      	lsls	r2, r3
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a8:	f043 0204 	orr.w	r2, r3, #4
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b4:	2210      	movs	r2, #16
 80019b6:	409a      	lsls	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d043      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d03c      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d2:	2210      	movs	r2, #16
 80019d4:	409a      	lsls	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d018      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d108      	bne.n	8001a08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d024      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	4798      	blx	r3
 8001a06:	e01f      	b.n	8001a48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01b      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
 8001a18:	e016      	b.n	8001a48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d107      	bne.n	8001a38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0208 	bic.w	r2, r2, #8
 8001a36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 808f 	beq.w	8001b78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 8087 	beq.w	8001b78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6e:	2220      	movs	r2, #32
 8001a70:	409a      	lsls	r2, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b05      	cmp	r3, #5
 8001a80:	d136      	bne.n	8001af0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0216 	bic.w	r2, r2, #22
 8001a90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aa0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d103      	bne.n	8001ab2 <HAL_DMA_IRQHandler+0x1da>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d007      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0208 	bic.w	r2, r2, #8
 8001ac0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac6:	223f      	movs	r2, #63	; 0x3f
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d07e      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	4798      	blx	r3
        }
        return;
 8001aee:	e079      	b.n	8001be4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d01d      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10d      	bne.n	8001b28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d031      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	4798      	blx	r3
 8001b1c:	e02c      	b.n	8001b78 <HAL_DMA_IRQHandler+0x2a0>
 8001b1e:	bf00      	nop
 8001b20:	20000000 	.word	0x20000000
 8001b24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d023      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	4798      	blx	r3
 8001b38:	e01e      	b.n	8001b78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10f      	bne.n	8001b68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0210 	bic.w	r2, r2, #16
 8001b56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d032      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d022      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2205      	movs	r2, #5
 8001b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0201 	bic.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d307      	bcc.n	8001bc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f2      	bne.n	8001ba4 <HAL_DMA_IRQHandler+0x2cc>
 8001bbe:	e000      	b.n	8001bc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	4798      	blx	r3
 8001be2:	e000      	b.n	8001be6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001be4:	bf00      	nop
    }
  }
}
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b40      	cmp	r3, #64	; 0x40
 8001c18:	d108      	bne.n	8001c2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c2a:	e007      	b.n	8001c3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	60da      	str	r2, [r3, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	3b10      	subs	r3, #16
 8001c58:	4a14      	ldr	r2, [pc, #80]	; (8001cac <DMA_CalcBaseAndBitshift+0x64>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c62:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <DMA_CalcBaseAndBitshift+0x68>)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d909      	bls.n	8001c8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c7e:	f023 0303 	bic.w	r3, r3, #3
 8001c82:	1d1a      	adds	r2, r3, #4
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	659a      	str	r2, [r3, #88]	; 0x58
 8001c88:	e007      	b.n	8001c9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c92:	f023 0303 	bic.w	r3, r3, #3
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	aaaaaaab 	.word	0xaaaaaaab
 8001cb0:	08009a88 	.word	0x08009a88

08001cb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d11f      	bne.n	8001d0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d856      	bhi.n	8001d82 <DMA_CheckFifoParam+0xce>
 8001cd4:	a201      	add	r2, pc, #4	; (adr r2, 8001cdc <DMA_CheckFifoParam+0x28>)
 8001cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cda:	bf00      	nop
 8001cdc:	08001ced 	.word	0x08001ced
 8001ce0:	08001cff 	.word	0x08001cff
 8001ce4:	08001ced 	.word	0x08001ced
 8001ce8:	08001d83 	.word	0x08001d83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d046      	beq.n	8001d86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cfc:	e043      	b.n	8001d86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d06:	d140      	bne.n	8001d8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d0c:	e03d      	b.n	8001d8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d16:	d121      	bne.n	8001d5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d837      	bhi.n	8001d8e <DMA_CheckFifoParam+0xda>
 8001d1e:	a201      	add	r2, pc, #4	; (adr r2, 8001d24 <DMA_CheckFifoParam+0x70>)
 8001d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d24:	08001d35 	.word	0x08001d35
 8001d28:	08001d3b 	.word	0x08001d3b
 8001d2c:	08001d35 	.word	0x08001d35
 8001d30:	08001d4d 	.word	0x08001d4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
      break;
 8001d38:	e030      	b.n	8001d9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d025      	beq.n	8001d92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d4a:	e022      	b.n	8001d92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d54:	d11f      	bne.n	8001d96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d5a:	e01c      	b.n	8001d96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d903      	bls.n	8001d6a <DMA_CheckFifoParam+0xb6>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d003      	beq.n	8001d70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d68:	e018      	b.n	8001d9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d6e:	e015      	b.n	8001d9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00e      	beq.n	8001d9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d80:	e00b      	b.n	8001d9a <DMA_CheckFifoParam+0xe6>
      break;
 8001d82:	bf00      	nop
 8001d84:	e00a      	b.n	8001d9c <DMA_CheckFifoParam+0xe8>
      break;
 8001d86:	bf00      	nop
 8001d88:	e008      	b.n	8001d9c <DMA_CheckFifoParam+0xe8>
      break;
 8001d8a:	bf00      	nop
 8001d8c:	e006      	b.n	8001d9c <DMA_CheckFifoParam+0xe8>
      break;
 8001d8e:	bf00      	nop
 8001d90:	e004      	b.n	8001d9c <DMA_CheckFifoParam+0xe8>
      break;
 8001d92:	bf00      	nop
 8001d94:	e002      	b.n	8001d9c <DMA_CheckFifoParam+0xe8>
      break;   
 8001d96:	bf00      	nop
 8001d98:	e000      	b.n	8001d9c <DMA_CheckFifoParam+0xe8>
      break;
 8001d9a:	bf00      	nop
    }
  } 
  
  return status; 
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	e159      	b.n	800207c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dc8:	2201      	movs	r2, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f040 8148 	bne.w	8002076 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d005      	beq.n	8001dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d130      	bne.n	8001e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e34:	2201      	movs	r2, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 0201 	and.w	r2, r3, #1
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d017      	beq.n	8001e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d123      	bne.n	8001ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	08da      	lsrs	r2, r3, #3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3208      	adds	r2, #8
 8001eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	08da      	lsrs	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3208      	adds	r2, #8
 8001eea:	69b9      	ldr	r1, [r7, #24]
 8001eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0203 	and.w	r2, r3, #3
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80a2 	beq.w	8002076 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b57      	ldr	r3, [pc, #348]	; (8002094 <HAL_GPIO_Init+0x2e8>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a56      	ldr	r2, [pc, #344]	; (8002094 <HAL_GPIO_Init+0x2e8>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	4b54      	ldr	r3, [pc, #336]	; (8002094 <HAL_GPIO_Init+0x2e8>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f4e:	4a52      	ldr	r2, [pc, #328]	; (8002098 <HAL_GPIO_Init+0x2ec>)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3302      	adds	r3, #2
 8001f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	220f      	movs	r2, #15
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a49      	ldr	r2, [pc, #292]	; (800209c <HAL_GPIO_Init+0x2f0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d019      	beq.n	8001fae <HAL_GPIO_Init+0x202>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a48      	ldr	r2, [pc, #288]	; (80020a0 <HAL_GPIO_Init+0x2f4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <HAL_GPIO_Init+0x1fe>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a47      	ldr	r2, [pc, #284]	; (80020a4 <HAL_GPIO_Init+0x2f8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00d      	beq.n	8001fa6 <HAL_GPIO_Init+0x1fa>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a46      	ldr	r2, [pc, #280]	; (80020a8 <HAL_GPIO_Init+0x2fc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <HAL_GPIO_Init+0x1f6>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a45      	ldr	r2, [pc, #276]	; (80020ac <HAL_GPIO_Init+0x300>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <HAL_GPIO_Init+0x1f2>
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	e008      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e004      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e002      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	f002 0203 	and.w	r2, r2, #3
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	4093      	lsls	r3, r2
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc0:	4935      	ldr	r1, [pc, #212]	; (8002098 <HAL_GPIO_Init+0x2ec>)
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fce:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ff2:	4a2f      	ldr	r2, [pc, #188]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800201c:	4a24      	ldr	r2, [pc, #144]	; (80020b0 <HAL_GPIO_Init+0x304>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002022:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002046:	4a1a      	ldr	r2, [pc, #104]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_GPIO_Init+0x304>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002070:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3301      	adds	r3, #1
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	2b0f      	cmp	r3, #15
 8002080:	f67f aea2 	bls.w	8001dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3724      	adds	r7, #36	; 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	40013800 	.word	0x40013800
 800209c:	40020000 	.word	0x40020000
 80020a0:	40020400 	.word	0x40020400
 80020a4:	40020800 	.word	0x40020800
 80020a8:	40020c00 	.word	0x40020c00
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40013c00 	.word	0x40013c00

080020b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
 80020c0:	4613      	mov	r3, r2
 80020c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c4:	787b      	ldrb	r3, [r7, #1]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020d0:	e003      	b.n	80020da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020d2:	887b      	ldrh	r3, [r7, #2]
 80020d4:	041a      	lsls	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	619a      	str	r2, [r3, #24]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	460b      	mov	r3, r1
 80020f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020f8:	887a      	ldrh	r2, [r7, #2]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4013      	ands	r3, r2
 80020fe:	041a      	lsls	r2, r3, #16
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	43d9      	mvns	r1, r3
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	400b      	ands	r3, r1
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	619a      	str	r2, [r3, #24]
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e128      	b.n	8002380 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a90      	ldr	r2, [pc, #576]	; (8002388 <HAL_I2S_Init+0x26c>)
 8002146:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7fe fbc9 	bl	80008e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002164:	f023 030f 	bic.w	r3, r3, #15
 8002168:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2202      	movs	r2, #2
 8002170:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d060      	beq.n	800223c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002182:	2310      	movs	r3, #16
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e001      	b.n	800218c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002188:	2320      	movs	r3, #32
 800218a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b20      	cmp	r3, #32
 8002192:	d802      	bhi.n	800219a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800219a:	2001      	movs	r0, #1
 800219c:	f002 ff0e 	bl	8004fbc <HAL_RCCEx_GetPeriphCLKFreq>
 80021a0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021aa:	d125      	bne.n	80021f8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	461a      	mov	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	3305      	adds	r3, #5
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	e01f      	b.n	8002216 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	461a      	mov	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	3305      	adds	r3, #5
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	e00e      	b.n	8002216 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	461a      	mov	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002212:	3305      	adds	r3, #5
 8002214:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4a5c      	ldr	r2, [pc, #368]	; (800238c <HAL_I2S_Init+0x270>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	08db      	lsrs	r3, r3, #3
 8002220:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	085b      	lsrs	r3, r3, #1
 8002232:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	e003      	b.n	8002244 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800223c:	2302      	movs	r3, #2
 800223e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d902      	bls.n	8002250 <HAL_I2S_Init+0x134>
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	2bff      	cmp	r3, #255	; 0xff
 800224e:	d907      	bls.n	8002260 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	f043 0210 	orr.w	r2, r3, #16
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e08f      	b.n	8002380 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	ea42 0103 	orr.w	r1, r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	430a      	orrs	r2, r1
 8002272:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800227e:	f023 030f 	bic.w	r3, r3, #15
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6851      	ldr	r1, [r2, #4]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6892      	ldr	r2, [r2, #8]
 800228a:	4311      	orrs	r1, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	68d2      	ldr	r2, [r2, #12]
 8002290:	4311      	orrs	r1, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6992      	ldr	r2, [r2, #24]
 8002296:	430a      	orrs	r2, r1
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d161      	bne.n	8002370 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a38      	ldr	r2, [pc, #224]	; (8002390 <HAL_I2S_Init+0x274>)
 80022b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a37      	ldr	r2, [pc, #220]	; (8002394 <HAL_I2S_Init+0x278>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d101      	bne.n	80022c0 <HAL_I2S_Init+0x1a4>
 80022bc:	4b36      	ldr	r3, [pc, #216]	; (8002398 <HAL_I2S_Init+0x27c>)
 80022be:	e001      	b.n	80022c4 <HAL_I2S_Init+0x1a8>
 80022c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	4932      	ldr	r1, [pc, #200]	; (8002394 <HAL_I2S_Init+0x278>)
 80022cc:	428a      	cmp	r2, r1
 80022ce:	d101      	bne.n	80022d4 <HAL_I2S_Init+0x1b8>
 80022d0:	4a31      	ldr	r2, [pc, #196]	; (8002398 <HAL_I2S_Init+0x27c>)
 80022d2:	e001      	b.n	80022d8 <HAL_I2S_Init+0x1bc>
 80022d4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80022d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80022dc:	f023 030f 	bic.w	r3, r3, #15
 80022e0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a2b      	ldr	r2, [pc, #172]	; (8002394 <HAL_I2S_Init+0x278>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d101      	bne.n	80022f0 <HAL_I2S_Init+0x1d4>
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_I2S_Init+0x27c>)
 80022ee:	e001      	b.n	80022f4 <HAL_I2S_Init+0x1d8>
 80022f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022f4:	2202      	movs	r2, #2
 80022f6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a25      	ldr	r2, [pc, #148]	; (8002394 <HAL_I2S_Init+0x278>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_I2S_Init+0x1ea>
 8002302:	4b25      	ldr	r3, [pc, #148]	; (8002398 <HAL_I2S_Init+0x27c>)
 8002304:	e001      	b.n	800230a <HAL_I2S_Init+0x1ee>
 8002306:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002316:	d003      	beq.n	8002320 <HAL_I2S_Init+0x204>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d103      	bne.n	8002328 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	e001      	b.n	800232c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002336:	4313      	orrs	r3, r2
 8002338:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002340:	4313      	orrs	r3, r2
 8002342:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800234a:	4313      	orrs	r3, r2
 800234c:	b29a      	uxth	r2, r3
 800234e:	897b      	ldrh	r3, [r7, #10]
 8002350:	4313      	orrs	r3, r2
 8002352:	b29b      	uxth	r3, r3
 8002354:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002358:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <HAL_I2S_Init+0x278>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d101      	bne.n	8002368 <HAL_I2S_Init+0x24c>
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_I2S_Init+0x27c>)
 8002366:	e001      	b.n	800236c <HAL_I2S_Init+0x250>
 8002368:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800236c:	897a      	ldrh	r2, [r7, #10]
 800236e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3720      	adds	r7, #32
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	08002a2d 	.word	0x08002a2d
 800238c:	cccccccd 	.word	0xcccccccd
 8002390:	08002bb5 	.word	0x08002bb5
 8002394:	40003800 	.word	0x40003800
 8002398:	40003400 	.word	0x40003400

0800239c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	4613      	mov	r3, r2
 80023a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_I2S_Transmit_DMA+0x1a>
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e08e      	b.n	80024d8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_I2S_Transmit_DMA+0x2e>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e086      	b.n	80024d8 <HAL_I2S_Transmit_DMA+0x13c>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d005      	beq.n	80023ea <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
 80023e8:	e076      	b.n	80024d8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2203      	movs	r2, #3
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d002      	beq.n	8002416 <HAL_I2S_Transmit_DMA+0x7a>
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2b05      	cmp	r3, #5
 8002414:	d10a      	bne.n	800242c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	; 0x2a
 800242a:	e005      	b.n	8002438 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	88fa      	ldrh	r2, [r7, #6]
 8002430:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	4a28      	ldr	r2, [pc, #160]	; (80024e0 <HAL_I2S_Transmit_DMA+0x144>)
 800243e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	4a27      	ldr	r2, [pc, #156]	; (80024e4 <HAL_I2S_Transmit_DMA+0x148>)
 8002446:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244c:	4a26      	ldr	r2, [pc, #152]	; (80024e8 <HAL_I2S_Transmit_DMA+0x14c>)
 800244e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002458:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002460:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002466:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002468:	f7ff f96e 	bl	8001748 <HAL_DMA_Start_IT>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00f      	beq.n	8002492 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f043 0208 	orr.w	r2, r3, #8
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e022      	b.n	80024d8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024ae:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d107      	bne.n	80024ce <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0202 	orr.w	r2, r2, #2
 80024cc:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	0800290b 	.word	0x0800290b
 80024e4:	080028c9 	.word	0x080028c9
 80024e8:	08002927 	.word	0x08002927

080024ec <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002500:	d004      	beq.n	800250c <HAL_I2S_DMAStop+0x20>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 80d1 	bne.w	80026ae <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00f      	beq.n	8002534 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff f96d 	bl	80017f8 <HAL_DMA_Abort>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002528:	f043 0208 	orr.w	r2, r3, #8
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002534:	2364      	movs	r3, #100	; 0x64
 8002536:	2201      	movs	r2, #1
 8002538:	2102      	movs	r1, #2
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fb00 	bl	8002b40 <I2S_WaitFlagStateUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800255e:	2364      	movs	r3, #100	; 0x64
 8002560:	2200      	movs	r2, #0
 8002562:	2180      	movs	r1, #128	; 0x80
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 faeb 	bl	8002b40 <I2S_WaitFlagStateUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	f043 0201 	orr.w	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002596:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0202 	bic.w	r2, r2, #2
 80025b4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b05      	cmp	r3, #5
 80025c0:	f040 8165 	bne.w	800288e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00f      	beq.n	80025ec <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff f911 	bl	80017f8 <HAL_DMA_Abort>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f043 0208 	orr.w	r2, r3, #8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a8a      	ldr	r2, [pc, #552]	; (800281c <HAL_I2S_DMAStop+0x330>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_I2S_DMAStop+0x10e>
 80025f6:	4b8a      	ldr	r3, [pc, #552]	; (8002820 <HAL_I2S_DMAStop+0x334>)
 80025f8:	e001      	b.n	80025fe <HAL_I2S_DMAStop+0x112>
 80025fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4985      	ldr	r1, [pc, #532]	; (800281c <HAL_I2S_DMAStop+0x330>)
 8002606:	428b      	cmp	r3, r1
 8002608:	d101      	bne.n	800260e <HAL_I2S_DMAStop+0x122>
 800260a:	4b85      	ldr	r3, [pc, #532]	; (8002820 <HAL_I2S_DMAStop+0x334>)
 800260c:	e001      	b.n	8002612 <HAL_I2S_DMAStop+0x126>
 800260e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002616:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8002618:	2300      	movs	r3, #0
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a7e      	ldr	r2, [pc, #504]	; (800281c <HAL_I2S_DMAStop+0x330>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <HAL_I2S_DMAStop+0x13e>
 8002626:	4b7e      	ldr	r3, [pc, #504]	; (8002820 <HAL_I2S_DMAStop+0x334>)
 8002628:	e001      	b.n	800262e <HAL_I2S_DMAStop+0x142>
 800262a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a79      	ldr	r2, [pc, #484]	; (800281c <HAL_I2S_DMAStop+0x330>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d101      	bne.n	8002640 <HAL_I2S_DMAStop+0x154>
 800263c:	4b78      	ldr	r3, [pc, #480]	; (8002820 <HAL_I2S_DMAStop+0x334>)
 800263e:	e001      	b.n	8002644 <HAL_I2S_DMAStop+0x158>
 8002640:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a73      	ldr	r2, [pc, #460]	; (800281c <HAL_I2S_DMAStop+0x330>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_I2S_DMAStop+0x16c>
 8002654:	4b72      	ldr	r3, [pc, #456]	; (8002820 <HAL_I2S_DMAStop+0x334>)
 8002656:	e001      	b.n	800265c <HAL_I2S_DMAStop+0x170>
 8002658:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	496e      	ldr	r1, [pc, #440]	; (800281c <HAL_I2S_DMAStop+0x330>)
 8002664:	428b      	cmp	r3, r1
 8002666:	d101      	bne.n	800266c <HAL_I2S_DMAStop+0x180>
 8002668:	4b6d      	ldr	r3, [pc, #436]	; (8002820 <HAL_I2S_DMAStop+0x334>)
 800266a:	e001      	b.n	8002670 <HAL_I2S_DMAStop+0x184>
 800266c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002670:	f022 0201 	bic.w	r2, r2, #1
 8002674:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10c      	bne.n	8002698 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002696:	e0fa      	b.n	800288e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a5f      	ldr	r2, [pc, #380]	; (800281c <HAL_I2S_DMAStop+0x330>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_I2S_DMAStop+0x1ba>
 80026a2:	4b5f      	ldr	r3, [pc, #380]	; (8002820 <HAL_I2S_DMAStop+0x334>)
 80026a4:	e001      	b.n	80026aa <HAL_I2S_DMAStop+0x1be>
 80026a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026aa:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80026ac:	e0ef      	b.n	800288e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026b6:	d005      	beq.n	80026c4 <HAL_I2S_DMAStop+0x1d8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c0:	f040 80e5 	bne.w	800288e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00f      	beq.n	80026ec <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff f891 	bl	80017f8 <HAL_DMA_Abort>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	f043 0208 	orr.w	r2, r3, #8
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	f040 809a 	bne.w	800282e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00f      	beq.n	8002722 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f876 	bl	80017f8 <HAL_DMA_Abort>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	f043 0208 	orr.w	r2, r3, #8
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8002722:	f7fe fb93 	bl	8000e4c <HAL_GetTick>
 8002726:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002728:	e012      	b.n	8002750 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800272a:	f7fe fb8f 	bl	8000e4c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b64      	cmp	r3, #100	; 0x64
 8002736:	d90b      	bls.n	8002750 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273c:	f043 0201 	orr.w	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a31      	ldr	r2, [pc, #196]	; (800281c <HAL_I2S_DMAStop+0x330>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_I2S_DMAStop+0x272>
 800275a:	4b31      	ldr	r3, [pc, #196]	; (8002820 <HAL_I2S_DMAStop+0x334>)
 800275c:	e001      	b.n	8002762 <HAL_I2S_DMAStop+0x276>
 800275e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b02      	cmp	r3, #2
 800276a:	d1de      	bne.n	800272a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800276c:	e012      	b.n	8002794 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800276e:	f7fe fb6d 	bl	8000e4c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b64      	cmp	r3, #100	; 0x64
 800277a:	d90b      	bls.n	8002794 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	f043 0201 	orr.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a20      	ldr	r2, [pc, #128]	; (800281c <HAL_I2S_DMAStop+0x330>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_I2S_DMAStop+0x2b6>
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <HAL_I2S_DMAStop+0x334>)
 80027a0:	e001      	b.n	80027a6 <HAL_I2S_DMAStop+0x2ba>
 80027a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ac:	2b80      	cmp	r3, #128	; 0x80
 80027ae:	d0de      	beq.n	800276e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a19      	ldr	r2, [pc, #100]	; (800281c <HAL_I2S_DMAStop+0x330>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d101      	bne.n	80027be <HAL_I2S_DMAStop+0x2d2>
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_I2S_DMAStop+0x334>)
 80027bc:	e001      	b.n	80027c2 <HAL_I2S_DMAStop+0x2d6>
 80027be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027c2:	69da      	ldr	r2, [r3, #28]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4914      	ldr	r1, [pc, #80]	; (800281c <HAL_I2S_DMAStop+0x330>)
 80027ca:	428b      	cmp	r3, r1
 80027cc:	d101      	bne.n	80027d2 <HAL_I2S_DMAStop+0x2e6>
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <HAL_I2S_DMAStop+0x334>)
 80027d0:	e001      	b.n	80027d6 <HAL_I2S_DMAStop+0x2ea>
 80027d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027da:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <HAL_I2S_DMAStop+0x330>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d101      	bne.n	80027ee <HAL_I2S_DMAStop+0x302>
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <HAL_I2S_DMAStop+0x334>)
 80027ec:	e001      	b.n	80027f2 <HAL_I2S_DMAStop+0x306>
 80027ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a07      	ldr	r2, [pc, #28]	; (800281c <HAL_I2S_DMAStop+0x330>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <HAL_I2S_DMAStop+0x31a>
 8002802:	4b07      	ldr	r3, [pc, #28]	; (8002820 <HAL_I2S_DMAStop+0x334>)
 8002804:	e001      	b.n	800280a <HAL_I2S_DMAStop+0x31e>
 8002806:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4902      	ldr	r1, [pc, #8]	; (800281c <HAL_I2S_DMAStop+0x330>)
 8002812:	428b      	cmp	r3, r1
 8002814:	d106      	bne.n	8002824 <HAL_I2S_DMAStop+0x338>
 8002816:	4b02      	ldr	r3, [pc, #8]	; (8002820 <HAL_I2S_DMAStop+0x334>)
 8002818:	e006      	b.n	8002828 <HAL_I2S_DMAStop+0x33c>
 800281a:	bf00      	nop
 800281c:	40003800 	.word	0x40003800
 8002820:	40003400 	.word	0x40003400
 8002824:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002828:	f022 0202 	bic.w	r2, r2, #2
 800282c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800283c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286c:	d10c      	bne.n	8002888 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	77fb      	strb	r3, [r7, #31]
 8002886:	e002      	b.n	800288e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8002896:	7ffb      	ldrb	r3, [r7, #31]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10e      	bne.n	80028fc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0202 	bic.w	r2, r2, #2
 80028ec:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7fd febf 	bl	8000680 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7fd fe9f 	bl	800065c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0203 	bic.w	r2, r2, #3
 8002942:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295c:	f043 0208 	orr.w	r2, r3, #8
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff ffa5 	bl	80028b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	881a      	ldrh	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	1c9a      	adds	r2, r3, #2
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10e      	bne.n	80029c6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7fd fe5d 	bl	8000680 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	b292      	uxth	r2, r2
 80029e2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	1c9a      	adds	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10e      	bne.n	8002a24 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a14:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ff3e 	bl	80028a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d13a      	bne.n	8002abe <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d109      	bne.n	8002a66 <I2S_IRQHandler+0x3a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5c:	2b40      	cmp	r3, #64	; 0x40
 8002a5e:	d102      	bne.n	8002a66 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ffb4 	bl	80029ce <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d126      	bne.n	8002abe <I2S_IRQHandler+0x92>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d11f      	bne.n	8002abe <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a8c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	f043 0202 	orr.w	r2, r3, #2
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff fefb 	bl	80028b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d136      	bne.n	8002b38 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d109      	bne.n	8002ae8 <I2S_IRQHandler+0xbc>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ade:	2b80      	cmp	r3, #128	; 0x80
 8002ae0:	d102      	bne.n	8002ae8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ff45 	bl	8002972 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d122      	bne.n	8002b38 <I2S_IRQHandler+0x10c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d11b      	bne.n	8002b38 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b0e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f043 0204 	orr.w	r2, r3, #4
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff febe 	bl	80028b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b50:	f7fe f97c 	bl	8000e4c <HAL_GetTick>
 8002b54:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002b56:	e018      	b.n	8002b8a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5e:	d014      	beq.n	8002b8a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002b60:	f7fe f974 	bl	8000e4c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d902      	bls.n	8002b76 <I2S_WaitFlagStateUntilTimeout+0x36>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e00f      	b.n	8002baa <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4013      	ands	r3, r2
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d1d7      	bne.n	8002b58 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a92      	ldr	r2, [pc, #584]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002bce:	4b92      	ldr	r3, [pc, #584]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bd0:	e001      	b.n	8002bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a8b      	ldr	r2, [pc, #556]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d101      	bne.n	8002bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002bec:	4b8a      	ldr	r3, [pc, #552]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bee:	e001      	b.n	8002bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c00:	d004      	beq.n	8002c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 8099 	bne.w	8002d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d107      	bne.n	8002c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f925 	bl	8002e70 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d107      	bne.n	8002c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f9c8 	bl	8002fd0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d13a      	bne.n	8002cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d035      	beq.n	8002cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6e      	ldr	r2, [pc, #440]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c5e:	4b6e      	ldr	r3, [pc, #440]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c60:	e001      	b.n	8002c66 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4969      	ldr	r1, [pc, #420]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c6e:	428b      	cmp	r3, r1
 8002c70:	d101      	bne.n	8002c76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c72:	4b69      	ldr	r3, [pc, #420]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c74:	e001      	b.n	8002c7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c7e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f043 0202 	orr.w	r2, r3, #2
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fdfa 	bl	80028b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	f040 80c3 	bne.w	8002e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80bd 	beq.w	8002e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ce6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a49      	ldr	r2, [pc, #292]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002cf2:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cf4:	e001      	b.n	8002cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002cf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4944      	ldr	r1, [pc, #272]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d02:	428b      	cmp	r3, r1
 8002d04:	d101      	bne.n	8002d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d06:	4b44      	ldr	r3, [pc, #272]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d08:	e001      	b.n	8002d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d12:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d14:	2300      	movs	r3, #0
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f043 0204 	orr.w	r2, r3, #4
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff fdbc 	bl	80028b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d3c:	e089      	b.n	8002e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d107      	bne.n	8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8be 	bl	8002ed4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d107      	bne.n	8002d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f8fd 	bl	8002f6c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d12f      	bne.n	8002ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02a      	beq.n	8002ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d94:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d101      	bne.n	8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002da2:	e001      	b.n	8002da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002da4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4919      	ldr	r1, [pc, #100]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002db0:	428b      	cmp	r3, r1
 8002db2:	d101      	bne.n	8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002db4:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002db6:	e001      	b.n	8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dc0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f043 0202 	orr.w	r2, r3, #2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff fd6c 	bl	80028b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d136      	bne.n	8002e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d031      	beq.n	8002e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d101      	bne.n	8002dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002dfa:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dfc:	e001      	b.n	8002e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002dfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4902      	ldr	r1, [pc, #8]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e0a:	428b      	cmp	r3, r1
 8002e0c:	d106      	bne.n	8002e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002e0e:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e10:	e006      	b.n	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002e12:	bf00      	nop
 8002e14:	40003800 	.word	0x40003800
 8002e18:	40003400 	.word	0x40003400
 8002e1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e24:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	f043 0204 	orr.w	r2, r3, #4
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff fd32 	bl	80028b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e50:	e000      	b.n	8002e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e52:	bf00      	nop
}
 8002e54:	bf00      	nop
 8002e56:	3720      	adds	r7, #32
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	1c99      	adds	r1, r3, #2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6251      	str	r1, [r2, #36]	; 0x24
 8002e82:	881a      	ldrh	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d113      	bne.n	8002eca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002eb0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d106      	bne.n	8002eca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ffc9 	bl	8002e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	1c99      	adds	r1, r3, #2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6251      	str	r1, [r2, #36]	; 0x24
 8002ee6:	8819      	ldrh	r1, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <I2SEx_TxISR_I2SExt+0x90>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d101      	bne.n	8002ef6 <I2SEx_TxISR_I2SExt+0x22>
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <I2SEx_TxISR_I2SExt+0x94>)
 8002ef4:	e001      	b.n	8002efa <I2SEx_TxISR_I2SExt+0x26>
 8002ef6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002efa:	460a      	mov	r2, r1
 8002efc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d121      	bne.n	8002f5a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <I2SEx_TxISR_I2SExt+0x90>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d101      	bne.n	8002f24 <I2SEx_TxISR_I2SExt+0x50>
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <I2SEx_TxISR_I2SExt+0x94>)
 8002f22:	e001      	b.n	8002f28 <I2SEx_TxISR_I2SExt+0x54>
 8002f24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	490d      	ldr	r1, [pc, #52]	; (8002f64 <I2SEx_TxISR_I2SExt+0x90>)
 8002f30:	428b      	cmp	r3, r1
 8002f32:	d101      	bne.n	8002f38 <I2SEx_TxISR_I2SExt+0x64>
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <I2SEx_TxISR_I2SExt+0x94>)
 8002f36:	e001      	b.n	8002f3c <I2SEx_TxISR_I2SExt+0x68>
 8002f38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ff81 	bl	8002e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40003800 	.word	0x40003800
 8002f68:	40003400 	.word	0x40003400

08002f6c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68d8      	ldr	r0, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	1c99      	adds	r1, r3, #2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f84:	b282      	uxth	r2, r0
 8002f86:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d113      	bne.n	8002fc8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ff4a 	bl	8002e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a20      	ldr	r2, [pc, #128]	; (8003060 <I2SEx_RxISR_I2SExt+0x90>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <I2SEx_RxISR_I2SExt+0x16>
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <I2SEx_RxISR_I2SExt+0x94>)
 8002fe4:	e001      	b.n	8002fea <I2SEx_RxISR_I2SExt+0x1a>
 8002fe6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fea:	68d8      	ldr	r0, [r3, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	1c99      	adds	r1, r3, #2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002ff6:	b282      	uxth	r2, r0
 8002ff8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d121      	bne.n	8003056 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a12      	ldr	r2, [pc, #72]	; (8003060 <I2SEx_RxISR_I2SExt+0x90>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d101      	bne.n	8003020 <I2SEx_RxISR_I2SExt+0x50>
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <I2SEx_RxISR_I2SExt+0x94>)
 800301e:	e001      	b.n	8003024 <I2SEx_RxISR_I2SExt+0x54>
 8003020:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	490d      	ldr	r1, [pc, #52]	; (8003060 <I2SEx_RxISR_I2SExt+0x90>)
 800302c:	428b      	cmp	r3, r1
 800302e:	d101      	bne.n	8003034 <I2SEx_RxISR_I2SExt+0x64>
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <I2SEx_RxISR_I2SExt+0x94>)
 8003032:	e001      	b.n	8003038 <I2SEx_RxISR_I2SExt+0x68>
 8003034:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003038:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800303c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d106      	bne.n	8003056 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff03 	bl	8002e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40003800 	.word	0x40003800
 8003064:	40003400 	.word	0x40003400

08003068 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306a:	b08f      	sub	sp, #60	; 0x3c
 800306c:	af0a      	add	r7, sp, #40	; 0x28
 800306e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e10f      	b.n	800329a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d106      	bne.n	800309a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f006 f987 	bl	80093a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2203      	movs	r2, #3
 800309e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f002 fd44 	bl	8005b46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	687e      	ldr	r6, [r7, #4]
 80030c6:	466d      	mov	r5, sp
 80030c8:	f106 0410 	add.w	r4, r6, #16
 80030cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80030dc:	1d33      	adds	r3, r6, #4
 80030de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e0:	6838      	ldr	r0, [r7, #0]
 80030e2:	f002 fc1b 	bl	800591c <USB_CoreInit>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0d0      	b.n	800329a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f002 fd32 	bl	8005b68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003104:	2300      	movs	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	e04a      	b.n	80031a0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	333d      	adds	r3, #61	; 0x3d
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	333c      	adds	r3, #60	; 0x3c
 800312e:	7bfa      	ldrb	r2, [r7, #15]
 8003130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	b298      	uxth	r0, r3
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	3344      	adds	r3, #68	; 0x44
 8003146:	4602      	mov	r2, r0
 8003148:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3340      	adds	r3, #64	; 0x40
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	3348      	adds	r3, #72	; 0x48
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	334c      	adds	r3, #76	; 0x4c
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3354      	adds	r3, #84	; 0x54
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	3301      	adds	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d3af      	bcc.n	800310a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]
 80031ae:	e044      	b.n	800323a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031d8:	7bfa      	ldrb	r2, [r7, #15]
 80031da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	3301      	adds	r3, #1
 8003238:	73fb      	strb	r3, [r7, #15]
 800323a:	7bfa      	ldrb	r2, [r7, #15]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	429a      	cmp	r2, r3
 8003242:	d3b5      	bcc.n	80031b0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	687e      	ldr	r6, [r7, #4]
 800324c:	466d      	mov	r5, sp
 800324e:	f106 0410 	add.w	r4, r6, #16
 8003252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800325a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800325e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003262:	1d33      	adds	r3, r6, #4
 8003264:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003266:	6838      	ldr	r0, [r7, #0]
 8003268:	f002 fcca 	bl	8005c00 <USB_DevInit>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2202      	movs	r2, #2
 8003276:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e00d      	b.n	800329a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f003 fe19 	bl	8006eca <USB_DevDisconnect>

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_PCD_Start+0x1c>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e020      	b.n	8003300 <HAL_PCD_Start+0x5e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d109      	bne.n	80032e2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d005      	beq.n	80032e2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f002 fc1c 	bl	8005b24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f003 fdc9 	bl	8006e88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b08d      	sub	sp, #52	; 0x34
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f003 fe87 	bl	8007032 <USB_GetMode>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 848a 	bne.w	8003c40 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f003 fdeb 	bl	8006f0c <USB_ReadInterrupts>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8480 	beq.w	8003c3e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f003 fdd8 	bl	8006f0c <USB_ReadInterrupts>
 800335c:	4603      	mov	r3, r0
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d107      	bne.n	8003376 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695a      	ldr	r2, [r3, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f002 0202 	and.w	r2, r2, #2
 8003374:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f003 fdc6 	bl	8006f0c <USB_ReadInterrupts>
 8003380:	4603      	mov	r3, r0
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b10      	cmp	r3, #16
 8003388:	d161      	bne.n	800344e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699a      	ldr	r2, [r3, #24]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0210 	bic.w	r2, r2, #16
 8003398:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f003 020f 	and.w	r2, r3, #15
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	3304      	adds	r3, #4
 80033b8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	0c5b      	lsrs	r3, r3, #17
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d124      	bne.n	8003410 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d035      	beq.n	800343e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	6a38      	ldr	r0, [r7, #32]
 80033e6:	f003 fbfd 	bl	8006be4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033f6:	441a      	add	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	6a1a      	ldr	r2, [r3, #32]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003408:	441a      	add	r2, r3
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	621a      	str	r2, [r3, #32]
 800340e:	e016      	b.n	800343e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	0c5b      	lsrs	r3, r3, #17
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	2b06      	cmp	r3, #6
 800341a:	d110      	bne.n	800343e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003422:	2208      	movs	r2, #8
 8003424:	4619      	mov	r1, r3
 8003426:	6a38      	ldr	r0, [r7, #32]
 8003428:	f003 fbdc 	bl	8006be4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	6a1a      	ldr	r2, [r3, #32]
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003438:	441a      	add	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0210 	orr.w	r2, r2, #16
 800344c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f003 fd5a 	bl	8006f0c <USB_ReadInterrupts>
 8003458:	4603      	mov	r3, r0
 800345a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800345e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003462:	f040 80a7 	bne.w	80035b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f003 fd5f 	bl	8006f32 <USB_ReadDevAllOutEpInterrupt>
 8003474:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003476:	e099      	b.n	80035ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 808e 	beq.w	80035a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	4611      	mov	r1, r2
 800348e:	4618      	mov	r0, r3
 8003490:	f003 fd83 	bl	8006f9a <USB_ReadDevOutEPInterrupt>
 8003494:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00c      	beq.n	80034ba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ac:	461a      	mov	r2, r3
 80034ae:	2301      	movs	r3, #1
 80034b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fec3 	bl	8004240 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00c      	beq.n	80034de <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d0:	461a      	mov	r2, r3
 80034d2:	2308      	movs	r3, #8
 80034d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 ff99 	bl	8004410 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f4:	461a      	mov	r2, r3
 80034f6:	2310      	movs	r3, #16
 80034f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d030      	beq.n	8003566 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350c:	2b80      	cmp	r3, #128	; 0x80
 800350e:	d109      	bne.n	8003524 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800351e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003522:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	3304      	adds	r3, #4
 8003538:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	78db      	ldrb	r3, [r3, #3]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d108      	bne.n	8003554 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2200      	movs	r2, #0
 8003546:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	b2db      	uxtb	r3, r3
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f006 f826 	bl	80095a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003560:	461a      	mov	r2, r3
 8003562:	2302      	movs	r3, #2
 8003564:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357c:	461a      	mov	r2, r3
 800357e:	2320      	movs	r3, #32
 8003580:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d009      	beq.n	80035a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003598:	461a      	mov	r2, r3
 800359a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800359e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	3301      	adds	r3, #1
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f47f af62 	bne.w	8003478 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f003 fca7 	bl	8006f0c <USB_ReadInterrupts>
 80035be:	4603      	mov	r3, r0
 80035c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035c8:	f040 80db 	bne.w	8003782 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f003 fcc8 	bl	8006f66 <USB_ReadDevAllInEpInterrupt>
 80035d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035dc:	e0cd      	b.n	800377a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80c2 	beq.w	800376e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f003 fcee 	bl	8006fd6 <USB_ReadDevInEPInterrupt>
 80035fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d057      	beq.n	80036b6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	2201      	movs	r2, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	43db      	mvns	r3, r3
 8003620:	69f9      	ldr	r1, [r7, #28]
 8003622:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003626:	4013      	ands	r3, r2
 8003628:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003636:	461a      	mov	r2, r3
 8003638:	2301      	movs	r3, #1
 800363a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d132      	bne.n	80036aa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	334c      	adds	r3, #76	; 0x4c
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365a:	4613      	mov	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4403      	add	r3, r0
 8003664:	3348      	adds	r3, #72	; 0x48
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4419      	add	r1, r3
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4403      	add	r3, r0
 8003678:	334c      	adds	r3, #76	; 0x4c
 800367a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	2b00      	cmp	r3, #0
 8003680:	d113      	bne.n	80036aa <HAL_PCD_IRQHandler+0x3a2>
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	3354      	adds	r3, #84	; 0x54
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d108      	bne.n	80036aa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036a2:	461a      	mov	r2, r3
 80036a4:	2101      	movs	r1, #1
 80036a6:	f003 fcf5 	bl	8007094 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	4619      	mov	r1, r3
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f005 fefa 	bl	80094aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036cc:	461a      	mov	r2, r3
 80036ce:	2308      	movs	r3, #8
 80036d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e8:	461a      	mov	r2, r3
 80036ea:	2310      	movs	r3, #16
 80036ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003704:	461a      	mov	r2, r3
 8003706:	2340      	movs	r3, #64	; 0x40
 8003708:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d023      	beq.n	800375c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003716:	6a38      	ldr	r0, [r7, #32]
 8003718:	f002 fbd6 	bl	8005ec8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800371c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	3338      	adds	r3, #56	; 0x38
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	4413      	add	r3, r2
 800372c:	3304      	adds	r3, #4
 800372e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	78db      	ldrb	r3, [r3, #3]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d108      	bne.n	800374a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2200      	movs	r2, #0
 800373c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	b2db      	uxtb	r3, r3
 8003742:	4619      	mov	r1, r3
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f005 ff3d 	bl	80095c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003756:	461a      	mov	r2, r3
 8003758:	2302      	movs	r3, #2
 800375a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fcdb 	bl	8004124 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	3301      	adds	r3, #1
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	085b      	lsrs	r3, r3, #1
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	f47f af2e 	bne.w	80035de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f003 fbc0 	bl	8006f0c <USB_ReadInterrupts>
 800378c:	4603      	mov	r3, r0
 800378e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003796:	d122      	bne.n	80037de <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d108      	bne.n	80037c8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037be:	2100      	movs	r1, #0
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fec3 	bl	800454c <HAL_PCDEx_LPM_Callback>
 80037c6:	e002      	b.n	80037ce <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f005 fedb 	bl	8009584 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 fb92 	bl	8006f0c <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f2:	d112      	bne.n	800381a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b01      	cmp	r3, #1
 8003802:	d102      	bne.n	800380a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f005 fe97 	bl	8009538 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003818:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f003 fb74 	bl	8006f0c <USB_ReadInterrupts>
 8003824:	4603      	mov	r3, r0
 8003826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800382a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382e:	f040 80b7 	bne.w	80039a0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2110      	movs	r1, #16
 800384c:	4618      	mov	r0, r3
 800384e:	f002 fb3b 	bl	8005ec8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003852:	2300      	movs	r3, #0
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003856:	e046      	b.n	80038e6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003864:	461a      	mov	r2, r3
 8003866:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800386a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800387c:	0151      	lsls	r1, r2, #5
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	440a      	add	r2, r1
 8003882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003886:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800388a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003898:	461a      	mov	r2, r3
 800389a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800389e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b0:	0151      	lsls	r1, r2, #5
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	440a      	add	r2, r1
 80038b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d0:	0151      	lsls	r1, r2, #5
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	440a      	add	r2, r1
 80038d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038de:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e2:	3301      	adds	r3, #1
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d3b3      	bcc.n	8003858 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003902:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	2b00      	cmp	r3, #0
 800390a:	d016      	beq.n	800393a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800391c:	f043 030b 	orr.w	r3, r3, #11
 8003920:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003932:	f043 030b 	orr.w	r3, r3, #11
 8003936:	6453      	str	r3, [r2, #68]	; 0x44
 8003938:	e015      	b.n	8003966 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003948:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800394c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003950:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003960:	f043 030b 	orr.w	r3, r3, #11
 8003964:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003974:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003978:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800398a:	461a      	mov	r2, r3
 800398c:	f003 fb82 	bl	8007094 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800399e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f003 fab1 	bl	8006f0c <USB_ReadInterrupts>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b4:	d124      	bne.n	8003a00 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f003 fb47 	bl	800704e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f002 fafc 	bl	8005fc2 <USB_GetDevSpeed>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461a      	mov	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681c      	ldr	r4, [r3, #0]
 80039d6:	f001 f9f5 	bl	8004dc4 <HAL_RCC_GetHCLKFreq>
 80039da:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	4620      	mov	r0, r4
 80039e6:	f001 fffb 	bl	80059e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f005 fd85 	bl	80094fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f003 fa81 	bl	8006f0c <USB_ReadInterrupts>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d10a      	bne.n	8003a2a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f005 fd62 	bl	80094de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f002 0208 	and.w	r2, r2, #8
 8003a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f003 fa6c 	bl	8006f0c <USB_ReadInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3a:	2b80      	cmp	r3, #128	; 0x80
 8003a3c:	d122      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4e:	e014      	b.n	8003a7a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d105      	bne.n	8003a74 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fb27 	bl	80040c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	3301      	adds	r3, #1
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d3e5      	bcc.n	8003a50 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f003 fa3f 	bl	8006f0c <USB_ReadInterrupts>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a98:	d13b      	bne.n	8003b12 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	e02b      	b.n	8003af8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	3340      	adds	r3, #64	; 0x40
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d115      	bne.n	8003af2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ac6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	da12      	bge.n	8003af2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	333f      	adds	r3, #63	; 0x3f
 8003adc:	2201      	movs	r2, #1
 8003ade:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	4619      	mov	r1, r3
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fae8 	bl	80040c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	3301      	adds	r3, #1
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d3ce      	bcc.n	8003aa0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f003 f9f8 	bl	8006f0c <USB_ReadInterrupts>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b26:	d155      	bne.n	8003bd4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b28:	2301      	movs	r3, #1
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2c:	e045      	b.n	8003bba <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b42:	4613      	mov	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d12e      	bne.n	8003bb4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	da2b      	bge.n	8003bb4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003b68:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d121      	bne.n	8003bb4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b82:	2201      	movs	r2, #1
 8003b84:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10a      	bne.n	8003bb4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bb0:	6053      	str	r3, [r2, #4]
            break;
 8003bb2:	e007      	b.n	8003bc4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d3b4      	bcc.n	8003b2e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003bd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f003 f997 	bl	8006f0c <USB_ReadInterrupts>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be8:	d10a      	bne.n	8003c00 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f005 fcfc 	bl	80095e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f003 f981 	bl	8006f0c <USB_ReadInterrupts>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d115      	bne.n	8003c40 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f005 fcec 	bl	8009604 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6859      	ldr	r1, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	605a      	str	r2, [r3, #4]
 8003c3c:	e000      	b.n	8003c40 <HAL_PCD_IRQHandler+0x938>
      return;
 8003c3e:	bf00      	nop
    }
  }
}
 8003c40:	3734      	adds	r7, #52	; 0x34
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd90      	pop	{r4, r7, pc}

08003c46 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_PCD_SetAddress+0x1a>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e013      	b.n	8003c88 <HAL_PCD_SetAddress+0x42>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f003 f8df 	bl	8006e3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	4608      	mov	r0, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	70fb      	strb	r3, [r7, #3]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	803b      	strh	r3, [r7, #0]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	da0f      	bge.n	8003cd6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	f003 020f 	and.w	r2, r3, #15
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	3338      	adds	r3, #56	; 0x38
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	3304      	adds	r3, #4
 8003ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	705a      	strb	r2, [r3, #1]
 8003cd4:	e00f      	b.n	8003cf6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	f003 020f 	and.w	r2, r3, #15
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	3304      	adds	r3, #4
 8003cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d02:	883a      	ldrh	r2, [r7, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	78ba      	ldrb	r2, [r7, #2]
 8003d0c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	785b      	ldrb	r3, [r3, #1]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d20:	78bb      	ldrb	r3, [r7, #2]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d102      	bne.n	8003d2c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_PCD_EP_Open+0xaa>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e00e      	b.n	8003d58 <HAL_PCD_EP_Open+0xc8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68f9      	ldr	r1, [r7, #12]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f002 f95f 	bl	800600c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003d56:	7afb      	ldrb	r3, [r7, #11]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	da0f      	bge.n	8003d94 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	f003 020f 	and.w	r2, r3, #15
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	3338      	adds	r3, #56	; 0x38
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	4413      	add	r3, r2
 8003d88:	3304      	adds	r3, #4
 8003d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	705a      	strb	r2, [r3, #1]
 8003d92:	e00f      	b.n	8003db4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	f003 020f 	and.w	r2, r3, #15
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	3304      	adds	r3, #4
 8003dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_PCD_EP_Close+0x6e>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e00e      	b.n	8003dec <HAL_PCD_EP_Close+0x8c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68f9      	ldr	r1, [r7, #12]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f002 f99d 	bl	800611c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	460b      	mov	r3, r1
 8003e02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e04:	7afb      	ldrb	r3, [r7, #11]
 8003e06:	f003 020f 	and.w	r2, r3, #15
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4413      	add	r3, r2
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2200      	movs	r2, #0
 8003e34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e36:	7afb      	ldrb	r3, [r7, #11]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d102      	bne.n	8003e50 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e50:	7afb      	ldrb	r3, [r7, #11]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	6979      	ldr	r1, [r7, #20]
 8003e68:	f002 fc7c 	bl	8006764 <USB_EP0StartXfer>
 8003e6c:	e008      	b.n	8003e80 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6979      	ldr	r1, [r7, #20]
 8003e7c:	f002 fa2a 	bl	80062d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	460b      	mov	r3, r1
 8003e94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	f003 020f 	and.w	r2, r3, #15
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003eac:	681b      	ldr	r3, [r3, #0]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b086      	sub	sp, #24
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eca:	7afb      	ldrb	r3, [r7, #11]
 8003ecc:	f003 020f 	and.w	r2, r3, #15
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	3338      	adds	r3, #56	; 0x38
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4413      	add	r3, r2
 8003ede:	3304      	adds	r3, #4
 8003ee0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003efa:	7afb      	ldrb	r3, [r7, #11]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d102      	bne.n	8003f14 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f14:	7afb      	ldrb	r3, [r7, #11]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	6979      	ldr	r1, [r7, #20]
 8003f2c:	f002 fc1a 	bl	8006764 <USB_EP0StartXfer>
 8003f30:	e008      	b.n	8003f44 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6979      	ldr	r1, [r7, #20]
 8003f40:	f002 f9c8 	bl	80062d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	460b      	mov	r3, r1
 8003f58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	f003 020f 	and.w	r2, r3, #15
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d901      	bls.n	8003f6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e050      	b.n	800400e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	da0f      	bge.n	8003f94 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	f003 020f 	and.w	r2, r3, #15
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	3338      	adds	r3, #56	; 0x38
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	4413      	add	r3, r2
 8003f88:	3304      	adds	r3, #4
 8003f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	705a      	strb	r2, [r3, #1]
 8003f92:	e00d      	b.n	8003fb0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_PCD_EP_SetStall+0x82>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e01e      	b.n	800400e <HAL_PCD_EP_SetStall+0xc0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68f9      	ldr	r1, [r7, #12]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f002 fe58 	bl	8006c94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	b2d9      	uxtb	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ffe:	461a      	mov	r2, r3
 8004000:	f003 f848 	bl	8007094 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	f003 020f 	and.w	r2, r3, #15
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d901      	bls.n	8004034 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e042      	b.n	80040ba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004038:	2b00      	cmp	r3, #0
 800403a:	da0f      	bge.n	800405c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	f003 020f 	and.w	r2, r3, #15
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	3338      	adds	r3, #56	; 0x38
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4413      	add	r3, r2
 8004050:	3304      	adds	r3, #4
 8004052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	705a      	strb	r2, [r3, #1]
 800405a:	e00f      	b.n	800407c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 020f 	and.w	r2, r3, #15
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	3304      	adds	r3, #4
 8004074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_PCD_EP_ClrStall+0x86>
 8004098:	2302      	movs	r3, #2
 800409a:	e00e      	b.n	80040ba <HAL_PCD_EP_ClrStall+0xa4>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68f9      	ldr	r1, [r7, #12]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f002 fe60 	bl	8006d70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80040ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	da0c      	bge.n	80040f0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	f003 020f 	and.w	r2, r3, #15
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	3338      	adds	r3, #56	; 0x38
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	4413      	add	r3, r2
 80040ea:	3304      	adds	r3, #4
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	e00c      	b.n	800410a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	f003 020f 	and.w	r2, r3, #15
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	4413      	add	r3, r2
 8004106:	3304      	adds	r3, #4
 8004108:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68f9      	ldr	r1, [r7, #12]
 8004110:	4618      	mov	r0, r3
 8004112:	f002 fc7f 	bl	8006a14 <USB_EPStopXfer>
 8004116:	4603      	mov	r3, r0
 8004118:	72fb      	strb	r3, [r7, #11]

  return ret;
 800411a:	7afb      	ldrb	r3, [r7, #11]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	; 0x28
 8004128:	af02      	add	r7, sp, #8
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	4613      	mov	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	3338      	adds	r3, #56	; 0x38
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	3304      	adds	r3, #4
 800414a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1a      	ldr	r2, [r3, #32]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	429a      	cmp	r2, r3
 8004156:	d901      	bls.n	800415c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e06c      	b.n	8004236 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	699a      	ldr	r2, [r3, #24]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	429a      	cmp	r2, r3
 8004170:	d902      	bls.n	8004178 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	3303      	adds	r3, #3
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004180:	e02b      	b.n	80041da <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	429a      	cmp	r2, r3
 8004196:	d902      	bls.n	800419e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	3303      	adds	r3, #3
 80041a2:	089b      	lsrs	r3, r3, #2
 80041a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6919      	ldr	r1, [r3, #16]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	4603      	mov	r3, r0
 80041bc:	6978      	ldr	r0, [r7, #20]
 80041be:	f002 fcd3 	bl	8006b68 <USB_WritePacket>

    ep->xfer_buff  += len;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	441a      	add	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1a      	ldr	r2, [r3, #32]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	441a      	add	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d809      	bhi.n	8004204 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a1a      	ldr	r2, [r3, #32]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d203      	bcs.n	8004204 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1be      	bne.n	8004182 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	699a      	ldr	r2, [r3, #24]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	429a      	cmp	r2, r3
 800420e:	d811      	bhi.n	8004234 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	2201      	movs	r2, #1
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	43db      	mvns	r3, r3
 800422a:	6939      	ldr	r1, [r7, #16]
 800422c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004230:	4013      	ands	r3, r2
 8004232:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	333c      	adds	r3, #60	; 0x3c
 8004258:	3304      	adds	r3, #4
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d17b      	bne.n	800436e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d015      	beq.n	80042ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	4a61      	ldr	r2, [pc, #388]	; (8004408 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	f240 80b9 	bls.w	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80b3 	beq.w	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a2:	461a      	mov	r2, r3
 80042a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a8:	6093      	str	r3, [r2, #8]
 80042aa:	e0a7      	b.n	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c2:	461a      	mov	r2, r3
 80042c4:	2320      	movs	r3, #32
 80042c6:	6093      	str	r3, [r2, #8]
 80042c8:	e098      	b.n	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f040 8093 	bne.w	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	4a4b      	ldr	r2, [pc, #300]	; (8004408 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d90f      	bls.n	80042fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f4:	461a      	mov	r2, r3
 80042f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fa:	6093      	str	r3, [r2, #8]
 80042fc:	e07e      	b.n	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4413      	add	r3, r2
 8004310:	3304      	adds	r3, #4
 8004312:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	69da      	ldr	r2, [r3, #28]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	0159      	lsls	r1, r3, #5
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	440b      	add	r3, r1
 8004320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432a:	1ad2      	subs	r2, r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d114      	bne.n	8004360 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004348:	461a      	mov	r2, r3
 800434a:	2101      	movs	r1, #1
 800434c:	f002 fea2 	bl	8007094 <USB_EP0_OutStart>
 8004350:	e006      	b.n	8004360 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	441a      	add	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	4619      	mov	r1, r3
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f005 f884 	bl	8009474 <HAL_PCD_DataOutStageCallback>
 800436c:	e046      	b.n	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	4a26      	ldr	r2, [pc, #152]	; (800440c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d124      	bne.n	80043c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438c:	461a      	mov	r2, r3
 800438e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004392:	6093      	str	r3, [r2, #8]
 8004394:	e032      	b.n	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ac:	461a      	mov	r2, r3
 80043ae:	2320      	movs	r3, #32
 80043b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	4619      	mov	r1, r3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f005 f85b 	bl	8009474 <HAL_PCD_DataOutStageCallback>
 80043be:	e01d      	b.n	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d114      	bne.n	80043f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d108      	bne.n	80043f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043e8:	461a      	mov	r2, r3
 80043ea:	2100      	movs	r1, #0
 80043ec:	f002 fe52 	bl	8007094 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f005 f83c 	bl	8009474 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	4f54300a 	.word	0x4f54300a
 800440c:	4f54310a 	.word	0x4f54310a

08004410 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	333c      	adds	r3, #60	; 0x3c
 8004428:	3304      	adds	r3, #4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a15      	ldr	r2, [pc, #84]	; (8004498 <PCD_EP_OutSetupPacket_int+0x88>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d90e      	bls.n	8004464 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800444c:	2b00      	cmp	r3, #0
 800444e:	d009      	beq.n	8004464 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445c:	461a      	mov	r2, r3
 800445e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004462:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f004 fff3 	bl	8009450 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <PCD_EP_OutSetupPacket_int+0x88>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d90c      	bls.n	800448c <PCD_EP_OutSetupPacket_int+0x7c>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d108      	bne.n	800448c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004484:	461a      	mov	r2, r3
 8004486:	2101      	movs	r1, #1
 8004488:	f002 fe04 	bl	8007094 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	4f54300a 	.word	0x4f54300a

0800449c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	70fb      	strb	r3, [r7, #3]
 80044a8:	4613      	mov	r3, r2
 80044aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044ba:	883b      	ldrh	r3, [r7, #0]
 80044bc:	0419      	lsls	r1, r3, #16
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	629a      	str	r2, [r3, #40]	; 0x28
 80044c8:	e028      	b.n	800451c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	0c1b      	lsrs	r3, r3, #16
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	4413      	add	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044d8:	2300      	movs	r3, #0
 80044da:	73fb      	strb	r3, [r7, #15]
 80044dc:	e00d      	b.n	80044fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	3340      	adds	r3, #64	; 0x40
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	4413      	add	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	3301      	adds	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
 80044fa:	7bfa      	ldrb	r2, [r7, #15]
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	3b01      	subs	r3, #1
 8004500:	429a      	cmp	r2, r3
 8004502:	d3ec      	bcc.n	80044de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004504:	883b      	ldrh	r3, [r7, #0]
 8004506:	0418      	lsls	r0, r3, #16
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6819      	ldr	r1, [r3, #0]
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	3b01      	subs	r3, #1
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	4302      	orrs	r2, r0
 8004514:	3340      	adds	r3, #64	; 0x40
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	460b      	mov	r3, r1
 8004534:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	887a      	ldrh	r2, [r7, #2]
 800453c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e267      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d075      	beq.n	800466e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004582:	4b88      	ldr	r3, [pc, #544]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b04      	cmp	r3, #4
 800458c:	d00c      	beq.n	80045a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458e:	4b85      	ldr	r3, [pc, #532]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004596:	2b08      	cmp	r3, #8
 8004598:	d112      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459a:	4b82      	ldr	r3, [pc, #520]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	4b7e      	ldr	r3, [pc, #504]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05b      	beq.n	800466c <HAL_RCC_OscConfig+0x108>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d157      	bne.n	800466c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e242      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_OscConfig+0x74>
 80045ca:	4b76      	ldr	r3, [pc, #472]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a75      	ldr	r2, [pc, #468]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e01d      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0x98>
 80045e2:	4b70      	ldr	r3, [pc, #448]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a6f      	ldr	r2, [pc, #444]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b6d      	ldr	r3, [pc, #436]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6c      	ldr	r2, [pc, #432]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045fc:	4b69      	ldr	r3, [pc, #420]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a68      	ldr	r2, [pc, #416]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b66      	ldr	r3, [pc, #408]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a65      	ldr	r2, [pc, #404]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fc fc16 	bl	8000e4c <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004624:	f7fc fc12 	bl	8000e4c <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	; 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e207      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004636:	4b5b      	ldr	r3, [pc, #364]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0xc0>
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fc fc02 	bl	8000e4c <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800464c:	f7fc fbfe 	bl	8000e4c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	; 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e1f3      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465e:	4b51      	ldr	r3, [pc, #324]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0xe8>
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d063      	beq.n	8004742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800467a:	4b4a      	ldr	r3, [pc, #296]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004686:	4b47      	ldr	r3, [pc, #284]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800468e:	2b08      	cmp	r3, #8
 8004690:	d11c      	bne.n	80046cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004692:	4b44      	ldr	r3, [pc, #272]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d116      	bne.n	80046cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469e:	4b41      	ldr	r3, [pc, #260]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_RCC_OscConfig+0x152>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d001      	beq.n	80046b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e1c7      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b6:	4b3b      	ldr	r3, [pc, #236]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4937      	ldr	r1, [pc, #220]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ca:	e03a      	b.n	8004742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d020      	beq.n	8004716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d4:	4b34      	ldr	r3, [pc, #208]	; (80047a8 <HAL_RCC_OscConfig+0x244>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046da:	f7fc fbb7 	bl	8000e4c <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e2:	f7fc fbb3 	bl	8000e4c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e1a8      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f4:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004700:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4925      	ldr	r1, [pc, #148]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004710:	4313      	orrs	r3, r2
 8004712:	600b      	str	r3, [r1, #0]
 8004714:	e015      	b.n	8004742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004716:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <HAL_RCC_OscConfig+0x244>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fc fb96 	bl	8000e4c <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004724:	f7fc fb92 	bl	8000e4c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e187      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004736:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d036      	beq.n	80047bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d016      	beq.n	8004784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004756:	4b15      	ldr	r3, [pc, #84]	; (80047ac <HAL_RCC_OscConfig+0x248>)
 8004758:	2201      	movs	r2, #1
 800475a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fc fb76 	bl	8000e4c <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004764:	f7fc fb72 	bl	8000e4c <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e167      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x200>
 8004782:	e01b      	b.n	80047bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004784:	4b09      	ldr	r3, [pc, #36]	; (80047ac <HAL_RCC_OscConfig+0x248>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7fc fb5f 	bl	8000e4c <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004790:	e00e      	b.n	80047b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004792:	f7fc fb5b 	bl	8000e4c <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d907      	bls.n	80047b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e150      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
 80047a4:	40023800 	.word	0x40023800
 80047a8:	42470000 	.word	0x42470000
 80047ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b0:	4b88      	ldr	r3, [pc, #544]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ea      	bne.n	8004792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8097 	beq.w	80048f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ce:	4b81      	ldr	r3, [pc, #516]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10f      	bne.n	80047fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	4b7d      	ldr	r3, [pc, #500]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	4a7c      	ldr	r2, [pc, #496]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ea:	4b7a      	ldr	r3, [pc, #488]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fa:	4b77      	ldr	r3, [pc, #476]	; (80049d8 <HAL_RCC_OscConfig+0x474>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d118      	bne.n	8004838 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004806:	4b74      	ldr	r3, [pc, #464]	; (80049d8 <HAL_RCC_OscConfig+0x474>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a73      	ldr	r2, [pc, #460]	; (80049d8 <HAL_RCC_OscConfig+0x474>)
 800480c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004812:	f7fc fb1b 	bl	8000e4c <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481a:	f7fc fb17 	bl	8000e4c <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e10c      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482c:	4b6a      	ldr	r3, [pc, #424]	; (80049d8 <HAL_RCC_OscConfig+0x474>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d106      	bne.n	800484e <HAL_RCC_OscConfig+0x2ea>
 8004840:	4b64      	ldr	r3, [pc, #400]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4a63      	ldr	r2, [pc, #396]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	6713      	str	r3, [r2, #112]	; 0x70
 800484c:	e01c      	b.n	8004888 <HAL_RCC_OscConfig+0x324>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b05      	cmp	r3, #5
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x30c>
 8004856:	4b5f      	ldr	r3, [pc, #380]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a5e      	ldr	r2, [pc, #376]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	6713      	str	r3, [r2, #112]	; 0x70
 8004862:	4b5c      	ldr	r3, [pc, #368]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	4a5b      	ldr	r2, [pc, #364]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	6713      	str	r3, [r2, #112]	; 0x70
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0x324>
 8004870:	4b58      	ldr	r3, [pc, #352]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004874:	4a57      	ldr	r2, [pc, #348]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	6713      	str	r3, [r2, #112]	; 0x70
 800487c:	4b55      	ldr	r3, [pc, #340]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	4a54      	ldr	r2, [pc, #336]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004882:	f023 0304 	bic.w	r3, r3, #4
 8004886:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fc fadc 	bl	8000e4c <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004896:	e00a      	b.n	80048ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004898:	f7fc fad8 	bl	8000e4c <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e0cb      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ae:	4b49      	ldr	r3, [pc, #292]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0ee      	beq.n	8004898 <HAL_RCC_OscConfig+0x334>
 80048ba:	e014      	b.n	80048e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048bc:	f7fc fac6 	bl	8000e4c <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c2:	e00a      	b.n	80048da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c4:	f7fc fac2 	bl	8000e4c <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e0b5      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048da:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1ee      	bne.n	80048c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d105      	bne.n	80048f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ec:	4b39      	ldr	r3, [pc, #228]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	4a38      	ldr	r2, [pc, #224]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a1 	beq.w	8004a44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004902:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b08      	cmp	r3, #8
 800490c:	d05c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d141      	bne.n	800499a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004916:	4b31      	ldr	r3, [pc, #196]	; (80049dc <HAL_RCC_OscConfig+0x478>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fc fa96 	bl	8000e4c <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004924:	f7fc fa92 	bl	8000e4c <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e087      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004936:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	019b      	lsls	r3, r3, #6
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	3b01      	subs	r3, #1
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	491b      	ldr	r1, [pc, #108]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800496c:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <HAL_RCC_OscConfig+0x478>)
 800496e:	2201      	movs	r2, #1
 8004970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004972:	f7fc fa6b 	bl	8000e4c <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800497a:	f7fc fa67 	bl	8000e4c <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e05c      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498c:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x416>
 8004998:	e054      	b.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499a:	4b10      	ldr	r3, [pc, #64]	; (80049dc <HAL_RCC_OscConfig+0x478>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fc fa54 	bl	8000e4c <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fc fa50 	bl	8000e4c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e045      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x444>
 80049c6:	e03d      	b.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d107      	bne.n	80049e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e038      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40007000 	.word	0x40007000
 80049dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049e0:	4b1b      	ldr	r3, [pc, #108]	; (8004a50 <HAL_RCC_OscConfig+0x4ec>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d028      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d121      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d11a      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a10:	4013      	ands	r3, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d111      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800

08004a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0cc      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a68:	4b68      	ldr	r3, [pc, #416]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d90c      	bls.n	8004a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b65      	ldr	r3, [pc, #404]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7e:	4b63      	ldr	r3, [pc, #396]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0b8      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d020      	beq.n	8004ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aa8:	4b59      	ldr	r3, [pc, #356]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a58      	ldr	r2, [pc, #352]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ac0:	4b53      	ldr	r3, [pc, #332]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4a52      	ldr	r2, [pc, #328]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004acc:	4b50      	ldr	r3, [pc, #320]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	494d      	ldr	r1, [pc, #308]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d044      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af2:	4b47      	ldr	r3, [pc, #284]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d119      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e07f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d003      	beq.n	8004b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b12:	4b3f      	ldr	r3, [pc, #252]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e06f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b22:	4b3b      	ldr	r3, [pc, #236]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e067      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b32:	4b37      	ldr	r3, [pc, #220]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f023 0203 	bic.w	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4934      	ldr	r1, [pc, #208]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b44:	f7fc f982 	bl	8000e4c <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4c:	f7fc f97e 	bl	8000e4c <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e04f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	4b2b      	ldr	r3, [pc, #172]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 020c 	and.w	r2, r3, #12
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d1eb      	bne.n	8004b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b74:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d20c      	bcs.n	8004b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e032      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba8:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4916      	ldr	r1, [pc, #88]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc6:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	490e      	ldr	r1, [pc, #56]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bda:	f000 f82d 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8004bde:	4602      	mov	r2, r0
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	490a      	ldr	r1, [pc, #40]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004bec:	5ccb      	ldrb	r3, [r1, r3]
 8004bee:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf2:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <HAL_RCC_ClockConfig+0x1c8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fc f8e2 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023c00 	.word	0x40023c00
 8004c10:	40023800 	.word	0x40023800
 8004c14:	08009a78 	.word	0x08009a78
 8004c18:	20000000 	.word	0x20000000
 8004c1c:	20000004 	.word	0x20000004

08004c20 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <HAL_RCC_EnableCSS+0x14>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	4247004c 	.word	0x4247004c

08004c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c3c:	b090      	sub	sp, #64	; 0x40
 8004c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34
 8004c44:	2300      	movs	r3, #0
 8004c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c48:	2300      	movs	r3, #0
 8004c4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c50:	4b59      	ldr	r3, [pc, #356]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d00d      	beq.n	8004c78 <HAL_RCC_GetSysClockFreq+0x40>
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	f200 80a1 	bhi.w	8004da4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0x34>
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d003      	beq.n	8004c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c6a:	e09b      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c6c:	4b53      	ldr	r3, [pc, #332]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8004c6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004c70:	e09b      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c72:	4b53      	ldr	r3, [pc, #332]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c76:	e098      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c78:	4b4f      	ldr	r3, [pc, #316]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c82:	4b4d      	ldr	r3, [pc, #308]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d028      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8e:	4b4a      	ldr	r3, [pc, #296]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	099b      	lsrs	r3, r3, #6
 8004c94:	2200      	movs	r2, #0
 8004c96:	623b      	str	r3, [r7, #32]
 8004c98:	627a      	str	r2, [r7, #36]	; 0x24
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4b47      	ldr	r3, [pc, #284]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ca4:	fb03 f201 	mul.w	r2, r3, r1
 8004ca8:	2300      	movs	r3, #0
 8004caa:	fb00 f303 	mul.w	r3, r0, r3
 8004cae:	4413      	add	r3, r2
 8004cb0:	4a43      	ldr	r2, [pc, #268]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cb2:	fba0 1202 	umull	r1, r2, r0, r2
 8004cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cb8:	460a      	mov	r2, r1
 8004cba:	62ba      	str	r2, [r7, #40]	; 0x28
 8004cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cbe:	4413      	add	r3, r2
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	61fa      	str	r2, [r7, #28]
 8004cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004cd2:	f7fb fa81 	bl	80001d8 <__aeabi_uldivmod>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4613      	mov	r3, r2
 8004cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cde:	e053      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce0:	4b35      	ldr	r3, [pc, #212]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	099b      	lsrs	r3, r3, #6
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	617a      	str	r2, [r7, #20]
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cf2:	f04f 0b00 	mov.w	fp, #0
 8004cf6:	4652      	mov	r2, sl
 8004cf8:	465b      	mov	r3, fp
 8004cfa:	f04f 0000 	mov.w	r0, #0
 8004cfe:	f04f 0100 	mov.w	r1, #0
 8004d02:	0159      	lsls	r1, r3, #5
 8004d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d08:	0150      	lsls	r0, r2, #5
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	ebb2 080a 	subs.w	r8, r2, sl
 8004d12:	eb63 090b 	sbc.w	r9, r3, fp
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	f04f 0300 	mov.w	r3, #0
 8004d1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d2a:	ebb2 0408 	subs.w	r4, r2, r8
 8004d2e:	eb63 0509 	sbc.w	r5, r3, r9
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	00eb      	lsls	r3, r5, #3
 8004d3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d40:	00e2      	lsls	r2, r4, #3
 8004d42:	4614      	mov	r4, r2
 8004d44:	461d      	mov	r5, r3
 8004d46:	eb14 030a 	adds.w	r3, r4, sl
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	eb45 030b 	adc.w	r3, r5, fp
 8004d50:	607b      	str	r3, [r7, #4]
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d5e:	4629      	mov	r1, r5
 8004d60:	028b      	lsls	r3, r1, #10
 8004d62:	4621      	mov	r1, r4
 8004d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d68:	4621      	mov	r1, r4
 8004d6a:	028a      	lsls	r2, r1, #10
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d72:	2200      	movs	r2, #0
 8004d74:	60bb      	str	r3, [r7, #8]
 8004d76:	60fa      	str	r2, [r7, #12]
 8004d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d7c:	f7fb fa2c 	bl	80001d8 <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4613      	mov	r3, r2
 8004d86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	0c1b      	lsrs	r3, r3, #16
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	3301      	adds	r3, #1
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004da2:	e002      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8004da6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3740      	adds	r7, #64	; 0x40
 8004db0:	46bd      	mov	sp, r7
 8004db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	00f42400 	.word	0x00f42400
 8004dc0:	017d7840 	.word	0x017d7840

08004dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dc8:	4b03      	ldr	r3, [pc, #12]	; (8004dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dca:	681b      	ldr	r3, [r3, #0]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000000 	.word	0x20000000

08004ddc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d038      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e04:	4b68      	ldr	r3, [pc, #416]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e0a:	f7fc f81f 	bl	8000e4c <HAL_GetTick>
 8004e0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e10:	e008      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e12:	f7fc f81b 	bl	8000e4c <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e0bd      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e24:	4b61      	ldr	r3, [pc, #388]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f0      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	019b      	lsls	r3, r3, #6
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	071b      	lsls	r3, r3, #28
 8004e42:	495a      	ldr	r1, [pc, #360]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e4a:	4b57      	ldr	r3, [pc, #348]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e50:	f7fb fffc 	bl	8000e4c <HAL_GetTick>
 8004e54:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e58:	f7fb fff8 	bl	8000e4c <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e09a      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e6a:	4b50      	ldr	r3, [pc, #320]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8083 	beq.w	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	4b48      	ldr	r3, [pc, #288]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	4a47      	ldr	r2, [pc, #284]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e92:	6413      	str	r3, [r2, #64]	; 0x40
 8004e94:	4b45      	ldr	r3, [pc, #276]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ea0:	4b43      	ldr	r3, [pc, #268]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a42      	ldr	r2, [pc, #264]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eaa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004eac:	f7fb ffce 	bl	8000e4c <HAL_GetTick>
 8004eb0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004eb4:	f7fb ffca 	bl	8000e4c <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e06c      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ec6:	4b3a      	ldr	r3, [pc, #232]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ed2:	4b36      	ldr	r3, [pc, #216]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eda:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d02f      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d028      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ef0:	4b2e      	ldr	r3, [pc, #184]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004efa:	4b2e      	ldr	r3, [pc, #184]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f00:	4b2c      	ldr	r3, [pc, #176]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f06:	4a29      	ldr	r2, [pc, #164]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f0c:	4b27      	ldr	r3, [pc, #156]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d114      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f18:	f7fb ff98 	bl	8000e4c <HAL_GetTick>
 8004f1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f20:	f7fb ff94 	bl	8000e4c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e034      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f36:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0ee      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f4e:	d10d      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004f50:	4b16      	ldr	r3, [pc, #88]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f64:	4911      	ldr	r1, [pc, #68]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	608b      	str	r3, [r1, #8]
 8004f6a:	e005      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	4a0e      	ldr	r2, [pc, #56]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f76:	6093      	str	r3, [r2, #8]
 8004f78:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f84:	4909      	ldr	r1, [pc, #36]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	7d1a      	ldrb	r2, [r3, #20]
 8004f9a:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f9c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	42470068 	.word	0x42470068
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	40007000 	.word	0x40007000
 8004fb4:	42470e40 	.word	0x42470e40
 8004fb8:	424711e0 	.word	0x424711e0

08004fbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d140      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004fda:	4b24      	ldr	r3, [pc, #144]	; (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d131      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ff0:	4b1f      	ldr	r3, [pc, #124]	; (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ff2:	617b      	str	r3, [r7, #20]
          break;
 8004ff4:	e031      	b.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ff6:	4b1d      	ldr	r3, [pc, #116]	; (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005002:	d109      	bne.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005004:	4b19      	ldr	r3, [pc, #100]	; (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800500e:	4a19      	ldr	r2, [pc, #100]	; (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	e008      	b.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005018:	4b14      	ldr	r3, [pc, #80]	; (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800501a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800501e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005022:	4a15      	ldr	r2, [pc, #84]	; (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005024:	fbb2 f3f3 	udiv	r3, r2, r3
 8005028:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800502a:	4b10      	ldr	r3, [pc, #64]	; (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800502c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005030:	099b      	lsrs	r3, r3, #6
 8005032:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	fb02 f303 	mul.w	r3, r2, r3
 800503c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800503e:	4b0b      	ldr	r3, [pc, #44]	; (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005044:	0f1b      	lsrs	r3, r3, #28
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	617b      	str	r3, [r7, #20]
          break;
 8005052:	e002      	b.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
          break;
 8005058:	bf00      	nop
        }
      }
      break;
 800505a:	bf00      	nop
    }
  }
  return frequency;
 800505c:	697b      	ldr	r3, [r7, #20]
}
 800505e:	4618      	mov	r0, r3
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40023800 	.word	0x40023800
 8005070:	00bb8000 	.word	0x00bb8000
 8005074:	017d7840 	.word	0x017d7840
 8005078:	00f42400 	.word	0x00f42400

0800507c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e041      	b.n	8005112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fb fe1a 	bl	8000cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f000 fa92 	bl	80055e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	d001      	beq.n	8005134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e044      	b.n	80051be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1e      	ldr	r2, [pc, #120]	; (80051cc <HAL_TIM_Base_Start_IT+0xb0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d018      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x6c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515e:	d013      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x6c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00e      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x6c>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d009      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x6c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x6c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a16      	ldr	r2, [pc, #88]	; (80051dc <HAL_TIM_Base_Start_IT+0xc0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d111      	bne.n	80051ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b06      	cmp	r3, #6
 8005198:	d010      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051aa:	e007      	b.n	80051bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40000c00 	.word	0x40000c00
 80051dc:	40014000 	.word	0x40014000

080051e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d122      	bne.n	800523c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b02      	cmp	r3, #2
 8005202:	d11b      	bne.n	800523c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0202 	mvn.w	r2, #2
 800520c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f9bf 	bl	80055a6 <HAL_TIM_IC_CaptureCallback>
 8005228:	e005      	b.n	8005236 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f9b1 	bl	8005592 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f9c2 	bl	80055ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b04      	cmp	r3, #4
 8005248:	d122      	bne.n	8005290 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b04      	cmp	r3, #4
 8005256:	d11b      	bne.n	8005290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0204 	mvn.w	r2, #4
 8005260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f995 	bl	80055a6 <HAL_TIM_IC_CaptureCallback>
 800527c:	e005      	b.n	800528a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f987 	bl	8005592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f998 	bl	80055ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b08      	cmp	r3, #8
 800529c:	d122      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d11b      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0208 	mvn.w	r2, #8
 80052b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2204      	movs	r2, #4
 80052ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f96b 	bl	80055a6 <HAL_TIM_IC_CaptureCallback>
 80052d0:	e005      	b.n	80052de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f95d 	bl	8005592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f96e 	bl	80055ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	2b10      	cmp	r3, #16
 80052f0:	d122      	bne.n	8005338 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d11b      	bne.n	8005338 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0210 	mvn.w	r2, #16
 8005308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2208      	movs	r2, #8
 800530e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f941 	bl	80055a6 <HAL_TIM_IC_CaptureCallback>
 8005324:	e005      	b.n	8005332 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f933 	bl	8005592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f944 	bl	80055ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b01      	cmp	r3, #1
 8005344:	d10e      	bne.n	8005364 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b01      	cmp	r3, #1
 8005352:	d107      	bne.n	8005364 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0201 	mvn.w	r2, #1
 800535c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f90d 	bl	800557e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536e:	2b80      	cmp	r3, #128	; 0x80
 8005370:	d10e      	bne.n	8005390 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537c:	2b80      	cmp	r3, #128	; 0x80
 800537e:	d107      	bne.n	8005390 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fabc 	bl	8005908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539a:	2b40      	cmp	r3, #64	; 0x40
 800539c:	d10e      	bne.n	80053bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b40      	cmp	r3, #64	; 0x40
 80053aa:	d107      	bne.n	80053bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f909 	bl	80055ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d10e      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d107      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0220 	mvn.w	r2, #32
 80053e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa86 	bl	80058f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e8:	bf00      	nop
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_TIM_ConfigClockSource+0x1c>
 8005408:	2302      	movs	r3, #2
 800540a:	e0b4      	b.n	8005576 <HAL_TIM_ConfigClockSource+0x186>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800542a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005432:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005444:	d03e      	beq.n	80054c4 <HAL_TIM_ConfigClockSource+0xd4>
 8005446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544a:	f200 8087 	bhi.w	800555c <HAL_TIM_ConfigClockSource+0x16c>
 800544e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005452:	f000 8086 	beq.w	8005562 <HAL_TIM_ConfigClockSource+0x172>
 8005456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545a:	d87f      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
 800545c:	2b70      	cmp	r3, #112	; 0x70
 800545e:	d01a      	beq.n	8005496 <HAL_TIM_ConfigClockSource+0xa6>
 8005460:	2b70      	cmp	r3, #112	; 0x70
 8005462:	d87b      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
 8005464:	2b60      	cmp	r3, #96	; 0x60
 8005466:	d050      	beq.n	800550a <HAL_TIM_ConfigClockSource+0x11a>
 8005468:	2b60      	cmp	r3, #96	; 0x60
 800546a:	d877      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
 800546c:	2b50      	cmp	r3, #80	; 0x50
 800546e:	d03c      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0xfa>
 8005470:	2b50      	cmp	r3, #80	; 0x50
 8005472:	d873      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
 8005474:	2b40      	cmp	r3, #64	; 0x40
 8005476:	d058      	beq.n	800552a <HAL_TIM_ConfigClockSource+0x13a>
 8005478:	2b40      	cmp	r3, #64	; 0x40
 800547a:	d86f      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
 800547c:	2b30      	cmp	r3, #48	; 0x30
 800547e:	d064      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x15a>
 8005480:	2b30      	cmp	r3, #48	; 0x30
 8005482:	d86b      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
 8005484:	2b20      	cmp	r3, #32
 8005486:	d060      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x15a>
 8005488:	2b20      	cmp	r3, #32
 800548a:	d867      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d05c      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x15a>
 8005490:	2b10      	cmp	r3, #16
 8005492:	d05a      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x15a>
 8005494:	e062      	b.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6899      	ldr	r1, [r3, #8]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f000 f997 	bl	80057d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	609a      	str	r2, [r3, #8]
      break;
 80054c2:	e04f      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	6899      	ldr	r1, [r3, #8]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f000 f980 	bl	80057d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054e6:	609a      	str	r2, [r3, #8]
      break;
 80054e8:	e03c      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6859      	ldr	r1, [r3, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f000 f8f4 	bl	80056e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2150      	movs	r1, #80	; 0x50
 8005502:	4618      	mov	r0, r3
 8005504:	f000 f94d 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 8005508:	e02c      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6859      	ldr	r1, [r3, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	461a      	mov	r2, r3
 8005518:	f000 f913 	bl	8005742 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2160      	movs	r1, #96	; 0x60
 8005522:	4618      	mov	r0, r3
 8005524:	f000 f93d 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 8005528:	e01c      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6859      	ldr	r1, [r3, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	461a      	mov	r2, r3
 8005538:	f000 f8d4 	bl	80056e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2140      	movs	r1, #64	; 0x40
 8005542:	4618      	mov	r0, r3
 8005544:	f000 f92d 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 8005548:	e00c      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4619      	mov	r1, r3
 8005554:	4610      	mov	r0, r2
 8005556:	f000 f924 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 800555a:	e003      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	73fb      	strb	r3, [r7, #15]
      break;
 8005560:	e000      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005562:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a34      	ldr	r2, [pc, #208]	; (80056c8 <TIM_Base_SetConfig+0xe4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00f      	beq.n	800561c <TIM_Base_SetConfig+0x38>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005602:	d00b      	beq.n	800561c <TIM_Base_SetConfig+0x38>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a31      	ldr	r2, [pc, #196]	; (80056cc <TIM_Base_SetConfig+0xe8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d007      	beq.n	800561c <TIM_Base_SetConfig+0x38>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a30      	ldr	r2, [pc, #192]	; (80056d0 <TIM_Base_SetConfig+0xec>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d003      	beq.n	800561c <TIM_Base_SetConfig+0x38>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a2f      	ldr	r2, [pc, #188]	; (80056d4 <TIM_Base_SetConfig+0xf0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d108      	bne.n	800562e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a25      	ldr	r2, [pc, #148]	; (80056c8 <TIM_Base_SetConfig+0xe4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01b      	beq.n	800566e <TIM_Base_SetConfig+0x8a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563c:	d017      	beq.n	800566e <TIM_Base_SetConfig+0x8a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a22      	ldr	r2, [pc, #136]	; (80056cc <TIM_Base_SetConfig+0xe8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <TIM_Base_SetConfig+0x8a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a21      	ldr	r2, [pc, #132]	; (80056d0 <TIM_Base_SetConfig+0xec>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00f      	beq.n	800566e <TIM_Base_SetConfig+0x8a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a20      	ldr	r2, [pc, #128]	; (80056d4 <TIM_Base_SetConfig+0xf0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00b      	beq.n	800566e <TIM_Base_SetConfig+0x8a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a1f      	ldr	r2, [pc, #124]	; (80056d8 <TIM_Base_SetConfig+0xf4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d007      	beq.n	800566e <TIM_Base_SetConfig+0x8a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a1e      	ldr	r2, [pc, #120]	; (80056dc <TIM_Base_SetConfig+0xf8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d003      	beq.n	800566e <TIM_Base_SetConfig+0x8a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a1d      	ldr	r2, [pc, #116]	; (80056e0 <TIM_Base_SetConfig+0xfc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d108      	bne.n	8005680 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a08      	ldr	r2, [pc, #32]	; (80056c8 <TIM_Base_SetConfig+0xe4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d103      	bne.n	80056b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	615a      	str	r2, [r3, #20]
}
 80056ba:	bf00      	nop
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40010000 	.word	0x40010000
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800
 80056d4:	40000c00 	.word	0x40000c00
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40014400 	.word	0x40014400
 80056e0:	40014800 	.word	0x40014800

080056e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f023 0201 	bic.w	r2, r3, #1
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800570e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f023 030a 	bic.w	r3, r3, #10
 8005720:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005742:	b480      	push	{r7}
 8005744:	b087      	sub	sp, #28
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f023 0210 	bic.w	r2, r3, #16
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800576c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	031b      	lsls	r3, r3, #12
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800577e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	f043 0307 	orr.w	r3, r3, #7
 80057c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	609a      	str	r2, [r3, #8]
}
 80057cc:	bf00      	nop
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	021a      	lsls	r2, r3, #8
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4313      	orrs	r3, r2
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	609a      	str	r2, [r3, #8]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800582c:	2302      	movs	r3, #2
 800582e:	e050      	b.n	80058d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1c      	ldr	r2, [pc, #112]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d018      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587c:	d013      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a18      	ldr	r2, [pc, #96]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00e      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a16      	ldr	r2, [pc, #88]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d009      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a15      	ldr	r2, [pc, #84]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d004      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a13      	ldr	r2, [pc, #76]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d10c      	bne.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40010000 	.word	0x40010000
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40000800 	.word	0x40000800
 80058ec:	40000c00 	.word	0x40000c00
 80058f0:	40014000 	.word	0x40014000

080058f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800591c:	b084      	sub	sp, #16
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	f107 001c 	add.w	r0, r7, #28
 800592a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	2b01      	cmp	r3, #1
 8005932:	d122      	bne.n	800597a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800595c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595e:	2b01      	cmp	r3, #1
 8005960:	d105      	bne.n	800596e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f001 fbee 	bl	8007150 <USB_CoreReset>
 8005974:	4603      	mov	r3, r0
 8005976:	73fb      	strb	r3, [r7, #15]
 8005978:	e01a      	b.n	80059b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f001 fbe2 	bl	8007150 <USB_CoreReset>
 800598c:	4603      	mov	r3, r0
 800598e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	639a      	str	r2, [r3, #56]	; 0x38
 80059a2:	e005      	b.n	80059b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d10b      	bne.n	80059ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f043 0206 	orr.w	r2, r3, #6
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f043 0220 	orr.w	r2, r3, #32
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059da:	b004      	add	sp, #16
 80059dc:	4770      	bx	lr
	...

080059e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	4613      	mov	r3, r2
 80059ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d165      	bne.n	8005ac0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4a41      	ldr	r2, [pc, #260]	; (8005afc <USB_SetTurnaroundTime+0x11c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d906      	bls.n	8005a0a <USB_SetTurnaroundTime+0x2a>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4a40      	ldr	r2, [pc, #256]	; (8005b00 <USB_SetTurnaroundTime+0x120>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d202      	bcs.n	8005a0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a04:	230f      	movs	r3, #15
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	e062      	b.n	8005ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4a3c      	ldr	r2, [pc, #240]	; (8005b00 <USB_SetTurnaroundTime+0x120>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d306      	bcc.n	8005a20 <USB_SetTurnaroundTime+0x40>
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	4a3b      	ldr	r2, [pc, #236]	; (8005b04 <USB_SetTurnaroundTime+0x124>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d202      	bcs.n	8005a20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a1a:	230e      	movs	r3, #14
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	e057      	b.n	8005ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4a38      	ldr	r2, [pc, #224]	; (8005b04 <USB_SetTurnaroundTime+0x124>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d306      	bcc.n	8005a36 <USB_SetTurnaroundTime+0x56>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4a37      	ldr	r2, [pc, #220]	; (8005b08 <USB_SetTurnaroundTime+0x128>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d202      	bcs.n	8005a36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a30:	230d      	movs	r3, #13
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	e04c      	b.n	8005ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	4a33      	ldr	r2, [pc, #204]	; (8005b08 <USB_SetTurnaroundTime+0x128>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d306      	bcc.n	8005a4c <USB_SetTurnaroundTime+0x6c>
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4a32      	ldr	r2, [pc, #200]	; (8005b0c <USB_SetTurnaroundTime+0x12c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d802      	bhi.n	8005a4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a46:	230c      	movs	r3, #12
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	e041      	b.n	8005ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4a2f      	ldr	r2, [pc, #188]	; (8005b0c <USB_SetTurnaroundTime+0x12c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d906      	bls.n	8005a62 <USB_SetTurnaroundTime+0x82>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4a2e      	ldr	r2, [pc, #184]	; (8005b10 <USB_SetTurnaroundTime+0x130>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d802      	bhi.n	8005a62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a5c:	230b      	movs	r3, #11
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	e036      	b.n	8005ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	4a2a      	ldr	r2, [pc, #168]	; (8005b10 <USB_SetTurnaroundTime+0x130>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d906      	bls.n	8005a78 <USB_SetTurnaroundTime+0x98>
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	4a29      	ldr	r2, [pc, #164]	; (8005b14 <USB_SetTurnaroundTime+0x134>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d802      	bhi.n	8005a78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a72:	230a      	movs	r3, #10
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	e02b      	b.n	8005ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4a26      	ldr	r2, [pc, #152]	; (8005b14 <USB_SetTurnaroundTime+0x134>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d906      	bls.n	8005a8e <USB_SetTurnaroundTime+0xae>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4a25      	ldr	r2, [pc, #148]	; (8005b18 <USB_SetTurnaroundTime+0x138>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d202      	bcs.n	8005a8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a88:	2309      	movs	r3, #9
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	e020      	b.n	8005ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4a21      	ldr	r2, [pc, #132]	; (8005b18 <USB_SetTurnaroundTime+0x138>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d306      	bcc.n	8005aa4 <USB_SetTurnaroundTime+0xc4>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	4a20      	ldr	r2, [pc, #128]	; (8005b1c <USB_SetTurnaroundTime+0x13c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d802      	bhi.n	8005aa4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e015      	b.n	8005ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4a1d      	ldr	r2, [pc, #116]	; (8005b1c <USB_SetTurnaroundTime+0x13c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d906      	bls.n	8005aba <USB_SetTurnaroundTime+0xda>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4a1c      	ldr	r2, [pc, #112]	; (8005b20 <USB_SetTurnaroundTime+0x140>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d202      	bcs.n	8005aba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ab4:	2307      	movs	r3, #7
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	e00a      	b.n	8005ad0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005aba:	2306      	movs	r3, #6
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	e007      	b.n	8005ad0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d102      	bne.n	8005acc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ac6:	2309      	movs	r3, #9
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	e001      	b.n	8005ad0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005acc:	2309      	movs	r3, #9
 8005ace:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	029b      	lsls	r3, r3, #10
 8005ae4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	00d8acbf 	.word	0x00d8acbf
 8005b00:	00e4e1c0 	.word	0x00e4e1c0
 8005b04:	00f42400 	.word	0x00f42400
 8005b08:	01067380 	.word	0x01067380
 8005b0c:	011a499f 	.word	0x011a499f
 8005b10:	01312cff 	.word	0x01312cff
 8005b14:	014ca43f 	.word	0x014ca43f
 8005b18:	016e3600 	.word	0x016e3600
 8005b1c:	01a6ab1f 	.word	0x01a6ab1f
 8005b20:	01e84800 	.word	0x01e84800

08005b24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f043 0201 	orr.w	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f023 0201 	bic.w	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d115      	bne.n	8005bb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b96:	2001      	movs	r0, #1
 8005b98:	f7fb f964 	bl	8000e64 <HAL_Delay>
      ms++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f001 fa45 	bl	8007032 <USB_GetMode>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d01e      	beq.n	8005bec <USB_SetCurrentMode+0x84>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b31      	cmp	r3, #49	; 0x31
 8005bb2:	d9f0      	bls.n	8005b96 <USB_SetCurrentMode+0x2e>
 8005bb4:	e01a      	b.n	8005bec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d115      	bne.n	8005be8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bc8:	2001      	movs	r0, #1
 8005bca:	f7fb f94b 	bl	8000e64 <HAL_Delay>
      ms++;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 fa2c 	bl	8007032 <USB_GetMode>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <USB_SetCurrentMode+0x84>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b31      	cmp	r3, #49	; 0x31
 8005be4:	d9f0      	bls.n	8005bc8 <USB_SetCurrentMode+0x60>
 8005be6:	e001      	b.n	8005bec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e005      	b.n	8005bf8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b32      	cmp	r3, #50	; 0x32
 8005bf0:	d101      	bne.n	8005bf6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c00:	b084      	sub	sp, #16
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b086      	sub	sp, #24
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	e009      	b.n	8005c34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	3340      	adds	r3, #64	; 0x40
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	3301      	adds	r3, #1
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b0e      	cmp	r3, #14
 8005c38:	d9f2      	bls.n	8005c20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d11c      	bne.n	8005c7a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c4e:	f043 0302 	orr.w	r3, r3, #2
 8005c52:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	639a      	str	r2, [r3, #56]	; 0x38
 8005c78:	e00b      	b.n	8005c92 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c98:	461a      	mov	r2, r3
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cac:	461a      	mov	r2, r3
 8005cae:	680b      	ldr	r3, [r1, #0]
 8005cb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d10c      	bne.n	8005cd2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d104      	bne.n	8005cc8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f965 	bl	8005f90 <USB_SetDevSpeed>
 8005cc6:	e008      	b.n	8005cda <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cc8:	2101      	movs	r1, #1
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f960 	bl	8005f90 <USB_SetDevSpeed>
 8005cd0:	e003      	b.n	8005cda <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cd2:	2103      	movs	r1, #3
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f95b 	bl	8005f90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cda:	2110      	movs	r1, #16
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f8f3 	bl	8005ec8 <USB_FlushTxFifo>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f91f 	bl	8005f30 <USB_FlushRxFifo>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d02:	461a      	mov	r2, r3
 8005d04:	2300      	movs	r3, #0
 8005d06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2300      	movs	r3, #0
 8005d12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d20:	2300      	movs	r3, #0
 8005d22:	613b      	str	r3, [r7, #16]
 8005d24:	e043      	b.n	8005dae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d3c:	d118      	bne.n	8005d70 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	461a      	mov	r2, r3
 8005d52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	e013      	b.n	8005d82 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d66:	461a      	mov	r2, r3
 8005d68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	e008      	b.n	8005d82 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2300      	movs	r3, #0
 8005d92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da0:	461a      	mov	r2, r3
 8005da2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005da6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	3301      	adds	r3, #1
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d3b7      	bcc.n	8005d26 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	e043      	b.n	8005e44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd2:	d118      	bne.n	8005e06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10a      	bne.n	8005df0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de6:	461a      	mov	r2, r3
 8005de8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	e013      	b.n	8005e18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	e008      	b.n	8005e18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e12:	461a      	mov	r2, r3
 8005e14:	2300      	movs	r3, #0
 8005e16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e24:	461a      	mov	r2, r3
 8005e26:	2300      	movs	r3, #0
 8005e28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e36:	461a      	mov	r2, r3
 8005e38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	3301      	adds	r3, #1
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d3b7      	bcc.n	8005dbc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	f043 0210 	orr.w	r2, r3, #16
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699a      	ldr	r2, [r3, #24]
 8005e84:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <USB_DevInit+0x2c4>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f043 0208 	orr.w	r2, r3, #8
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d107      	bne.n	8005eb4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eac:	f043 0304 	orr.w	r3, r3, #4
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ec0:	b004      	add	sp, #16
 8005ec2:	4770      	bx	lr
 8005ec4:	803c3800 	.word	0x803c3800

08005ec8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <USB_FlushTxFifo+0x64>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d901      	bls.n	8005ee8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e01b      	b.n	8005f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	daf2      	bge.n	8005ed6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	019b      	lsls	r3, r3, #6
 8005ef8:	f043 0220 	orr.w	r2, r3, #32
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3301      	adds	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4a08      	ldr	r2, [pc, #32]	; (8005f2c <USB_FlushTxFifo+0x64>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e006      	b.n	8005f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	d0f0      	beq.n	8005f00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	00030d40 	.word	0x00030d40

08005f30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4a11      	ldr	r2, [pc, #68]	; (8005f8c <USB_FlushRxFifo+0x5c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d901      	bls.n	8005f4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e018      	b.n	8005f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	daf2      	bge.n	8005f3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2210      	movs	r2, #16
 8005f5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <USB_FlushRxFifo+0x5c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e006      	b.n	8005f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0310 	and.w	r3, r3, #16
 8005f7a:	2b10      	cmp	r3, #16
 8005f7c:	d0f0      	beq.n	8005f60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	00030d40 	.word	0x00030d40

08005f90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	68f9      	ldr	r1, [r7, #12]
 8005fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 0306 	and.w	r3, r3, #6
 8005fda:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d102      	bne.n	8005fe8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	75fb      	strb	r3, [r7, #23]
 8005fe6:	e00a      	b.n	8005ffe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d002      	beq.n	8005ff4 <USB_GetDevSpeed+0x32>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b06      	cmp	r3, #6
 8005ff2:	d102      	bne.n	8005ffa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	75fb      	strb	r3, [r7, #23]
 8005ff8:	e001      	b.n	8005ffe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ffa:	230f      	movs	r3, #15
 8005ffc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006000:	4618      	mov	r0, r3
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d13a      	bne.n	800609e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	f003 030f 	and.w	r3, r3, #15
 8006038:	2101      	movs	r1, #1
 800603a:	fa01 f303 	lsl.w	r3, r1, r3
 800603e:	b29b      	uxth	r3, r3
 8006040:	68f9      	ldr	r1, [r7, #12]
 8006042:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006046:	4313      	orrs	r3, r2
 8006048:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d155      	bne.n	800610c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	791b      	ldrb	r3, [r3, #4]
 800607a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800607c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	059b      	lsls	r3, r3, #22
 8006082:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006084:	4313      	orrs	r3, r2
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	0151      	lsls	r1, r2, #5
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	440a      	add	r2, r1
 800608e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	e036      	b.n	800610c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a4:	69da      	ldr	r2, [r3, #28]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	2101      	movs	r1, #1
 80060b0:	fa01 f303 	lsl.w	r3, r1, r3
 80060b4:	041b      	lsls	r3, r3, #16
 80060b6:	68f9      	ldr	r1, [r7, #12]
 80060b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060bc:	4313      	orrs	r3, r2
 80060be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d11a      	bne.n	800610c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	791b      	ldrb	r3, [r3, #4]
 80060f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060f2:	430b      	orrs	r3, r1
 80060f4:	4313      	orrs	r3, r2
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
	...

0800611c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d161      	bne.n	80061fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800614a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800614e:	d11f      	bne.n	8006190 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	440a      	add	r2, r1
 8006166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800616e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	440a      	add	r2, r1
 8006186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800618a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800618e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	2101      	movs	r1, #1
 80061a2:	fa01 f303 	lsl.w	r3, r1, r3
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	43db      	mvns	r3, r3
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061b0:	4013      	ands	r3, r2
 80061b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	2101      	movs	r1, #1
 80061c6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	43db      	mvns	r3, r3
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061d4:	4013      	ands	r3, r2
 80061d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	0159      	lsls	r1, r3, #5
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	440b      	add	r3, r1
 80061ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f2:	4619      	mov	r1, r3
 80061f4:	4b35      	ldr	r3, [pc, #212]	; (80062cc <USB_DeactivateEndpoint+0x1b0>)
 80061f6:	4013      	ands	r3, r2
 80061f8:	600b      	str	r3, [r1, #0]
 80061fa:	e060      	b.n	80062be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800620e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006212:	d11f      	bne.n	8006254 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	0151      	lsls	r1, r2, #5
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	440a      	add	r2, r1
 800622a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800622e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006232:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	0151      	lsls	r1, r2, #5
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	440a      	add	r2, r1
 800624a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800624e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006252:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	2101      	movs	r1, #1
 8006266:	fa01 f303 	lsl.w	r3, r1, r3
 800626a:	041b      	lsls	r3, r3, #16
 800626c:	43db      	mvns	r3, r3
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006274:	4013      	ands	r3, r2
 8006276:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627e:	69da      	ldr	r2, [r3, #28]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	f003 030f 	and.w	r3, r3, #15
 8006288:	2101      	movs	r1, #1
 800628a:	fa01 f303 	lsl.w	r3, r1, r3
 800628e:	041b      	lsls	r3, r3, #16
 8006290:	43db      	mvns	r3, r3
 8006292:	68f9      	ldr	r1, [r7, #12]
 8006294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006298:	4013      	ands	r3, r2
 800629a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	0159      	lsls	r1, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	440b      	add	r3, r1
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	4619      	mov	r1, r3
 80062b8:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <USB_DeactivateEndpoint+0x1b4>)
 80062ba:	4013      	ands	r3, r2
 80062bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	ec337800 	.word	0xec337800
 80062d0:	eff37800 	.word	0xeff37800

080062d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08a      	sub	sp, #40	; 0x28
 80062d8:	af02      	add	r7, sp, #8
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	f040 815c 	bne.w	80065ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d132      	bne.n	8006364 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	440a      	add	r2, r1
 8006314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006318:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800631c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006320:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	0151      	lsls	r1, r2, #5
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	440a      	add	r2, r1
 8006338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006340:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	0151      	lsls	r1, r2, #5
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	440a      	add	r2, r1
 8006358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635c:	0cdb      	lsrs	r3, r3, #19
 800635e:	04db      	lsls	r3, r3, #19
 8006360:	6113      	str	r3, [r2, #16]
 8006362:	e074      	b.n	800644e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	69fa      	ldr	r2, [r7, #28]
 8006378:	440a      	add	r2, r1
 800637a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800637e:	0cdb      	lsrs	r3, r3, #19
 8006380:	04db      	lsls	r3, r3, #19
 8006382:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	440a      	add	r2, r1
 800639a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800639e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6999      	ldr	r1, [r3, #24]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	440b      	add	r3, r1
 80063c0:	1e59      	subs	r1, r3, #1
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80063ca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063cc:	4b9d      	ldr	r3, [pc, #628]	; (8006644 <USB_EPStartXfer+0x370>)
 80063ce:	400b      	ands	r3, r1
 80063d0:	69b9      	ldr	r1, [r7, #24]
 80063d2:	0148      	lsls	r0, r1, #5
 80063d4:	69f9      	ldr	r1, [r7, #28]
 80063d6:	4401      	add	r1, r0
 80063d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063dc:	4313      	orrs	r3, r2
 80063de:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063f6:	69b9      	ldr	r1, [r7, #24]
 80063f8:	0148      	lsls	r0, r1, #5
 80063fa:	69f9      	ldr	r1, [r7, #28]
 80063fc:	4401      	add	r1, r0
 80063fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006402:	4313      	orrs	r3, r2
 8006404:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	791b      	ldrb	r3, [r3, #4]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d11f      	bne.n	800644e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	440a      	add	r2, r1
 8006424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006428:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800642c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	440a      	add	r2, r1
 8006444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006448:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800644c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d14b      	bne.n	80064ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d009      	beq.n	8006470 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006468:	461a      	mov	r2, r3
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	791b      	ldrb	r3, [r3, #4]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d128      	bne.n	80064ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d110      	bne.n	80064aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	0151      	lsls	r1, r2, #5
 800649a:	69fa      	ldr	r2, [r7, #28]
 800649c:	440a      	add	r2, r1
 800649e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	e00f      	b.n	80064ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	0151      	lsls	r1, r2, #5
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	440a      	add	r2, r1
 80064e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	e133      	b.n	8006754 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	0151      	lsls	r1, r2, #5
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	440a      	add	r2, r1
 8006502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006506:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800650a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	791b      	ldrb	r3, [r3, #4]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d015      	beq.n	8006540 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 811b 	beq.w	8006754 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	2101      	movs	r1, #1
 8006530:	fa01 f303 	lsl.w	r3, r1, r3
 8006534:	69f9      	ldr	r1, [r7, #28]
 8006536:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800653a:	4313      	orrs	r3, r2
 800653c:	634b      	str	r3, [r1, #52]	; 0x34
 800653e:	e109      	b.n	8006754 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654c:	2b00      	cmp	r3, #0
 800654e:	d110      	bne.n	8006572 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	0151      	lsls	r1, r2, #5
 8006562:	69fa      	ldr	r2, [r7, #28]
 8006564:	440a      	add	r2, r1
 8006566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	e00f      	b.n	8006592 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	0151      	lsls	r1, r2, #5
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	440a      	add	r2, r1
 8006588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006590:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	6919      	ldr	r1, [r3, #16]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	781a      	ldrb	r2, [r3, #0]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	b298      	uxth	r0, r3
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	4603      	mov	r3, r0
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 fade 	bl	8006b68 <USB_WritePacket>
 80065ac:	e0d2      	b.n	8006754 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c8:	0cdb      	lsrs	r3, r3, #19
 80065ca:	04db      	lsls	r3, r3, #19
 80065cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	69fa      	ldr	r2, [r7, #28]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d126      	bne.n	8006648 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006610:	69b9      	ldr	r1, [r7, #24]
 8006612:	0148      	lsls	r0, r1, #5
 8006614:	69f9      	ldr	r1, [r7, #28]
 8006616:	4401      	add	r1, r0
 8006618:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800661c:	4313      	orrs	r3, r2
 800661e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	0151      	lsls	r1, r2, #5
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	440a      	add	r2, r1
 8006636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800663a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800663e:	6113      	str	r3, [r2, #16]
 8006640:	e03a      	b.n	80066b8 <USB_EPStartXfer+0x3e4>
 8006642:	bf00      	nop
 8006644:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	699a      	ldr	r2, [r3, #24]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	4413      	add	r3, r2
 8006652:	1e5a      	subs	r2, r3, #1
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	fbb2 f3f3 	udiv	r3, r2, r3
 800665c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	8afa      	ldrh	r2, [r7, #22]
 8006664:	fb03 f202 	mul.w	r2, r3, r2
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006678:	691a      	ldr	r2, [r3, #16]
 800667a:	8afb      	ldrh	r3, [r7, #22]
 800667c:	04d9      	lsls	r1, r3, #19
 800667e:	4b38      	ldr	r3, [pc, #224]	; (8006760 <USB_EPStartXfer+0x48c>)
 8006680:	400b      	ands	r3, r1
 8006682:	69b9      	ldr	r1, [r7, #24]
 8006684:	0148      	lsls	r0, r1, #5
 8006686:	69f9      	ldr	r1, [r7, #28]
 8006688:	4401      	add	r1, r0
 800668a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800668e:	4313      	orrs	r3, r2
 8006690:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a8:	69b9      	ldr	r1, [r7, #24]
 80066aa:	0148      	lsls	r0, r1, #5
 80066ac:	69f9      	ldr	r1, [r7, #28]
 80066ae:	4401      	add	r1, r0
 80066b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066b4:	4313      	orrs	r3, r2
 80066b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d10d      	bne.n	80066da <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d009      	beq.n	80066da <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	6919      	ldr	r1, [r3, #16]
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d6:	460a      	mov	r2, r1
 80066d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	791b      	ldrb	r3, [r3, #4]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d128      	bne.n	8006734 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d110      	bne.n	8006714 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	440a      	add	r2, r1
 8006708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800670c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	e00f      	b.n	8006734 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	440a      	add	r2, r1
 800672a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800672e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006732:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	0151      	lsls	r1, r2, #5
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	440a      	add	r2, r1
 800674a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800674e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006752:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3720      	adds	r7, #32
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	1ff80000 	.word	0x1ff80000

08006764 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	785b      	ldrb	r3, [r3, #1]
 8006780:	2b01      	cmp	r3, #1
 8006782:	f040 80ce 	bne.w	8006922 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d132      	bne.n	80067f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	0151      	lsls	r1, r2, #5
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	440a      	add	r2, r1
 80067a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	0151      	lsls	r1, r2, #5
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	440a      	add	r2, r1
 80067c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ec:	0cdb      	lsrs	r3, r3, #19
 80067ee:	04db      	lsls	r3, r3, #19
 80067f0:	6113      	str	r3, [r2, #16]
 80067f2:	e04e      	b.n	8006892 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	0151      	lsls	r1, r2, #5
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	440a      	add	r2, r1
 800680a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800680e:	0cdb      	lsrs	r3, r3, #19
 8006810:	04db      	lsls	r3, r3, #19
 8006812:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	440a      	add	r2, r1
 800682a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800682e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006832:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006836:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	699a      	ldr	r2, [r3, #24]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	429a      	cmp	r2, r3
 8006842:	d903      	bls.n	800684c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	68da      	ldr	r2, [r3, #12]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800686a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006882:	6939      	ldr	r1, [r7, #16]
 8006884:	0148      	lsls	r0, r1, #5
 8006886:	6979      	ldr	r1, [r7, #20]
 8006888:	4401      	add	r1, r0
 800688a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800688e:	4313      	orrs	r3, r2
 8006890:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006892:	79fb      	ldrb	r3, [r7, #7]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d11e      	bne.n	80068d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d009      	beq.n	80068b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ac:	461a      	mov	r2, r3
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	0151      	lsls	r1, r2, #5
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	440a      	add	r2, r1
 80068ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	e097      	b.n	8006a06 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	0151      	lsls	r1, r2, #5
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	440a      	add	r2, r1
 80068ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 8083 	beq.w	8006a06 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	2101      	movs	r1, #1
 8006912:	fa01 f303 	lsl.w	r3, r1, r3
 8006916:	6979      	ldr	r1, [r7, #20]
 8006918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800691c:	4313      	orrs	r3, r2
 800691e:	634b      	str	r3, [r1, #52]	; 0x34
 8006920:	e071      	b.n	8006a06 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	0151      	lsls	r1, r2, #5
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	440a      	add	r2, r1
 8006938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800693c:	0cdb      	lsrs	r3, r3, #19
 800693e:	04db      	lsls	r3, r3, #19
 8006940:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	0151      	lsls	r1, r2, #5
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	440a      	add	r2, r1
 8006958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800695c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006960:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006964:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	0151      	lsls	r1, r2, #5
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	440a      	add	r2, r1
 8006994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006998:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800699c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069b4:	6939      	ldr	r1, [r7, #16]
 80069b6:	0148      	lsls	r0, r1, #5
 80069b8:	6979      	ldr	r1, [r7, #20]
 80069ba:	4401      	add	r1, r0
 80069bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069c0:	4313      	orrs	r3, r2
 80069c2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d10d      	bne.n	80069e6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	6919      	ldr	r1, [r3, #16]
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e2:	460a      	mov	r2, r1
 80069e4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	0151      	lsls	r1, r2, #5
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	440a      	add	r2, r1
 80069fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d14a      	bne.n	8006ac8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a4a:	f040 8086 	bne.w	8006b5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	7812      	ldrb	r2, [r2, #0]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	7812      	ldrb	r2, [r2, #0]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d902      	bls.n	8006aac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	75fb      	strb	r3, [r7, #23]
          break;
 8006aaa:	e056      	b.n	8006b5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ac4:	d0e7      	beq.n	8006a96 <USB_EPStopXfer+0x82>
 8006ac6:	e048      	b.n	8006b5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ae0:	d13b      	bne.n	8006b5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	7812      	ldrb	r2, [r2, #0]
 8006af6:	0151      	lsls	r1, r2, #5
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	440a      	add	r2, r1
 8006afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	7812      	ldrb	r2, [r2, #0]
 8006b1a:	0151      	lsls	r1, r2, #5
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	440a      	add	r2, r1
 8006b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d902      	bls.n	8006b40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b3e:	e00c      	b.n	8006b5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b58:	d0e7      	beq.n	8006b2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b089      	sub	sp, #36	; 0x24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	4611      	mov	r1, r2
 8006b74:	461a      	mov	r2, r3
 8006b76:	460b      	mov	r3, r1
 8006b78:	71fb      	strb	r3, [r7, #7]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006b86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d123      	bne.n	8006bd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b8e:	88bb      	ldrh	r3, [r7, #4]
 8006b90:	3303      	adds	r3, #3
 8006b92:	089b      	lsrs	r3, r3, #2
 8006b94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b96:	2300      	movs	r3, #0
 8006b98:	61bb      	str	r3, [r7, #24]
 8006b9a:	e018      	b.n	8006bce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	031a      	lsls	r2, r3, #12
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba8:	461a      	mov	r2, r3
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	61bb      	str	r3, [r7, #24]
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d3e2      	bcc.n	8006b9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3724      	adds	r7, #36	; 0x24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b08b      	sub	sp, #44	; 0x2c
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006bfa:	88fb      	ldrh	r3, [r7, #6]
 8006bfc:	089b      	lsrs	r3, r3, #2
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c02:	88fb      	ldrh	r3, [r7, #6]
 8006c04:	f003 0303 	and.w	r3, r3, #3
 8006c08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	623b      	str	r3, [r7, #32]
 8006c0e:	e014      	b.n	8006c3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	3301      	adds	r3, #1
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	3301      	adds	r3, #1
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	3301      	adds	r3, #1
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	3301      	adds	r3, #1
 8006c38:	623b      	str	r3, [r7, #32]
 8006c3a:	6a3a      	ldr	r2, [r7, #32]
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d3e6      	bcc.n	8006c10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c42:	8bfb      	ldrh	r3, [r7, #30]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01e      	beq.n	8006c86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c52:	461a      	mov	r2, r3
 8006c54:	f107 0310 	add.w	r3, r7, #16
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	701a      	strb	r2, [r3, #0]
      i++;
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	3301      	adds	r3, #1
 8006c72:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	3301      	adds	r3, #1
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006c7a:	8bfb      	ldrh	r3, [r7, #30]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c80:	8bfb      	ldrh	r3, [r7, #30]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1ea      	bne.n	8006c5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	372c      	adds	r7, #44	; 0x2c
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	785b      	ldrb	r3, [r3, #1]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d12c      	bne.n	8006d0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	db12      	blt.n	8006ce8 <USB_EPSetStall+0x54>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00f      	beq.n	8006ce8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	0151      	lsls	r1, r2, #5
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	440a      	add	r2, r1
 8006cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ce6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	0151      	lsls	r1, r2, #5
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	440a      	add	r2, r1
 8006cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	e02b      	b.n	8006d62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	db12      	blt.n	8006d42 <USB_EPSetStall+0xae>
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00f      	beq.n	8006d42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	0151      	lsls	r1, r2, #5
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	440a      	add	r2, r1
 8006d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	0151      	lsls	r1, r2, #5
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	440a      	add	r2, r1
 8006d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	785b      	ldrb	r3, [r3, #1]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d128      	bne.n	8006dde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	0151      	lsls	r1, r2, #5
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	440a      	add	r2, r1
 8006da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006daa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	791b      	ldrb	r3, [r3, #4]
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d003      	beq.n	8006dbc <USB_EPClearStall+0x4c>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	791b      	ldrb	r3, [r3, #4]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d138      	bne.n	8006e2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	0151      	lsls	r1, r2, #5
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	440a      	add	r2, r1
 8006dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	e027      	b.n	8006e2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	0151      	lsls	r1, r2, #5
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	440a      	add	r2, r1
 8006df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dfc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	791b      	ldrb	r3, [r3, #4]
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d003      	beq.n	8006e0e <USB_EPClearStall+0x9e>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	791b      	ldrb	r3, [r3, #4]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d10f      	bne.n	8006e2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	0151      	lsls	r1, r2, #5
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	440a      	add	r2, r1
 8006e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e70:	68f9      	ldr	r1, [r7, #12]
 8006e72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e76:	4313      	orrs	r3, r2
 8006e78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ea2:	f023 0303 	bic.w	r3, r3, #3
 8006ea6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eb6:	f023 0302 	bic.w	r3, r3, #2
 8006eba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ee4:	f023 0303 	bic.w	r3, r3, #3
 8006ee8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ef8:	f043 0302 	orr.w	r3, r3, #2
 8006efc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4013      	ands	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f24:	68fb      	ldr	r3, [r7, #12]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	4013      	ands	r3, r2
 8006f54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	0c1b      	lsrs	r3, r3, #16
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	4013      	ands	r3, r2
 8006f88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	b29b      	uxth	r3, r3
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006faa:	78fb      	ldrb	r3, [r7, #3]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b087      	sub	sp, #28
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ffa:	78fb      	ldrb	r3, [r7, #3]
 8006ffc:	f003 030f 	and.w	r3, r3, #15
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	fa22 f303 	lsr.w	r3, r2, r3
 8007006:	01db      	lsls	r3, r3, #7
 8007008:	b2db      	uxtb	r3, r3
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4013      	ands	r3, r2
 8007022:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007024:	68bb      	ldr	r3, [r7, #8]
}
 8007026:	4618      	mov	r0, r3
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	f003 0301 	and.w	r3, r3, #1
}
 8007042:	4618      	mov	r0, r3
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007068:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800706c:	f023 0307 	bic.w	r3, r3, #7
 8007070:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007084:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	460b      	mov	r3, r1
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	333c      	adds	r3, #60	; 0x3c
 80070aa:	3304      	adds	r3, #4
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	4a26      	ldr	r2, [pc, #152]	; (800714c <USB_EP0_OutStart+0xb8>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d90a      	bls.n	80070ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070c8:	d101      	bne.n	80070ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	e037      	b.n	800713e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d4:	461a      	mov	r2, r3
 80070d6:	2300      	movs	r3, #0
 80070d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070fc:	f043 0318 	orr.w	r3, r3, #24
 8007100:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007110:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007114:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007116:	7afb      	ldrb	r3, [r7, #11]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d10f      	bne.n	800713c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007122:	461a      	mov	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007136:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800713a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	371c      	adds	r7, #28
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	4f54300a 	.word	0x4f54300a

08007150 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3301      	adds	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4a13      	ldr	r2, [pc, #76]	; (80071b4 <USB_CoreReset+0x64>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d901      	bls.n	800716e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e01b      	b.n	80071a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	daf2      	bge.n	800715c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f043 0201 	orr.w	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3301      	adds	r3, #1
 800718a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4a09      	ldr	r2, [pc, #36]	; (80071b4 <USB_CoreReset+0x64>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d901      	bls.n	8007198 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e006      	b.n	80071a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d0f0      	beq.n	8007186 <USB_CoreReset+0x36>

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	00030d40 	.word	0x00030d40

080071b8 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 80071c4:	f643 4050 	movw	r0, #15440	; 0x3c50
 80071c8:	f002 fbb4 	bl	8009934 <USBD_static_malloc>
 80071cc:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d109      	bne.n	80071e8 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	32b0      	adds	r2, #176	; 0xb0
 80071de:	2100      	movs	r1, #0
 80071e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80071e4:	2302      	movs	r3, #2
 80071e6:	e07e      	b.n	80072e6 <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	32b0      	adds	r2, #176	; 0xb0
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	32b0      	adds	r2, #176	; 0xb0
 8007202:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	7c1b      	ldrb	r3, [r3, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10e      	bne.n	8007232 <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8007214:	4b36      	ldr	r3, [pc, #216]	; (80072f0 <USBD_AUDIO_Init+0x138>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	f003 020f 	and.w	r2, r3, #15
 800721c:	6879      	ldr	r1, [r7, #4]
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	440b      	add	r3, r1
 8007228:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800722c:	2201      	movs	r2, #1
 800722e:	801a      	strh	r2, [r3, #0]
 8007230:	e00d      	b.n	800724e <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8007232:	4b2f      	ldr	r3, [pc, #188]	; (80072f0 <USBD_AUDIO_Init+0x138>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	f003 020f 	and.w	r2, r3, #15
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	440b      	add	r3, r1
 8007246:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800724a:	2201      	movs	r2, #1
 800724c:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800724e:	4b28      	ldr	r3, [pc, #160]	; (80072f0 <USBD_AUDIO_Init+0x138>)
 8007250:	7819      	ldrb	r1, [r3, #0]
 8007252:	23c0      	movs	r3, #192	; 0xc0
 8007254:	2201      	movs	r2, #1
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f002 fa49 	bl	80096ee <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 800725c:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <USBD_AUDIO_Init+0x138>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	f003 020f 	and.w	r2, r3, #15
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007274:	2201      	movs	r2, #1
 8007276:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007284:	2203      	movs	r2, #3
 8007286:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007290:	2200      	movs	r2, #0
 8007292:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800729c:	2200      	movs	r2, #0
 800729e:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	33b0      	adds	r3, #176	; 0xb0
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2200      	movs	r2, #0
 80072c2:	2146      	movs	r1, #70	; 0x46
 80072c4:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80072c8:	4798      	blx	r3
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e008      	b.n	80072e6 <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 80072d4:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <USBD_AUDIO_Init+0x138>)
 80072d6:	7819      	ldrb	r1, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	1d1a      	adds	r2, r3, #4
 80072dc:	23c0      	movs	r3, #192	; 0xc0
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f002 faf4 	bl	80098cc <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	200000be 	.word	0x200000be

080072f4 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 8007300:	4b28      	ldr	r3, [pc, #160]	; (80073a4 <USBD_AUDIO_DeInit+0xb0>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f002 fa17 	bl	800973a <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 800730c:	4b25      	ldr	r3, [pc, #148]	; (80073a4 <USBD_AUDIO_DeInit+0xb0>)
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	f003 020f 	and.w	r2, r3, #15
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	440b      	add	r3, r1
 8007320:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007324:	2200      	movs	r2, #0
 8007326:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 8007328:	4b1e      	ldr	r3, [pc, #120]	; (80073a4 <USBD_AUDIO_DeInit+0xb0>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	f003 020f 	and.w	r2, r3, #15
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	440b      	add	r3, r1
 800733c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007340:	2200      	movs	r2, #0
 8007342:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	32b0      	adds	r2, #176	; 0xb0
 800734e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d020      	beq.n	8007398 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	33b0      	adds	r3, #176	; 0xb0
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	2000      	movs	r0, #0
 800736a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	32b0      	adds	r2, #176	; 0xb0
 8007376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800737a:	4618      	mov	r0, r3
 800737c:	f002 fae8 	bl	8009950 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	32b0      	adds	r2, #176	; 0xb0
 800738a:	2100      	movs	r1, #0
 800738c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	200000be 	.word	0x200000be

080073a8 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	32b0      	adds	r2, #176	; 0xb0
 80073c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c8:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d101      	bne.n	80073d4 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e0c1      	b.n	8007558 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01a      	beq.n	8007416 <USBD_AUDIO_Setup+0x6e>
 80073e0:	2b20      	cmp	r3, #32
 80073e2:	f040 80b1 	bne.w	8007548 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	785b      	ldrb	r3, [r3, #1]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d006      	beq.n	80073fc <USBD_AUDIO_Setup+0x54>
 80073ee:	2b81      	cmp	r3, #129	; 0x81
 80073f0:	d109      	bne.n	8007406 <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fa91 	bl	800791c <AUDIO_REQ_GetCurrent>
          break;
 80073fa:	e00b      	b.n	8007414 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fab8 	bl	8007974 <AUDIO_REQ_SetCurrent>
          break;
 8007404:	e006      	b.n	8007414 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 fd1c 	bl	8008e46 <USBD_CtlError>
          ret = USBD_FAIL;
 800740e:	2303      	movs	r3, #3
 8007410:	75fb      	strb	r3, [r7, #23]
          break;
 8007412:	bf00      	nop
      }
      break;
 8007414:	e09f      	b.n	8007556 <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	785b      	ldrb	r3, [r3, #1]
 800741a:	2b0b      	cmp	r3, #11
 800741c:	f200 8089 	bhi.w	8007532 <USBD_AUDIO_Setup+0x18a>
 8007420:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <USBD_AUDIO_Setup+0x80>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	08007459 	.word	0x08007459
 800742c:	08007541 	.word	0x08007541
 8007430:	08007533 	.word	0x08007533
 8007434:	08007533 	.word	0x08007533
 8007438:	08007533 	.word	0x08007533
 800743c:	08007533 	.word	0x08007533
 8007440:	08007483 	.word	0x08007483
 8007444:	08007533 	.word	0x08007533
 8007448:	08007533 	.word	0x08007533
 800744c:	08007533 	.word	0x08007533
 8007450:	080074cb 	.word	0x080074cb
 8007454:	080074f3 	.word	0x080074f3
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b03      	cmp	r3, #3
 8007462:	d107      	bne.n	8007474 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007464:	f107 0308 	add.w	r3, r7, #8
 8007468:	2202      	movs	r2, #2
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 fd5b 	bl	8008f28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007472:	e068      	b.n	8007546 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 fce5 	bl	8008e46 <USBD_CtlError>
            ret = USBD_FAIL;
 800747c:	2303      	movs	r3, #3
 800747e:	75fb      	strb	r3, [r7, #23]
          break;
 8007480:	e061      	b.n	8007546 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	885b      	ldrh	r3, [r3, #2]
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b21      	cmp	r3, #33	; 0x21
 800748c:	d15a      	bne.n	8007544 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fadb 	bl	8007a50 <USBD_AUDIO_GetAudioHeaderDesc>
 800749a:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00c      	beq.n	80074bc <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	88db      	ldrh	r3, [r3, #6]
 80074a6:	2b09      	cmp	r3, #9
 80074a8:	bf28      	it	cs
 80074aa:	2309      	movcs	r3, #9
 80074ac:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 80074ae:	897b      	ldrh	r3, [r7, #10]
 80074b0:	461a      	mov	r2, r3
 80074b2:	68f9      	ldr	r1, [r7, #12]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 fd37 	bl	8008f28 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 80074ba:	e043      	b.n	8007544 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f001 fcc1 	bl	8008e46 <USBD_CtlError>
              ret = USBD_FAIL;
 80074c4:	2303      	movs	r3, #3
 80074c6:	75fb      	strb	r3, [r7, #23]
          break;
 80074c8:	e03c      	b.n	8007544 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d106      	bne.n	80074e4 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	2201      	movs	r2, #1
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 fd23 	bl	8008f28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074e2:	e030      	b.n	8007546 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 fcad 	bl	8008e46 <USBD_CtlError>
            ret = USBD_FAIL;
 80074ec:	2303      	movs	r3, #3
 80074ee:	75fb      	strb	r3, [r7, #23]
          break;
 80074f0:	e029      	b.n	8007546 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d112      	bne.n	8007524 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	885b      	ldrh	r3, [r3, #2]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b01      	cmp	r3, #1
 8007506:	d806      	bhi.n	8007516 <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	885b      	ldrh	r3, [r3, #2]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	461a      	mov	r2, r3
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007514:	e017      	b.n	8007546 <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f001 fc94 	bl	8008e46 <USBD_CtlError>
              ret = USBD_FAIL;
 800751e:	2303      	movs	r3, #3
 8007520:	75fb      	strb	r3, [r7, #23]
          break;
 8007522:	e010      	b.n	8007546 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 fc8d 	bl	8008e46 <USBD_CtlError>
            ret = USBD_FAIL;
 800752c:	2303      	movs	r3, #3
 800752e:	75fb      	strb	r3, [r7, #23]
          break;
 8007530:	e009      	b.n	8007546 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 fc86 	bl	8008e46 <USBD_CtlError>
          ret = USBD_FAIL;
 800753a:	2303      	movs	r3, #3
 800753c:	75fb      	strb	r3, [r7, #23]
          break;
 800753e:	e002      	b.n	8007546 <USBD_AUDIO_Setup+0x19e>
          break;
 8007540:	bf00      	nop
 8007542:	e008      	b.n	8007556 <USBD_AUDIO_Setup+0x1ae>
          break;
 8007544:	bf00      	nop
      }
      break;
 8007546:	e006      	b.n	8007556 <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 fc7b 	bl	8008e46 <USBD_CtlError>
      ret = USBD_FAIL;
 8007550:	2303      	movs	r3, #3
 8007552:	75fb      	strb	r3, [r7, #23]
      break;
 8007554:	bf00      	nop
  }

  return (uint8_t)ret;
 8007556:	7dfb      	ldrb	r3, [r7, #23]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	226d      	movs	r2, #109	; 0x6d
 800756c:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800756e:	4b03      	ldr	r3, [pc, #12]	; (800757c <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8007570:	4618      	mov	r0, r3
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	20000044 	.word	0x20000044

08007580 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	32b0      	adds	r2, #176	; 0xb0
 80075ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b0:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e02a      	b.n	8007612 <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075c2:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d122      	bne.n	8007610 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075d0:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d11b      	bne.n	8007610 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	33b0      	adds	r3, #176	; 0xb0
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80075f0:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 80075f4:	4610      	mov	r0, r2
 80075f6:	4798      	blx	r3
      haudio->control.cmd = 0U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <USBD_AUDIO_Sync>:
  * @param  pdev: device instance
  * @param  offset: audio offset
  * @retval status
  */
void USBD_AUDIO_Sync(USBD_HandleTypeDef *pdev, AUDIO_OffsetTypeDef offset)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;
 8007652:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8007656:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	32b0      	adds	r2, #176	; 0xb0
 8007662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80a3 	beq.w	80077b2 <USBD_AUDIO_Sync+0x16c>
  {
    return;
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	32b0      	adds	r2, #176	; 0xb0
 8007676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767a:	60bb      	str	r3, [r7, #8]

  haudio->offset = offset;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007682:	461a      	mov	r2, r3
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	f882 3c04 	strb.w	r3, [r2, #3076]	; 0xc04

  if (haudio->rd_enable == 1U)
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007690:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 8007694:	2b01      	cmp	r3, #1
 8007696:	d11b      	bne.n	80076d0 <USBD_AUDIO_Sync+0x8a>
  {
    haudio->rd_ptr += (uint16_t)BufferSize;
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800769e:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	4413      	add	r3, r2
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80076b0:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06

    if (haudio->rd_ptr == AUDIO_TOTAL_BUF_SIZE)
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80076ba:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 80076be:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80076c2:	d105      	bne.n	80076d0 <USBD_AUDIO_Sync+0x8a>
    {
      /* roll back */
      haudio->rd_ptr = 0U;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80076ca:	2200      	movs	r2, #0
 80076cc:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
    }
  }

  if (haudio->rd_ptr > haudio->wr_ptr)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80076d6:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80076e0:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d924      	bls.n	8007732 <USBD_AUDIO_Sync+0xec>
  {
    if ((haudio->rd_ptr - haudio->wr_ptr) < AUDIO_OUT_PACKET)
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80076ee:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 80076f2:	461a      	mov	r2, r3
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80076fa:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	2bbf      	cmp	r3, #191	; 0xbf
 8007702:	dc03      	bgt.n	800770c <USBD_AUDIO_Sync+0xc6>
    {
      BufferSize += 4U;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3304      	adds	r3, #4
 8007708:	60fb      	str	r3, [r7, #12]
 800770a:	e036      	b.n	800777a <USBD_AUDIO_Sync+0x134>
    }
    else
    {
      if ((haudio->rd_ptr - haudio->wr_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007712:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8007716:	461a      	mov	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800771e:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 8007728:	dd27      	ble.n	800777a <USBD_AUDIO_Sync+0x134>
      {
        BufferSize -= 4U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3b04      	subs	r3, #4
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	e023      	b.n	800777a <USBD_AUDIO_Sync+0x134>
      }
    }
  }
  else
  {
    if ((haudio->wr_ptr - haudio->rd_ptr) < AUDIO_OUT_PACKET)
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007738:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800773c:	461a      	mov	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007744:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2bbf      	cmp	r3, #191	; 0xbf
 800774c:	dc03      	bgt.n	8007756 <USBD_AUDIO_Sync+0x110>
    {
      BufferSize -= 4U;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3b04      	subs	r3, #4
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	e011      	b.n	800777a <USBD_AUDIO_Sync+0x134>
    }
    else
    {
      if ((haudio->wr_ptr - haudio->rd_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800775c:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8007760:	461a      	mov	r2, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007768:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 8007772:	dd02      	ble.n	800777a <USBD_AUDIO_Sync+0x134>
      {
        BufferSize += 4U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	3304      	adds	r3, #4
 8007778:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  if (haudio->offset == AUDIO_OFFSET_FULL)
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007780:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 8007784:	2b02      	cmp	r3, #2
 8007786:	d115      	bne.n	80077b4 <USBD_AUDIO_Sync+0x16e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	33b0      	adds	r3, #176	; 0xb0
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	1d10      	adds	r0, r2, #4
 800779e:	2202      	movs	r2, #2
 80077a0:	68f9      	ldr	r1, [r7, #12]
 80077a2:	4798      	blx	r3
                                                                        BufferSize, AUDIO_CMD_PLAY);
    haudio->offset = AUDIO_OFFSET_NONE;
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
 80077b0:	e000      	b.n	80077b4 <USBD_AUDIO_Sync+0x16e>
    return;
 80077b2:	bf00      	nop
  }
}
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	460b      	mov	r3, r1
 80077c4:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	32b0      	adds	r2, #176	; 0xb0
 8007806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780a:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007812:	2303      	movs	r3, #3
 8007814:	e07c      	b.n	8007910 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 8007816:	4b40      	ldr	r3, [pc, #256]	; (8007918 <USBD_AUDIO_DataOut+0x128>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	78fa      	ldrb	r2, [r7, #3]
 800781c:	429a      	cmp	r2, r3
 800781e:	d176      	bne.n	800790e <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f002 f872 	bl	800990e <USBD_LL_GetRxDataSize>
 800782a:	4603      	mov	r3, r0
 800782c:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	33b0      	adds	r3, #176	; 0xb0
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4413      	add	r3, r2
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8007846:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 800784a:	4611      	mov	r1, r2
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	440a      	add	r2, r1
 8007850:	1d10      	adds	r0, r2, #4
 8007852:	8979      	ldrh	r1, [r7, #10]
 8007854:	2201      	movs	r2, #1
 8007856:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800785e:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 8007862:	897b      	ldrh	r3, [r7, #10]
 8007864:	4413      	add	r3, r2
 8007866:	b29a      	uxth	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800786e:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007878:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800787c:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8007880:	d121      	bne.n	80078c6 <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007888:	2200      	movs	r2, #0
 800788a:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007894:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 8007898:	2b03      	cmp	r3, #3
 800789a:	d114      	bne.n	80078c6 <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	33b0      	adds	r3, #176	; 0xb0
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4413      	add	r3, r2
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	1d10      	adds	r0, r2, #4
 80078b2:	2201      	movs	r2, #1
 80078b4:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80078b8:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80078cc:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10d      	bne.n	80078f0 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80078da:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80078de:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80078e2:	d105      	bne.n	80078f0 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 80078f0:	4b09      	ldr	r3, [pc, #36]	; (8007918 <USBD_AUDIO_DataOut+0x128>)
 80078f2:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80078fa:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80078fe:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4413      	add	r3, r2
 8007904:	1d1a      	adds	r2, r3, #4
 8007906:	23c0      	movs	r3, #192	; 0xc0
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 ffdf 	bl	80098cc <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	200000be 	.word	0x200000be

0800791c <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	32b0      	adds	r2, #176	; 0xb0
 8007930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007934:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d017      	beq.n	800796c <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007942:	330b      	adds	r3, #11
 8007944:	2240      	movs	r2, #64	; 0x40
 8007946:	2100      	movs	r1, #0
 8007948:	4618      	mov	r0, r3
 800794a:	f002 f85b 	bl	8009a04 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007954:	330b      	adds	r3, #11
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	88d2      	ldrh	r2, [r2, #6]
 800795a:	2a40      	cmp	r2, #64	; 0x40
 800795c:	bf28      	it	cs
 800795e:	2240      	movcs	r2, #64	; 0x40
 8007960:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f001 fadf 	bl	8008f28 <USBD_CtlSendData>
 800796a:	e000      	b.n	800796e <AUDIO_REQ_GetCurrent+0x52>
    return;
 800796c:	bf00      	nop
}
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	32b0      	adds	r2, #176	; 0xb0
 8007988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d02f      	beq.n	80079f4 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	88db      	ldrh	r3, [r3, #6]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d02c      	beq.n	80079f6 <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	88db      	ldrh	r3, [r3, #6]
 80079ac:	2b3f      	cmp	r3, #63	; 0x3f
 80079ae:	d803      	bhi.n	80079b8 <AUDIO_REQ_SetCurrent+0x44>
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	88db      	ldrh	r3, [r3, #6]
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	e000      	b.n	80079ba <AUDIO_REQ_SetCurrent+0x46>
 80079b8:	2240      	movs	r2, #64	; 0x40
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80079c0:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	889b      	ldrh	r3, [r3, #4]
 80079c8:	0a1b      	lsrs	r3, r3, #8
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80079d4:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80079de:	330b      	adds	r3, #11
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80079e6:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 fac7 	bl	8008f80 <USBD_CtlPrepareRx>
 80079f2:	e000      	b.n	80079f6 <AUDIO_REQ_SetCurrent+0x82>
    return;
 80079f4:	bf00      	nop
  }
}
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	220a      	movs	r2, #10
 8007a08:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8007a0a:	4b03      	ldr	r3, [pc, #12]	; (8007a18 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	200000b4 	.word	0x200000b4

08007a1c <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e009      	b.n	8007a44 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	33b0      	adds	r3, #176	; 0xb0
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 8007a60:	2300      	movs	r3, #0
 8007a62:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	885b      	ldrh	r3, [r3, #2]
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d91c      	bls.n	8007aae <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a7c:	e011      	b.n	8007aa2 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a7e:	f107 030a 	add.w	r3, r7, #10
 8007a82:	4619      	mov	r1, r3
 8007a84:	6978      	ldr	r0, [r7, #20]
 8007a86:	f000 fbe0 	bl	800824a <USBD_GetNextDesc>
 8007a8a:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	785b      	ldrb	r3, [r3, #1]
 8007a90:	2b24      	cmp	r3, #36	; 0x24
 8007a92:	d106      	bne.n	8007aa2 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d102      	bne.n	8007aa2 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	613b      	str	r3, [r7, #16]
        break;
 8007aa0:	e005      	b.n	8007aae <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	885b      	ldrh	r3, [r3, #2]
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	897b      	ldrh	r3, [r7, #10]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d8e7      	bhi.n	8007a7e <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 8007aae:	693b      	ldr	r3, [r7, #16]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e01f      	b.n	8007b10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	79fa      	ldrb	r2, [r7, #7]
 8007b02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f001 fd8b 	bl	8009620 <USBD_LL_Init>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e025      	b.n	8007b7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	32ae      	adds	r2, #174	; 0xae
 8007b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00f      	beq.n	8007b6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	32ae      	adds	r2, #174	; 0xae
 8007b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	f107 020e 	add.w	r2, r7, #14
 8007b60:	4610      	mov	r0, r2
 8007b62:	4798      	blx	r3
 8007b64:	4602      	mov	r2, r0
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 fd93 	bl	80096b8 <USBD_LL_Start>
 8007b92:	4603      	mov	r3, r0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ba4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d009      	beq.n	8007be0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	78fa      	ldrb	r2, [r7, #3]
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	4798      	blx	r3
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	78fa      	ldrb	r2, [r7, #3]
 8007c04:	4611      	mov	r1, r2
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c10:	2303      	movs	r3, #3
 8007c12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 f8ce 	bl	8008dd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c44:	461a      	mov	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c52:	f003 031f 	and.w	r3, r3, #31
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d01a      	beq.n	8007c90 <USBD_LL_SetupStage+0x72>
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d822      	bhi.n	8007ca4 <USBD_LL_SetupStage+0x86>
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <USBD_LL_SetupStage+0x4a>
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d00a      	beq.n	8007c7c <USBD_LL_SetupStage+0x5e>
 8007c66:	e01d      	b.n	8007ca4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fb25 	bl	80082c0 <USBD_StdDevReq>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]
      break;
 8007c7a:	e020      	b.n	8007cbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fb8d 	bl	80083a4 <USBD_StdItfReq>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c8e:	e016      	b.n	8007cbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fbef 	bl	800847c <USBD_StdEPReq>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca2:	e00c      	b.n	8007cbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007caa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fd60 	bl	8009778 <USBD_LL_StallEP>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbc:	bf00      	nop
  }

  return ret;
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007cda:	7afb      	ldrb	r3, [r7, #11]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d16e      	bne.n	8007dbe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ce6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	f040 8098 	bne.w	8007e24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d913      	bls.n	8007d28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	1ad2      	subs	r2, r2, r3
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	4293      	cmp	r3, r2
 8007d18:	bf28      	it	cs
 8007d1a:	4613      	movcs	r3, r2
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	6879      	ldr	r1, [r7, #4]
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f001 f94a 	bl	8008fba <USBD_CtlContinueRx>
 8007d26:	e07d      	b.n	8007e24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d2e:	f003 031f 	and.w	r3, r3, #31
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d014      	beq.n	8007d60 <USBD_LL_DataOutStage+0x98>
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d81d      	bhi.n	8007d76 <USBD_LL_DataOutStage+0xae>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <USBD_LL_DataOutStage+0x7c>
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d003      	beq.n	8007d4a <USBD_LL_DataOutStage+0x82>
 8007d42:	e018      	b.n	8007d76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	75bb      	strb	r3, [r7, #22]
            break;
 8007d48:	e018      	b.n	8007d7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	4619      	mov	r1, r3
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 fa5e 	bl	8008216 <USBD_CoreFindIF>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	75bb      	strb	r3, [r7, #22]
            break;
 8007d5e:	e00d      	b.n	8007d7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	4619      	mov	r1, r3
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 fa60 	bl	8008230 <USBD_CoreFindEP>
 8007d70:	4603      	mov	r3, r0
 8007d72:	75bb      	strb	r3, [r7, #22]
            break;
 8007d74:	e002      	b.n	8007d7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	75bb      	strb	r3, [r7, #22]
            break;
 8007d7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d7c:	7dbb      	ldrb	r3, [r7, #22]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d119      	bne.n	8007db6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d113      	bne.n	8007db6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d8e:	7dba      	ldrb	r2, [r7, #22]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	32ae      	adds	r2, #174	; 0xae
 8007d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00b      	beq.n	8007db6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007d9e:	7dba      	ldrb	r2, [r7, #22]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007da6:	7dba      	ldrb	r2, [r7, #22]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	32ae      	adds	r2, #174	; 0xae
 8007dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f001 f910 	bl	8008fdc <USBD_CtlSendStatus>
 8007dbc:	e032      	b.n	8007e24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 fa31 	bl	8008230 <USBD_CoreFindEP>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dd2:	7dbb      	ldrb	r3, [r7, #22]
 8007dd4:	2bff      	cmp	r3, #255	; 0xff
 8007dd6:	d025      	beq.n	8007e24 <USBD_LL_DataOutStage+0x15c>
 8007dd8:	7dbb      	ldrb	r3, [r7, #22]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d122      	bne.n	8007e24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d117      	bne.n	8007e1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007dea:	7dba      	ldrb	r2, [r7, #22]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	32ae      	adds	r2, #174	; 0xae
 8007df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00f      	beq.n	8007e1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007dfa:	7dba      	ldrb	r2, [r7, #22]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e02:	7dba      	ldrb	r2, [r7, #22]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	32ae      	adds	r2, #174	; 0xae
 8007e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	7afa      	ldrb	r2, [r7, #11]
 8007e10:	4611      	mov	r1, r2
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	4798      	blx	r3
 8007e16:	4603      	mov	r3, r0
 8007e18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e1a:	7dfb      	ldrb	r3, [r7, #23]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
 8007e22:	e000      	b.n	8007e26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b086      	sub	sp, #24
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	460b      	mov	r3, r1
 8007e38:	607a      	str	r2, [r7, #4]
 8007e3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d16f      	bne.n	8007f22 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3314      	adds	r3, #20
 8007e46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d15a      	bne.n	8007f08 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	689a      	ldr	r2, [r3, #8]
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d914      	bls.n	8007e88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	1ad2      	subs	r2, r2, r3
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	461a      	mov	r2, r3
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f001 f872 	bl	8008f5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2100      	movs	r1, #0
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f001 fd23 	bl	80098cc <USBD_LL_PrepareReceive>
 8007e86:	e03f      	b.n	8007f08 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d11c      	bne.n	8007ece <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d316      	bcc.n	8007ece <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d20f      	bcs.n	8007ece <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f001 f853 	bl	8008f5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f001 fd00 	bl	80098cc <USBD_LL_PrepareReceive>
 8007ecc:	e01c      	b.n	8007f08 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d10f      	bne.n	8007efa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007efa:	2180      	movs	r1, #128	; 0x80
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f001 fc3b 	bl	8009778 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f001 f87d 	bl	8009002 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d03a      	beq.n	8007f88 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7ff fe42 	bl	8007b9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f20:	e032      	b.n	8007f88 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f22:	7afb      	ldrb	r3, [r7, #11]
 8007f24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 f97f 	bl	8008230 <USBD_CoreFindEP>
 8007f32:	4603      	mov	r3, r0
 8007f34:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	2bff      	cmp	r3, #255	; 0xff
 8007f3a:	d025      	beq.n	8007f88 <USBD_LL_DataInStage+0x15a>
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d122      	bne.n	8007f88 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	d11c      	bne.n	8007f88 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f4e:	7dfa      	ldrb	r2, [r7, #23]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	32ae      	adds	r2, #174	; 0xae
 8007f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d014      	beq.n	8007f88 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f5e:	7dfa      	ldrb	r2, [r7, #23]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f66:	7dfa      	ldrb	r2, [r7, #23]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	32ae      	adds	r2, #174	; 0xae
 8007f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	7afa      	ldrb	r2, [r7, #11]
 8007f74:	4611      	mov	r1, r2
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	4798      	blx	r3
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f7e:	7dbb      	ldrb	r3, [r7, #22]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007f84:	7dbb      	ldrb	r3, [r7, #22]
 8007f86:	e000      	b.n	8007f8a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d014      	beq.n	8007ff8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00e      	beq.n	8007ff8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6852      	ldr	r2, [r2, #4]
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	4611      	mov	r1, r2
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ff8:	2340      	movs	r3, #64	; 0x40
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 fb75 	bl	80096ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2240      	movs	r2, #64	; 0x40
 8008010:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008014:	2340      	movs	r3, #64	; 0x40
 8008016:	2200      	movs	r2, #0
 8008018:	2180      	movs	r1, #128	; 0x80
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 fb67 	bl	80096ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2240      	movs	r2, #64	; 0x40
 800802a:	621a      	str	r2, [r3, #32]

  return ret;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	78fa      	ldrb	r2, [r7, #3]
 8008046:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008064:	b2da      	uxtb	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2204      	movs	r2, #4
 8008070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b04      	cmp	r3, #4
 8008094:	d106      	bne.n	80080a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800809c:	b2da      	uxtb	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d110      	bne.n	80080e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00b      	beq.n	80080e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d005      	beq.n	80080e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e2:	69db      	ldr	r3, [r3, #28]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	460b      	mov	r3, r1
 80080fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	32ae      	adds	r2, #174	; 0xae
 8008108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008110:	2303      	movs	r3, #3
 8008112:	e01c      	b.n	800814e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b03      	cmp	r3, #3
 800811e:	d115      	bne.n	800814c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	32ae      	adds	r2, #174	; 0xae
 800812a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	32ae      	adds	r2, #174	; 0xae
 800813e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	78fa      	ldrb	r2, [r7, #3]
 8008146:	4611      	mov	r1, r2
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	460b      	mov	r3, r1
 8008160:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	32ae      	adds	r2, #174	; 0xae
 800816c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008174:	2303      	movs	r3, #3
 8008176:	e01c      	b.n	80081b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b03      	cmp	r3, #3
 8008182:	d115      	bne.n	80081b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	32ae      	adds	r2, #174	; 0xae
 800818e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00b      	beq.n	80081b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	32ae      	adds	r2, #174	; 0xae
 80081a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	78fa      	ldrb	r2, [r7, #3]
 80081aa:	4611      	mov	r1, r2
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00e      	beq.n	800820c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	6852      	ldr	r2, [r2, #4]
 80081fa:	b2d2      	uxtb	r2, r2
 80081fc:	4611      	mov	r1, r2
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	4798      	blx	r3
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008208:	2303      	movs	r3, #3
 800820a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800820c:	7bfb      	ldrb	r3, [r7, #15]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008216:	b480      	push	{r7}
 8008218:	b083      	sub	sp, #12
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	460b      	mov	r3, r1
 8008220:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008222:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008224:	4618      	mov	r0, r3
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	460b      	mov	r3, r1
 800823a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800823c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800824a:	b480      	push	{r7}
 800824c:	b085      	sub	sp, #20
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	881a      	ldrh	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	b29b      	uxth	r3, r3
 8008262:	4413      	add	r3, r2
 8008264:	b29a      	uxth	r2, r3
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4413      	add	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008276:	68fb      	ldr	r3, [r7, #12]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3714      	adds	r7, #20
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	3301      	adds	r3, #1
 800829a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80082a2:	8a3b      	ldrh	r3, [r7, #16]
 80082a4:	021b      	lsls	r3, r3, #8
 80082a6:	b21a      	sxth	r2, r3
 80082a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	b21b      	sxth	r3, r3
 80082b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082b2:	89fb      	ldrh	r3, [r7, #14]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082d6:	2b40      	cmp	r3, #64	; 0x40
 80082d8:	d005      	beq.n	80082e6 <USBD_StdDevReq+0x26>
 80082da:	2b40      	cmp	r3, #64	; 0x40
 80082dc:	d857      	bhi.n	800838e <USBD_StdDevReq+0xce>
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00f      	beq.n	8008302 <USBD_StdDevReq+0x42>
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	d153      	bne.n	800838e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	32ae      	adds	r2, #174	; 0xae
 80082f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	4798      	blx	r3
 80082fc:	4603      	mov	r3, r0
 80082fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008300:	e04a      	b.n	8008398 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	785b      	ldrb	r3, [r3, #1]
 8008306:	2b09      	cmp	r3, #9
 8008308:	d83b      	bhi.n	8008382 <USBD_StdDevReq+0xc2>
 800830a:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <USBD_StdDevReq+0x50>)
 800830c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008310:	08008365 	.word	0x08008365
 8008314:	08008379 	.word	0x08008379
 8008318:	08008383 	.word	0x08008383
 800831c:	0800836f 	.word	0x0800836f
 8008320:	08008383 	.word	0x08008383
 8008324:	08008343 	.word	0x08008343
 8008328:	08008339 	.word	0x08008339
 800832c:	08008383 	.word	0x08008383
 8008330:	0800835b 	.word	0x0800835b
 8008334:	0800834d 	.word	0x0800834d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa3c 	bl	80087b8 <USBD_GetDescriptor>
          break;
 8008340:	e024      	b.n	800838c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fba1 	bl	8008a8c <USBD_SetAddress>
          break;
 800834a:	e01f      	b.n	800838c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fbe0 	bl	8008b14 <USBD_SetConfig>
 8008354:	4603      	mov	r3, r0
 8008356:	73fb      	strb	r3, [r7, #15]
          break;
 8008358:	e018      	b.n	800838c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fc83 	bl	8008c68 <USBD_GetConfig>
          break;
 8008362:	e013      	b.n	800838c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fcb4 	bl	8008cd4 <USBD_GetStatus>
          break;
 800836c:	e00e      	b.n	800838c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fce3 	bl	8008d3c <USBD_SetFeature>
          break;
 8008376:	e009      	b.n	800838c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fd07 	bl	8008d8e <USBD_ClrFeature>
          break;
 8008380:	e004      	b.n	800838c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fd5e 	bl	8008e46 <USBD_CtlError>
          break;
 800838a:	bf00      	nop
      }
      break;
 800838c:	e004      	b.n	8008398 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fd58 	bl	8008e46 <USBD_CtlError>
      break;
 8008396:	bf00      	nop
  }

  return ret;
 8008398:	7bfb      	ldrb	r3, [r7, #15]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop

080083a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083ba:	2b40      	cmp	r3, #64	; 0x40
 80083bc:	d005      	beq.n	80083ca <USBD_StdItfReq+0x26>
 80083be:	2b40      	cmp	r3, #64	; 0x40
 80083c0:	d852      	bhi.n	8008468 <USBD_StdItfReq+0xc4>
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <USBD_StdItfReq+0x26>
 80083c6:	2b20      	cmp	r3, #32
 80083c8:	d14e      	bne.n	8008468 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	3b01      	subs	r3, #1
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d840      	bhi.n	800845a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	889b      	ldrh	r3, [r3, #4]
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d836      	bhi.n	8008450 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	889b      	ldrh	r3, [r3, #4]
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff ff13 	bl	8008216 <USBD_CoreFindIF>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	2bff      	cmp	r3, #255	; 0xff
 80083f8:	d01d      	beq.n	8008436 <USBD_StdItfReq+0x92>
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d11a      	bne.n	8008436 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008400:	7bba      	ldrb	r2, [r7, #14]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	32ae      	adds	r2, #174	; 0xae
 8008406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00f      	beq.n	8008430 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008410:	7bba      	ldrb	r2, [r7, #14]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008418:	7bba      	ldrb	r2, [r7, #14]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	32ae      	adds	r2, #174	; 0xae
 800841e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	4798      	blx	r3
 800842a:	4603      	mov	r3, r0
 800842c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800842e:	e004      	b.n	800843a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008430:	2303      	movs	r3, #3
 8008432:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008434:	e001      	b.n	800843a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008436:	2303      	movs	r3, #3
 8008438:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	88db      	ldrh	r3, [r3, #6]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d110      	bne.n	8008464 <USBD_StdItfReq+0xc0>
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10d      	bne.n	8008464 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fdc7 	bl	8008fdc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800844e:	e009      	b.n	8008464 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fcf7 	bl	8008e46 <USBD_CtlError>
          break;
 8008458:	e004      	b.n	8008464 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fcf2 	bl	8008e46 <USBD_CtlError>
          break;
 8008462:	e000      	b.n	8008466 <USBD_StdItfReq+0xc2>
          break;
 8008464:	bf00      	nop
      }
      break;
 8008466:	e004      	b.n	8008472 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fceb 	bl	8008e46 <USBD_CtlError>
      break;
 8008470:	bf00      	nop
  }

  return ret;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	889b      	ldrh	r3, [r3, #4]
 800848e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	d007      	beq.n	80084ac <USBD_StdEPReq+0x30>
 800849c:	2b40      	cmp	r3, #64	; 0x40
 800849e:	f200 817f 	bhi.w	80087a0 <USBD_StdEPReq+0x324>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d02a      	beq.n	80084fc <USBD_StdEPReq+0x80>
 80084a6:	2b20      	cmp	r3, #32
 80084a8:	f040 817a 	bne.w	80087a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff febd 	bl	8008230 <USBD_CoreFindEP>
 80084b6:	4603      	mov	r3, r0
 80084b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084ba:	7b7b      	ldrb	r3, [r7, #13]
 80084bc:	2bff      	cmp	r3, #255	; 0xff
 80084be:	f000 8174 	beq.w	80087aa <USBD_StdEPReq+0x32e>
 80084c2:	7b7b      	ldrb	r3, [r7, #13]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f040 8170 	bne.w	80087aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80084ca:	7b7a      	ldrb	r2, [r7, #13]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80084d2:	7b7a      	ldrb	r2, [r7, #13]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	32ae      	adds	r2, #174	; 0xae
 80084d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 8163 	beq.w	80087aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80084e4:	7b7a      	ldrb	r2, [r7, #13]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	32ae      	adds	r2, #174	; 0xae
 80084ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
 80084f6:	4603      	mov	r3, r0
 80084f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084fa:	e156      	b.n	80087aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	785b      	ldrb	r3, [r3, #1]
 8008500:	2b03      	cmp	r3, #3
 8008502:	d008      	beq.n	8008516 <USBD_StdEPReq+0x9a>
 8008504:	2b03      	cmp	r3, #3
 8008506:	f300 8145 	bgt.w	8008794 <USBD_StdEPReq+0x318>
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 809b 	beq.w	8008646 <USBD_StdEPReq+0x1ca>
 8008510:	2b01      	cmp	r3, #1
 8008512:	d03c      	beq.n	800858e <USBD_StdEPReq+0x112>
 8008514:	e13e      	b.n	8008794 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b02      	cmp	r3, #2
 8008520:	d002      	beq.n	8008528 <USBD_StdEPReq+0xac>
 8008522:	2b03      	cmp	r3, #3
 8008524:	d016      	beq.n	8008554 <USBD_StdEPReq+0xd8>
 8008526:	e02c      	b.n	8008582 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00d      	beq.n	800854a <USBD_StdEPReq+0xce>
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	2b80      	cmp	r3, #128	; 0x80
 8008532:	d00a      	beq.n	800854a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008534:	7bbb      	ldrb	r3, [r7, #14]
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 f91d 	bl	8009778 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800853e:	2180      	movs	r1, #128	; 0x80
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 f919 	bl	8009778 <USBD_LL_StallEP>
 8008546:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008548:	e020      	b.n	800858c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fc7a 	bl	8008e46 <USBD_CtlError>
              break;
 8008552:	e01b      	b.n	800858c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	885b      	ldrh	r3, [r3, #2]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10e      	bne.n	800857a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800855c:	7bbb      	ldrb	r3, [r7, #14]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00b      	beq.n	800857a <USBD_StdEPReq+0xfe>
 8008562:	7bbb      	ldrb	r3, [r7, #14]
 8008564:	2b80      	cmp	r3, #128	; 0x80
 8008566:	d008      	beq.n	800857a <USBD_StdEPReq+0xfe>
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	88db      	ldrh	r3, [r3, #6]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d104      	bne.n	800857a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	4619      	mov	r1, r3
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f001 f8ff 	bl	8009778 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fd2e 	bl	8008fdc <USBD_CtlSendStatus>

              break;
 8008580:	e004      	b.n	800858c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fc5e 	bl	8008e46 <USBD_CtlError>
              break;
 800858a:	bf00      	nop
          }
          break;
 800858c:	e107      	b.n	800879e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b02      	cmp	r3, #2
 8008598:	d002      	beq.n	80085a0 <USBD_StdEPReq+0x124>
 800859a:	2b03      	cmp	r3, #3
 800859c:	d016      	beq.n	80085cc <USBD_StdEPReq+0x150>
 800859e:	e04b      	b.n	8008638 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00d      	beq.n	80085c2 <USBD_StdEPReq+0x146>
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	2b80      	cmp	r3, #128	; 0x80
 80085aa:	d00a      	beq.n	80085c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 f8e1 	bl	8009778 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085b6:	2180      	movs	r1, #128	; 0x80
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f001 f8dd 	bl	8009778 <USBD_LL_StallEP>
 80085be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085c0:	e040      	b.n	8008644 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fc3e 	bl	8008e46 <USBD_CtlError>
              break;
 80085ca:	e03b      	b.n	8008644 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	885b      	ldrh	r3, [r3, #2]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d136      	bne.n	8008642 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d004      	beq.n	80085e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f001 f8e7 	bl	80097b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fcf7 	bl	8008fdc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff fe1c 	bl	8008230 <USBD_CoreFindEP>
 80085f8:	4603      	mov	r3, r0
 80085fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085fc:	7b7b      	ldrb	r3, [r7, #13]
 80085fe:	2bff      	cmp	r3, #255	; 0xff
 8008600:	d01f      	beq.n	8008642 <USBD_StdEPReq+0x1c6>
 8008602:	7b7b      	ldrb	r3, [r7, #13]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d11c      	bne.n	8008642 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008608:	7b7a      	ldrb	r2, [r7, #13]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008610:	7b7a      	ldrb	r2, [r7, #13]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	32ae      	adds	r2, #174	; 0xae
 8008616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d010      	beq.n	8008642 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008620:	7b7a      	ldrb	r2, [r7, #13]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	32ae      	adds	r2, #174	; 0xae
 8008626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	4798      	blx	r3
 8008632:	4603      	mov	r3, r0
 8008634:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008636:	e004      	b.n	8008642 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fc03 	bl	8008e46 <USBD_CtlError>
              break;
 8008640:	e000      	b.n	8008644 <USBD_StdEPReq+0x1c8>
              break;
 8008642:	bf00      	nop
          }
          break;
 8008644:	e0ab      	b.n	800879e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b02      	cmp	r3, #2
 8008650:	d002      	beq.n	8008658 <USBD_StdEPReq+0x1dc>
 8008652:	2b03      	cmp	r3, #3
 8008654:	d032      	beq.n	80086bc <USBD_StdEPReq+0x240>
 8008656:	e097      	b.n	8008788 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <USBD_StdEPReq+0x1f2>
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	2b80      	cmp	r3, #128	; 0x80
 8008662:	d004      	beq.n	800866e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fbed 	bl	8008e46 <USBD_CtlError>
                break;
 800866c:	e091      	b.n	8008792 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800866e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008672:	2b00      	cmp	r3, #0
 8008674:	da0b      	bge.n	800868e <USBD_StdEPReq+0x212>
 8008676:	7bbb      	ldrb	r3, [r7, #14]
 8008678:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800867c:	4613      	mov	r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	3310      	adds	r3, #16
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	4413      	add	r3, r2
 800868a:	3304      	adds	r3, #4
 800868c:	e00b      	b.n	80086a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	4413      	add	r3, r2
 80086a4:	3304      	adds	r3, #4
 80086a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	2200      	movs	r2, #0
 80086ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2202      	movs	r2, #2
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fc37 	bl	8008f28 <USBD_CtlSendData>
              break;
 80086ba:	e06a      	b.n	8008792 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	da11      	bge.n	80086e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	f003 020f 	and.w	r2, r3, #15
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	4613      	mov	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	3324      	adds	r3, #36	; 0x24
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d117      	bne.n	800870e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fbb0 	bl	8008e46 <USBD_CtlError>
                  break;
 80086e6:	e054      	b.n	8008792 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	f003 020f 	and.w	r2, r3, #15
 80086ee:	6879      	ldr	r1, [r7, #4]
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	440b      	add	r3, r1
 80086fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d104      	bne.n	800870e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fb9d 	bl	8008e46 <USBD_CtlError>
                  break;
 800870c:	e041      	b.n	8008792 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800870e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008712:	2b00      	cmp	r3, #0
 8008714:	da0b      	bge.n	800872e <USBD_StdEPReq+0x2b2>
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800871c:	4613      	mov	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	3310      	adds	r3, #16
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	4413      	add	r3, r2
 800872a:	3304      	adds	r3, #4
 800872c:	e00b      	b.n	8008746 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008734:	4613      	mov	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	4413      	add	r3, r2
 8008744:	3304      	adds	r3, #4
 8008746:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008748:	7bbb      	ldrb	r3, [r7, #14]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <USBD_StdEPReq+0x2d8>
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	2b80      	cmp	r3, #128	; 0x80
 8008752:	d103      	bne.n	800875c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	e00e      	b.n	800877a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f001 f847 	bl	80097f4 <USBD_LL_IsStallEP>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2201      	movs	r2, #1
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	e002      	b.n	800877a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2202      	movs	r2, #2
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fbd1 	bl	8008f28 <USBD_CtlSendData>
              break;
 8008786:	e004      	b.n	8008792 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fb5b 	bl	8008e46 <USBD_CtlError>
              break;
 8008790:	bf00      	nop
          }
          break;
 8008792:	e004      	b.n	800879e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fb55 	bl	8008e46 <USBD_CtlError>
          break;
 800879c:	bf00      	nop
      }
      break;
 800879e:	e005      	b.n	80087ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fb4f 	bl	8008e46 <USBD_CtlError>
      break;
 80087a8:	e000      	b.n	80087ac <USBD_StdEPReq+0x330>
      break;
 80087aa:	bf00      	nop
  }

  return ret;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087c6:	2300      	movs	r3, #0
 80087c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	885b      	ldrh	r3, [r3, #2]
 80087d2:	0a1b      	lsrs	r3, r3, #8
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	3b01      	subs	r3, #1
 80087d8:	2b06      	cmp	r3, #6
 80087da:	f200 8128 	bhi.w	8008a2e <USBD_GetDescriptor+0x276>
 80087de:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <USBD_GetDescriptor+0x2c>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	08008801 	.word	0x08008801
 80087e8:	08008819 	.word	0x08008819
 80087ec:	08008859 	.word	0x08008859
 80087f0:	08008a2f 	.word	0x08008a2f
 80087f4:	08008a2f 	.word	0x08008a2f
 80087f8:	080089cf 	.word	0x080089cf
 80087fc:	080089fb 	.word	0x080089fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	7c12      	ldrb	r2, [r2, #16]
 800880c:	f107 0108 	add.w	r1, r7, #8
 8008810:	4610      	mov	r0, r2
 8008812:	4798      	blx	r3
 8008814:	60f8      	str	r0, [r7, #12]
      break;
 8008816:	e112      	b.n	8008a3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	7c1b      	ldrb	r3, [r3, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10d      	bne.n	800883c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008828:	f107 0208 	add.w	r2, r7, #8
 800882c:	4610      	mov	r0, r2
 800882e:	4798      	blx	r3
 8008830:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3301      	adds	r3, #1
 8008836:	2202      	movs	r2, #2
 8008838:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800883a:	e100      	b.n	8008a3e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008844:	f107 0208 	add.w	r2, r7, #8
 8008848:	4610      	mov	r0, r2
 800884a:	4798      	blx	r3
 800884c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3301      	adds	r3, #1
 8008852:	2202      	movs	r2, #2
 8008854:	701a      	strb	r2, [r3, #0]
      break;
 8008856:	e0f2      	b.n	8008a3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	885b      	ldrh	r3, [r3, #2]
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b05      	cmp	r3, #5
 8008860:	f200 80ac 	bhi.w	80089bc <USBD_GetDescriptor+0x204>
 8008864:	a201      	add	r2, pc, #4	; (adr r2, 800886c <USBD_GetDescriptor+0xb4>)
 8008866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886a:	bf00      	nop
 800886c:	08008885 	.word	0x08008885
 8008870:	080088b9 	.word	0x080088b9
 8008874:	080088ed 	.word	0x080088ed
 8008878:	08008921 	.word	0x08008921
 800887c:	08008955 	.word	0x08008955
 8008880:	08008989 	.word	0x08008989
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00b      	beq.n	80088a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	7c12      	ldrb	r2, [r2, #16]
 800889c:	f107 0108 	add.w	r1, r7, #8
 80088a0:	4610      	mov	r0, r2
 80088a2:	4798      	blx	r3
 80088a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088a6:	e091      	b.n	80089cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 facb 	bl	8008e46 <USBD_CtlError>
            err++;
 80088b0:	7afb      	ldrb	r3, [r7, #11]
 80088b2:	3301      	adds	r3, #1
 80088b4:	72fb      	strb	r3, [r7, #11]
          break;
 80088b6:	e089      	b.n	80089cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00b      	beq.n	80088dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	7c12      	ldrb	r2, [r2, #16]
 80088d0:	f107 0108 	add.w	r1, r7, #8
 80088d4:	4610      	mov	r0, r2
 80088d6:	4798      	blx	r3
 80088d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088da:	e077      	b.n	80089cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fab1 	bl	8008e46 <USBD_CtlError>
            err++;
 80088e4:	7afb      	ldrb	r3, [r7, #11]
 80088e6:	3301      	adds	r3, #1
 80088e8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ea:	e06f      	b.n	80089cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00b      	beq.n	8008910 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	7c12      	ldrb	r2, [r2, #16]
 8008904:	f107 0108 	add.w	r1, r7, #8
 8008908:	4610      	mov	r0, r2
 800890a:	4798      	blx	r3
 800890c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800890e:	e05d      	b.n	80089cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fa97 	bl	8008e46 <USBD_CtlError>
            err++;
 8008918:	7afb      	ldrb	r3, [r7, #11]
 800891a:	3301      	adds	r3, #1
 800891c:	72fb      	strb	r3, [r7, #11]
          break;
 800891e:	e055      	b.n	80089cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00b      	beq.n	8008944 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	7c12      	ldrb	r2, [r2, #16]
 8008938:	f107 0108 	add.w	r1, r7, #8
 800893c:	4610      	mov	r0, r2
 800893e:	4798      	blx	r3
 8008940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008942:	e043      	b.n	80089cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa7d 	bl	8008e46 <USBD_CtlError>
            err++;
 800894c:	7afb      	ldrb	r3, [r7, #11]
 800894e:	3301      	adds	r3, #1
 8008950:	72fb      	strb	r3, [r7, #11]
          break;
 8008952:	e03b      	b.n	80089cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	7c12      	ldrb	r2, [r2, #16]
 800896c:	f107 0108 	add.w	r1, r7, #8
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
 8008974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008976:	e029      	b.n	80089cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fa63 	bl	8008e46 <USBD_CtlError>
            err++;
 8008980:	7afb      	ldrb	r3, [r7, #11]
 8008982:	3301      	adds	r3, #1
 8008984:	72fb      	strb	r3, [r7, #11]
          break;
 8008986:	e021      	b.n	80089cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00b      	beq.n	80089ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	7c12      	ldrb	r2, [r2, #16]
 80089a0:	f107 0108 	add.w	r1, r7, #8
 80089a4:	4610      	mov	r0, r2
 80089a6:	4798      	blx	r3
 80089a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089aa:	e00f      	b.n	80089cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fa49 	bl	8008e46 <USBD_CtlError>
            err++;
 80089b4:	7afb      	ldrb	r3, [r7, #11]
 80089b6:	3301      	adds	r3, #1
 80089b8:	72fb      	strb	r3, [r7, #11]
          break;
 80089ba:	e007      	b.n	80089cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa41 	bl	8008e46 <USBD_CtlError>
          err++;
 80089c4:	7afb      	ldrb	r3, [r7, #11]
 80089c6:	3301      	adds	r3, #1
 80089c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80089ca:	bf00      	nop
      }
      break;
 80089cc:	e037      	b.n	8008a3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	7c1b      	ldrb	r3, [r3, #16]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d109      	bne.n	80089ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089de:	f107 0208 	add.w	r2, r7, #8
 80089e2:	4610      	mov	r0, r2
 80089e4:	4798      	blx	r3
 80089e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089e8:	e029      	b.n	8008a3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fa2a 	bl	8008e46 <USBD_CtlError>
        err++;
 80089f2:	7afb      	ldrb	r3, [r7, #11]
 80089f4:	3301      	adds	r3, #1
 80089f6:	72fb      	strb	r3, [r7, #11]
      break;
 80089f8:	e021      	b.n	8008a3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	7c1b      	ldrb	r3, [r3, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10d      	bne.n	8008a1e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0a:	f107 0208 	add.w	r2, r7, #8
 8008a0e:	4610      	mov	r0, r2
 8008a10:	4798      	blx	r3
 8008a12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	3301      	adds	r3, #1
 8008a18:	2207      	movs	r2, #7
 8008a1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a1c:	e00f      	b.n	8008a3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fa10 	bl	8008e46 <USBD_CtlError>
        err++;
 8008a26:	7afb      	ldrb	r3, [r7, #11]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a2c:	e007      	b.n	8008a3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fa08 	bl	8008e46 <USBD_CtlError>
      err++;
 8008a36:	7afb      	ldrb	r3, [r7, #11]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a3c:	bf00      	nop
  }

  if (err != 0U)
 8008a3e:	7afb      	ldrb	r3, [r7, #11]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d11e      	bne.n	8008a82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	88db      	ldrh	r3, [r3, #6]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d016      	beq.n	8008a7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008a4c:	893b      	ldrh	r3, [r7, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00e      	beq.n	8008a70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	88da      	ldrh	r2, [r3, #6]
 8008a56:	893b      	ldrh	r3, [r7, #8]
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	bf28      	it	cs
 8008a5c:	4613      	movcs	r3, r2
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a62:	893b      	ldrh	r3, [r7, #8]
 8008a64:	461a      	mov	r2, r3
 8008a66:	68f9      	ldr	r1, [r7, #12]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fa5d 	bl	8008f28 <USBD_CtlSendData>
 8008a6e:	e009      	b.n	8008a84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f9e7 	bl	8008e46 <USBD_CtlError>
 8008a78:	e004      	b.n	8008a84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 faae 	bl	8008fdc <USBD_CtlSendStatus>
 8008a80:	e000      	b.n	8008a84 <USBD_GetDescriptor+0x2cc>
    return;
 8008a82:	bf00      	nop
  }
}
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop

08008a8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	889b      	ldrh	r3, [r3, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d131      	bne.n	8008b02 <USBD_SetAddress+0x76>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	88db      	ldrh	r3, [r3, #6]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d12d      	bne.n	8008b02 <USBD_SetAddress+0x76>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	885b      	ldrh	r3, [r3, #2]
 8008aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8008aac:	d829      	bhi.n	8008b02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	885b      	ldrh	r3, [r3, #2]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d104      	bne.n	8008ad0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f9bc 	bl	8008e46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ace:	e01d      	b.n	8008b0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	7bfa      	ldrb	r2, [r7, #15]
 8008ad4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 feb5 	bl	800984c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fa7a 	bl	8008fdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d004      	beq.n	8008af8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2202      	movs	r2, #2
 8008af2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af6:	e009      	b.n	8008b0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b00:	e004      	b.n	8008b0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f99e 	bl	8008e46 <USBD_CtlError>
  }
}
 8008b0a:	bf00      	nop
 8008b0c:	bf00      	nop
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	885b      	ldrh	r3, [r3, #2]
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	4b4e      	ldr	r3, [pc, #312]	; (8008c64 <USBD_SetConfig+0x150>)
 8008b2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b2c:	4b4d      	ldr	r3, [pc, #308]	; (8008c64 <USBD_SetConfig+0x150>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d905      	bls.n	8008b40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f985 	bl	8008e46 <USBD_CtlError>
    return USBD_FAIL;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e08c      	b.n	8008c5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d002      	beq.n	8008b52 <USBD_SetConfig+0x3e>
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d029      	beq.n	8008ba4 <USBD_SetConfig+0x90>
 8008b50:	e075      	b.n	8008c3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b52:	4b44      	ldr	r3, [pc, #272]	; (8008c64 <USBD_SetConfig+0x150>)
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d020      	beq.n	8008b9c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b5a:	4b42      	ldr	r3, [pc, #264]	; (8008c64 <USBD_SetConfig+0x150>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b64:	4b3f      	ldr	r3, [pc, #252]	; (8008c64 <USBD_SetConfig+0x150>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff f821 	bl	8007bb2 <USBD_SetClassConfig>
 8008b70:	4603      	mov	r3, r0
 8008b72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d008      	beq.n	8008b8c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f962 	bl	8008e46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2202      	movs	r2, #2
 8008b86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b8a:	e065      	b.n	8008c58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fa25 	bl	8008fdc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2203      	movs	r2, #3
 8008b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b9a:	e05d      	b.n	8008c58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fa1d 	bl	8008fdc <USBD_CtlSendStatus>
      break;
 8008ba2:	e059      	b.n	8008c58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008ba4:	4b2f      	ldr	r3, [pc, #188]	; (8008c64 <USBD_SetConfig+0x150>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d112      	bne.n	8008bd2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008bb4:	4b2b      	ldr	r3, [pc, #172]	; (8008c64 <USBD_SetConfig+0x150>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bbe:	4b29      	ldr	r3, [pc, #164]	; (8008c64 <USBD_SetConfig+0x150>)
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7ff f810 	bl	8007bea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa06 	bl	8008fdc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bd0:	e042      	b.n	8008c58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008bd2:	4b24      	ldr	r3, [pc, #144]	; (8008c64 <USBD_SetConfig+0x150>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d02a      	beq.n	8008c36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f7fe fffe 	bl	8007bea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008bee:	4b1d      	ldr	r3, [pc, #116]	; (8008c64 <USBD_SetConfig+0x150>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bf8:	4b1a      	ldr	r3, [pc, #104]	; (8008c64 <USBD_SetConfig+0x150>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7fe ffd7 	bl	8007bb2 <USBD_SetClassConfig>
 8008c04:	4603      	mov	r3, r0
 8008c06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00f      	beq.n	8008c2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f918 	bl	8008e46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7fe ffe3 	bl	8007bea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2202      	movs	r2, #2
 8008c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c2c:	e014      	b.n	8008c58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f9d4 	bl	8008fdc <USBD_CtlSendStatus>
      break;
 8008c34:	e010      	b.n	8008c58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f9d0 	bl	8008fdc <USBD_CtlSendStatus>
      break;
 8008c3c:	e00c      	b.n	8008c58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f900 	bl	8008e46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c46:	4b07      	ldr	r3, [pc, #28]	; (8008c64 <USBD_SetConfig+0x150>)
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7fe ffcc 	bl	8007bea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c52:	2303      	movs	r3, #3
 8008c54:	73fb      	strb	r3, [r7, #15]
      break;
 8008c56:	bf00      	nop
  }

  return ret;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	2000028c 	.word	0x2000028c

08008c68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	88db      	ldrh	r3, [r3, #6]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d004      	beq.n	8008c84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f8e2 	bl	8008e46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c82:	e023      	b.n	8008ccc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	dc02      	bgt.n	8008c96 <USBD_GetConfig+0x2e>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	dc03      	bgt.n	8008c9c <USBD_GetConfig+0x34>
 8008c94:	e015      	b.n	8008cc2 <USBD_GetConfig+0x5a>
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d00b      	beq.n	8008cb2 <USBD_GetConfig+0x4a>
 8008c9a:	e012      	b.n	8008cc2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f93c 	bl	8008f28 <USBD_CtlSendData>
        break;
 8008cb0:	e00c      	b.n	8008ccc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f934 	bl	8008f28 <USBD_CtlSendData>
        break;
 8008cc0:	e004      	b.n	8008ccc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f8be 	bl	8008e46 <USBD_CtlError>
        break;
 8008cca:	bf00      	nop
}
 8008ccc:	bf00      	nop
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d81e      	bhi.n	8008d2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	88db      	ldrh	r3, [r3, #6]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d004      	beq.n	8008cfe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f8a5 	bl	8008e46 <USBD_CtlError>
        break;
 8008cfc:	e01a      	b.n	8008d34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d005      	beq.n	8008d1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	f043 0202 	orr.w	r2, r3, #2
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	330c      	adds	r3, #12
 8008d1e:	2202      	movs	r2, #2
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f900 	bl	8008f28 <USBD_CtlSendData>
      break;
 8008d28:	e004      	b.n	8008d34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f88a 	bl	8008e46 <USBD_CtlError>
      break;
 8008d32:	bf00      	nop
  }
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	885b      	ldrh	r3, [r3, #2]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d107      	bne.n	8008d5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f940 	bl	8008fdc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d5c:	e013      	b.n	8008d86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	885b      	ldrh	r3, [r3, #2]
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d10b      	bne.n	8008d7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	889b      	ldrh	r3, [r3, #4]
 8008d6a:	0a1b      	lsrs	r3, r3, #8
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f930 	bl	8008fdc <USBD_CtlSendStatus>
}
 8008d7c:	e003      	b.n	8008d86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f860 	bl	8008e46 <USBD_CtlError>
}
 8008d86:	bf00      	nop
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	3b01      	subs	r3, #1
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d80b      	bhi.n	8008dbe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	885b      	ldrh	r3, [r3, #2]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d10c      	bne.n	8008dc8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f910 	bl	8008fdc <USBD_CtlSendStatus>
      }
      break;
 8008dbc:	e004      	b.n	8008dc8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f840 	bl	8008e46 <USBD_CtlError>
      break;
 8008dc6:	e000      	b.n	8008dca <USBD_ClrFeature+0x3c>
      break;
 8008dc8:	bf00      	nop
  }
}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	781a      	ldrb	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	781a      	ldrb	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f7ff fa41 	bl	8008284 <SWAPBYTE>
 8008e02:	4603      	mov	r3, r0
 8008e04:	461a      	mov	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	3301      	adds	r3, #1
 8008e14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f7ff fa34 	bl	8008284 <SWAPBYTE>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	461a      	mov	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3301      	adds	r3, #1
 8008e28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f7ff fa27 	bl	8008284 <SWAPBYTE>
 8008e36:	4603      	mov	r3, r0
 8008e38:	461a      	mov	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	80da      	strh	r2, [r3, #6]
}
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e50:	2180      	movs	r1, #128	; 0x80
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fc90 	bl	8009778 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e58:	2100      	movs	r1, #0
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fc8c 	bl	8009778 <USBD_LL_StallEP>
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e74:	2300      	movs	r3, #0
 8008e76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d036      	beq.n	8008eec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e82:	6938      	ldr	r0, [r7, #16]
 8008e84:	f000 f836 	bl	8008ef4 <USBD_GetLen>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	005b      	lsls	r3, r3, #1
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	7812      	ldrb	r2, [r2, #0]
 8008ea0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	4413      	add	r3, r2
 8008eae:	2203      	movs	r2, #3
 8008eb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008eb8:	e013      	b.n	8008ee2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	7812      	ldrb	r2, [r2, #0]
 8008ec4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	613b      	str	r3, [r7, #16]
    idx++;
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ed2:	7dfb      	ldrb	r3, [r7, #23]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	2200      	movs	r2, #0
 8008eda:	701a      	strb	r2, [r3, #0]
    idx++;
 8008edc:	7dfb      	ldrb	r3, [r7, #23]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1e7      	bne.n	8008eba <USBD_GetString+0x52>
 8008eea:	e000      	b.n	8008eee <USBD_GetString+0x86>
    return;
 8008eec:	bf00      	nop
  }
}
 8008eee:	3718      	adds	r7, #24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f04:	e005      	b.n	8008f12 <USBD_GetLen+0x1e>
  {
    len++;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1f5      	bne.n	8008f06 <USBD_GetLen+0x12>
  }

  return len;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2202      	movs	r2, #2
 8008f38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f000 fc9b 	bl	800988a <USBD_LL_Transmit>

  return USBD_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b084      	sub	sp, #16
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	60f8      	str	r0, [r7, #12]
 8008f66:	60b9      	str	r1, [r7, #8]
 8008f68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	2100      	movs	r1, #0
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 fc8a 	bl	800988a <USBD_LL_Transmit>

  return USBD_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2203      	movs	r2, #3
 8008f90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	2100      	movs	r1, #0
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 fc8e 	bl	80098cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	60b9      	str	r1, [r7, #8]
 8008fc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	2100      	movs	r1, #0
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 fc7d 	bl	80098cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2204      	movs	r2, #4
 8008fe8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fec:	2300      	movs	r3, #0
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fc49 	bl	800988a <USBD_LL_Transmit>

  return USBD_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2205      	movs	r2, #5
 800900e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009012:	2300      	movs	r3, #0
 8009014:	2200      	movs	r2, #0
 8009016:	2100      	movs	r1, #0
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fc57 	bl	80098cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800902c:	2200      	movs	r2, #0
 800902e:	4912      	ldr	r1, [pc, #72]	; (8009078 <MX_USB_DEVICE_Init+0x50>)
 8009030:	4812      	ldr	r0, [pc, #72]	; (800907c <MX_USB_DEVICE_Init+0x54>)
 8009032:	f7fe fd41 	bl	8007ab8 <USBD_Init>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800903c:	f7f7 fd74 	bl	8000b28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8009040:	490f      	ldr	r1, [pc, #60]	; (8009080 <MX_USB_DEVICE_Init+0x58>)
 8009042:	480e      	ldr	r0, [pc, #56]	; (800907c <MX_USB_DEVICE_Init+0x54>)
 8009044:	f7fe fd68 	bl	8007b18 <USBD_RegisterClass>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800904e:	f7f7 fd6b 	bl	8000b28 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8009052:	490c      	ldr	r1, [pc, #48]	; (8009084 <MX_USB_DEVICE_Init+0x5c>)
 8009054:	4809      	ldr	r0, [pc, #36]	; (800907c <MX_USB_DEVICE_Init+0x54>)
 8009056:	f7fe fce1 	bl	8007a1c <USBD_AUDIO_RegisterInterface>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009060:	f7f7 fd62 	bl	8000b28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009064:	4805      	ldr	r0, [pc, #20]	; (800907c <MX_USB_DEVICE_Init+0x54>)
 8009066:	f7fe fd8d 	bl	8007b84 <USBD_Start>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009070:	f7f7 fd5a 	bl	8000b28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009074:	bf00      	nop
 8009076:	bd80      	pop	{r7, pc}
 8009078:	200000dc 	.word	0x200000dc
 800907c:	20000290 	.word	0x20000290
 8009080:	2000000c 	.word	0x2000000c
 8009084:	200000c0 	.word	0x200000c0

08009088 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8009094:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8009096:	4618      	mov	r0, r3
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
	Audio_Player_Stop();
 80090aa:	f7f7 facd 	bl	8000648 <Audio_Player_Stop>
  UNUSED(options);
  return (USBD_OK);
 80090ae:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	4613      	mov	r3, r2
 80090c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d002      	beq.n	80090d2 <AUDIO_AudioCmd_FS+0x1a>
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d005      	beq.n	80090dc <AUDIO_AudioCmd_FS+0x24>
 80090d0:	e009      	b.n	80090e6 <AUDIO_AudioCmd_FS+0x2e>
  {
    case AUDIO_CMD_START:
    	Audio_Player_Play(pbuf, size);
 80090d2:	68b9      	ldr	r1, [r7, #8]
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f7f7 fa97 	bl	8000608 <Audio_Player_Play>
    break;
 80090da:	e004      	b.n	80090e6 <AUDIO_AudioCmd_FS+0x2e>

    case AUDIO_CMD_PLAY:
    	Audio_Player_Play(pbuf, size);
 80090dc:	68b9      	ldr	r1, [r7, #8]
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f7f7 fa92 	bl	8000608 <Audio_Player_Play>
    break;
 80090e4:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 80090e6:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 80090fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 8009112:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009114:	4618      	mov	r0, r3
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	4613      	mov	r3, r2
 800912c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800912e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009132:	4804      	ldr	r0, [pc, #16]	; (8009144 <AUDIO_PeriodicTC_FS+0x24>)
 8009134:	f7f8 ffd7 	bl	80020e6 <HAL_GPIO_TogglePin>
  return (USBD_OK);
 8009138:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	40020800 	.word	0x40020800

08009148 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800914c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009150:	4802      	ldr	r0, [pc, #8]	; (800915c <AUDIO_GetState_FS+0x14>)
 8009152:	f7f8 ffc8 	bl	80020e6 <HAL_GPIO_TogglePin>
  return (USBD_OK);
 8009156:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009158:	4618      	mov	r0, r3
 800915a:	bd80      	pop	{r7, pc}
 800915c:	40020800 	.word	0x40020800

08009160 <TransferComplete_CallBack_FS>:
/**
  * @brief  Manages the DMA full transfer complete event.
  * @retval None
  */
void TransferComplete_CallBack_FS(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_FULL);
 8009164:	2102      	movs	r1, #2
 8009166:	4802      	ldr	r0, [pc, #8]	; (8009170 <TransferComplete_CallBack_FS+0x10>)
 8009168:	f7fe fa6d 	bl	8007646 <USBD_AUDIO_Sync>
  /* USER CODE END 7 */
}
 800916c:	bf00      	nop
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20000290 	.word	0x20000290

08009174 <HalfTransfer_CallBack_FS>:
/**
  * @brief  Manages the DMA Half transfer complete event.
  * @retval None
  */
void HalfTransfer_CallBack_FS(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_HALF);
 8009178:	2101      	movs	r1, #1
 800917a:	4802      	ldr	r0, [pc, #8]	; (8009184 <HalfTransfer_CallBack_FS+0x10>)
 800917c:	f7fe fa63 	bl	8007646 <USBD_AUDIO_Sync>
  /* USER CODE END 8 */
}
 8009180:	bf00      	nop
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20000290 	.word	0x20000290

08009188 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	4603      	mov	r3, r0
 8009190:	6039      	str	r1, [r7, #0]
 8009192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	2212      	movs	r2, #18
 8009198:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800919a:	4b03      	ldr	r3, [pc, #12]	; (80091a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	200000f8 	.word	0x200000f8

080091ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	6039      	str	r1, [r7, #0]
 80091b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	2204      	movs	r2, #4
 80091bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091be:	4b03      	ldr	r3, [pc, #12]	; (80091cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	2000010c 	.word	0x2000010c

080091d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	6039      	str	r1, [r7, #0]
 80091da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d105      	bne.n	80091ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	4907      	ldr	r1, [pc, #28]	; (8009204 <USBD_FS_ProductStrDescriptor+0x34>)
 80091e6:	4808      	ldr	r0, [pc, #32]	; (8009208 <USBD_FS_ProductStrDescriptor+0x38>)
 80091e8:	f7ff fe3e 	bl	8008e68 <USBD_GetString>
 80091ec:	e004      	b.n	80091f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	4904      	ldr	r1, [pc, #16]	; (8009204 <USBD_FS_ProductStrDescriptor+0x34>)
 80091f2:	4805      	ldr	r0, [pc, #20]	; (8009208 <USBD_FS_ProductStrDescriptor+0x38>)
 80091f4:	f7ff fe38 	bl	8008e68 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091f8:	4b02      	ldr	r3, [pc, #8]	; (8009204 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	2000056c 	.word	0x2000056c
 8009208:	08009a2c 	.word	0x08009a2c

0800920c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	6039      	str	r1, [r7, #0]
 8009216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	4904      	ldr	r1, [pc, #16]	; (800922c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800921c:	4804      	ldr	r0, [pc, #16]	; (8009230 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800921e:	f7ff fe23 	bl	8008e68 <USBD_GetString>
  return USBD_StrDesc;
 8009222:	4b02      	ldr	r3, [pc, #8]	; (800922c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009224:	4618      	mov	r0, r3
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	2000056c 	.word	0x2000056c
 8009230:	08009a44 	.word	0x08009a44

08009234 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	6039      	str	r1, [r7, #0]
 800923e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	221a      	movs	r2, #26
 8009244:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009246:	f000 f843 	bl	80092d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800924a:	4b02      	ldr	r3, [pc, #8]	; (8009254 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	20000110 	.word	0x20000110

08009258 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009264:	79fb      	ldrb	r3, [r7, #7]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d105      	bne.n	8009276 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	4907      	ldr	r1, [pc, #28]	; (800928c <USBD_FS_ConfigStrDescriptor+0x34>)
 800926e:	4808      	ldr	r0, [pc, #32]	; (8009290 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009270:	f7ff fdfa 	bl	8008e68 <USBD_GetString>
 8009274:	e004      	b.n	8009280 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	4904      	ldr	r1, [pc, #16]	; (800928c <USBD_FS_ConfigStrDescriptor+0x34>)
 800927a:	4805      	ldr	r0, [pc, #20]	; (8009290 <USBD_FS_ConfigStrDescriptor+0x38>)
 800927c:	f7ff fdf4 	bl	8008e68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009280:	4b02      	ldr	r3, [pc, #8]	; (800928c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009282:	4618      	mov	r0, r3
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	2000056c 	.word	0x2000056c
 8009290:	08009a58 	.word	0x08009a58

08009294 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	6039      	str	r1, [r7, #0]
 800929e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d105      	bne.n	80092b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	4907      	ldr	r1, [pc, #28]	; (80092c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092aa:	4808      	ldr	r0, [pc, #32]	; (80092cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092ac:	f7ff fddc 	bl	8008e68 <USBD_GetString>
 80092b0:	e004      	b.n	80092bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	4904      	ldr	r1, [pc, #16]	; (80092c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092b6:	4805      	ldr	r0, [pc, #20]	; (80092cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092b8:	f7ff fdd6 	bl	8008e68 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092bc:	4b02      	ldr	r3, [pc, #8]	; (80092c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	2000056c 	.word	0x2000056c
 80092cc:	08009a68 	.word	0x08009a68

080092d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80092d6:	4b0f      	ldr	r3, [pc, #60]	; (8009314 <Get_SerialNum+0x44>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80092dc:	4b0e      	ldr	r3, [pc, #56]	; (8009318 <Get_SerialNum+0x48>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80092e2:	4b0e      	ldr	r3, [pc, #56]	; (800931c <Get_SerialNum+0x4c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4413      	add	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d009      	beq.n	800930a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80092f6:	2208      	movs	r2, #8
 80092f8:	4909      	ldr	r1, [pc, #36]	; (8009320 <Get_SerialNum+0x50>)
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 f814 	bl	8009328 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009300:	2204      	movs	r2, #4
 8009302:	4908      	ldr	r1, [pc, #32]	; (8009324 <Get_SerialNum+0x54>)
 8009304:	68b8      	ldr	r0, [r7, #8]
 8009306:	f000 f80f 	bl	8009328 <IntToUnicode>
  }
}
 800930a:	bf00      	nop
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	1fff7a10 	.word	0x1fff7a10
 8009318:	1fff7a14 	.word	0x1fff7a14
 800931c:	1fff7a18 	.word	0x1fff7a18
 8009320:	20000112 	.word	0x20000112
 8009324:	20000122 	.word	0x20000122

08009328 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	4613      	mov	r3, r2
 8009334:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800933a:	2300      	movs	r3, #0
 800933c:	75fb      	strb	r3, [r7, #23]
 800933e:	e027      	b.n	8009390 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	0f1b      	lsrs	r3, r3, #28
 8009344:	2b09      	cmp	r3, #9
 8009346:	d80b      	bhi.n	8009360 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	0f1b      	lsrs	r3, r3, #28
 800934c:	b2da      	uxtb	r2, r3
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	4619      	mov	r1, r3
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	440b      	add	r3, r1
 8009358:	3230      	adds	r2, #48	; 0x30
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	e00a      	b.n	8009376 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	0f1b      	lsrs	r3, r3, #28
 8009364:	b2da      	uxtb	r2, r3
 8009366:	7dfb      	ldrb	r3, [r7, #23]
 8009368:	005b      	lsls	r3, r3, #1
 800936a:	4619      	mov	r1, r3
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	440b      	add	r3, r1
 8009370:	3237      	adds	r2, #55	; 0x37
 8009372:	b2d2      	uxtb	r2, r2
 8009374:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	011b      	lsls	r3, r3, #4
 800937a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800937c:	7dfb      	ldrb	r3, [r7, #23]
 800937e:	005b      	lsls	r3, r3, #1
 8009380:	3301      	adds	r3, #1
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	4413      	add	r3, r2
 8009386:	2200      	movs	r2, #0
 8009388:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	3301      	adds	r3, #1
 800938e:	75fb      	strb	r3, [r7, #23]
 8009390:	7dfa      	ldrb	r2, [r7, #23]
 8009392:	79fb      	ldrb	r3, [r7, #7]
 8009394:	429a      	cmp	r2, r3
 8009396:	d3d3      	bcc.n	8009340 <IntToUnicode+0x18>
  }
}
 8009398:	bf00      	nop
 800939a:	bf00      	nop
 800939c:	371c      	adds	r7, #28
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
	...

080093a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b08a      	sub	sp, #40	; 0x28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093b0:	f107 0314 	add.w	r3, r7, #20
 80093b4:	2200      	movs	r2, #0
 80093b6:	601a      	str	r2, [r3, #0]
 80093b8:	605a      	str	r2, [r3, #4]
 80093ba:	609a      	str	r2, [r3, #8]
 80093bc:	60da      	str	r2, [r3, #12]
 80093be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093c8:	d13a      	bne.n	8009440 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093ca:	2300      	movs	r3, #0
 80093cc:	613b      	str	r3, [r7, #16]
 80093ce:	4b1e      	ldr	r3, [pc, #120]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 80093d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d2:	4a1d      	ldr	r2, [pc, #116]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 80093d4:	f043 0301 	orr.w	r3, r3, #1
 80093d8:	6313      	str	r3, [r2, #48]	; 0x30
 80093da:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 80093dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	613b      	str	r3, [r7, #16]
 80093e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80093e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80093ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093ec:	2302      	movs	r3, #2
 80093ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093f0:	2300      	movs	r3, #0
 80093f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093f4:	2303      	movs	r3, #3
 80093f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80093f8:	230a      	movs	r3, #10
 80093fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093fc:	f107 0314 	add.w	r3, r7, #20
 8009400:	4619      	mov	r1, r3
 8009402:	4812      	ldr	r0, [pc, #72]	; (800944c <HAL_PCD_MspInit+0xa4>)
 8009404:	f7f8 fcd2 	bl	8001dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009408:	4b0f      	ldr	r3, [pc, #60]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 800940a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940c:	4a0e      	ldr	r2, [pc, #56]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 800940e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009412:	6353      	str	r3, [r2, #52]	; 0x34
 8009414:	2300      	movs	r3, #0
 8009416:	60fb      	str	r3, [r7, #12]
 8009418:	4b0b      	ldr	r3, [pc, #44]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 800941a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941c:	4a0a      	ldr	r2, [pc, #40]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 800941e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009422:	6453      	str	r3, [r2, #68]	; 0x44
 8009424:	4b08      	ldr	r3, [pc, #32]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 8009426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009430:	2200      	movs	r2, #0
 8009432:	2100      	movs	r1, #0
 8009434:	2043      	movs	r0, #67	; 0x43
 8009436:	f7f8 f886 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800943a:	2043      	movs	r0, #67	; 0x43
 800943c:	f7f8 f89f 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009440:	bf00      	nop
 8009442:	3728      	adds	r7, #40	; 0x28
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	40023800 	.word	0x40023800
 800944c:	40020000 	.word	0x40020000

08009450 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009464:	4619      	mov	r1, r3
 8009466:	4610      	mov	r0, r2
 8009468:	f7fe fbd9 	bl	8007c1e <USBD_LL_SetupStage>
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	6879      	ldr	r1, [r7, #4]
 800948a:	4613      	mov	r3, r2
 800948c:	00db      	lsls	r3, r3, #3
 800948e:	4413      	add	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	440b      	add	r3, r1
 8009494:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	4619      	mov	r1, r3
 800949e:	f7fe fc13 	bl	8007cc8 <USBD_LL_DataOutStage>
}
 80094a2:	bf00      	nop
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80094bc:	78fa      	ldrb	r2, [r7, #3]
 80094be:	6879      	ldr	r1, [r7, #4]
 80094c0:	4613      	mov	r3, r2
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	440b      	add	r3, r1
 80094ca:	334c      	adds	r3, #76	; 0x4c
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	4619      	mov	r1, r3
 80094d2:	f7fe fcac 	bl	8007e2e <USBD_LL_DataInStage>
}
 80094d6:	bf00      	nop
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b082      	sub	sp, #8
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fe fde0 	bl	80080b2 <USBD_LL_SOF>
}
 80094f2:	bf00      	nop
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009502:	2301      	movs	r3, #1
 8009504:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	2b02      	cmp	r3, #2
 800950c:	d001      	beq.n	8009512 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800950e:	f7f7 fb0b 	bl	8000b28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009518:	7bfa      	ldrb	r2, [r7, #15]
 800951a:	4611      	mov	r1, r2
 800951c:	4618      	mov	r0, r3
 800951e:	f7fe fd8a 	bl	8008036 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009528:	4618      	mov	r0, r3
 800952a:	f7fe fd32 	bl	8007f92 <USBD_LL_Reset>
}
 800952e:	bf00      	nop
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
	...

08009538 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe fd85 	bl	8008056 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	6812      	ldr	r2, [r2, #0]
 800955a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800955e:	f043 0301 	orr.w	r3, r3, #1
 8009562:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d005      	beq.n	8009578 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800956c:	4b04      	ldr	r3, [pc, #16]	; (8009580 <HAL_PCD_SuspendCallback+0x48>)
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	4a03      	ldr	r2, [pc, #12]	; (8009580 <HAL_PCD_SuspendCallback+0x48>)
 8009572:	f043 0306 	orr.w	r3, r3, #6
 8009576:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009578:	bf00      	nop
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	e000ed00 	.word	0xe000ed00

08009584 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe fd75 	bl	8008082 <USBD_LL_Resume>
}
 8009598:	bf00      	nop
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095b2:	78fa      	ldrb	r2, [r7, #3]
 80095b4:	4611      	mov	r1, r2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fe fdcd 	bl	8008156 <USBD_LL_IsoOUTIncomplete>
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095d6:	78fa      	ldrb	r2, [r7, #3]
 80095d8:	4611      	mov	r1, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fd89 	bl	80080f2 <USBD_LL_IsoINIncomplete>
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fe fddf 	bl	80081ba <USBD_LL_DevConnected>
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009612:	4618      	mov	r0, r3
 8009614:	f7fe fddc 	bl	80081d0 <USBD_LL_DevDisconnected>
}
 8009618:	bf00      	nop
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d13c      	bne.n	80096aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009630:	4a20      	ldr	r2, [pc, #128]	; (80096b4 <USBD_LL_Init+0x94>)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a1e      	ldr	r2, [pc, #120]	; (80096b4 <USBD_LL_Init+0x94>)
 800963c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009640:	4b1c      	ldr	r3, [pc, #112]	; (80096b4 <USBD_LL_Init+0x94>)
 8009642:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009646:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009648:	4b1a      	ldr	r3, [pc, #104]	; (80096b4 <USBD_LL_Init+0x94>)
 800964a:	2204      	movs	r2, #4
 800964c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800964e:	4b19      	ldr	r3, [pc, #100]	; (80096b4 <USBD_LL_Init+0x94>)
 8009650:	2202      	movs	r2, #2
 8009652:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009654:	4b17      	ldr	r3, [pc, #92]	; (80096b4 <USBD_LL_Init+0x94>)
 8009656:	2200      	movs	r2, #0
 8009658:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800965a:	4b16      	ldr	r3, [pc, #88]	; (80096b4 <USBD_LL_Init+0x94>)
 800965c:	2202      	movs	r2, #2
 800965e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009660:	4b14      	ldr	r3, [pc, #80]	; (80096b4 <USBD_LL_Init+0x94>)
 8009662:	2200      	movs	r2, #0
 8009664:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009666:	4b13      	ldr	r3, [pc, #76]	; (80096b4 <USBD_LL_Init+0x94>)
 8009668:	2200      	movs	r2, #0
 800966a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800966c:	4b11      	ldr	r3, [pc, #68]	; (80096b4 <USBD_LL_Init+0x94>)
 800966e:	2200      	movs	r2, #0
 8009670:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009672:	4b10      	ldr	r3, [pc, #64]	; (80096b4 <USBD_LL_Init+0x94>)
 8009674:	2200      	movs	r2, #0
 8009676:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009678:	4b0e      	ldr	r3, [pc, #56]	; (80096b4 <USBD_LL_Init+0x94>)
 800967a:	2200      	movs	r2, #0
 800967c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800967e:	480d      	ldr	r0, [pc, #52]	; (80096b4 <USBD_LL_Init+0x94>)
 8009680:	f7f9 fcf2 	bl	8003068 <HAL_PCD_Init>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800968a:	f7f7 fa4d 	bl	8000b28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800968e:	2180      	movs	r1, #128	; 0x80
 8009690:	4808      	ldr	r0, [pc, #32]	; (80096b4 <USBD_LL_Init+0x94>)
 8009692:	f7fa ff4a 	bl	800452a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009696:	2240      	movs	r2, #64	; 0x40
 8009698:	2100      	movs	r1, #0
 800969a:	4806      	ldr	r0, [pc, #24]	; (80096b4 <USBD_LL_Init+0x94>)
 800969c:	f7fa fefe 	bl	800449c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80096a0:	2280      	movs	r2, #128	; 0x80
 80096a2:	2101      	movs	r1, #1
 80096a4:	4803      	ldr	r0, [pc, #12]	; (80096b4 <USBD_LL_Init+0x94>)
 80096a6:	f7fa fef9 	bl	800449c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	2000076c 	.word	0x2000076c

080096b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7f9 fde7 	bl	80032a2 <HAL_PCD_Start>
 80096d4:	4603      	mov	r3, r0
 80096d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 f942 	bl	8009964 <USBD_Get_USB_Status>
 80096e0:	4603      	mov	r3, r0
 80096e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	4608      	mov	r0, r1
 80096f8:	4611      	mov	r1, r2
 80096fa:	461a      	mov	r2, r3
 80096fc:	4603      	mov	r3, r0
 80096fe:	70fb      	strb	r3, [r7, #3]
 8009700:	460b      	mov	r3, r1
 8009702:	70bb      	strb	r3, [r7, #2]
 8009704:	4613      	mov	r3, r2
 8009706:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009716:	78bb      	ldrb	r3, [r7, #2]
 8009718:	883a      	ldrh	r2, [r7, #0]
 800971a:	78f9      	ldrb	r1, [r7, #3]
 800971c:	f7fa fab8 	bl	8003c90 <HAL_PCD_EP_Open>
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 f91c 	bl	8009964 <USBD_Get_USB_Status>
 800972c:	4603      	mov	r3, r0
 800972e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009730:	7bbb      	ldrb	r3, [r7, #14]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009754:	78fa      	ldrb	r2, [r7, #3]
 8009756:	4611      	mov	r1, r2
 8009758:	4618      	mov	r0, r3
 800975a:	f7fa fb01 	bl	8003d60 <HAL_PCD_EP_Close>
 800975e:	4603      	mov	r3, r0
 8009760:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	4618      	mov	r0, r3
 8009766:	f000 f8fd 	bl	8009964 <USBD_Get_USB_Status>
 800976a:	4603      	mov	r3, r0
 800976c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800976e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009792:	78fa      	ldrb	r2, [r7, #3]
 8009794:	4611      	mov	r1, r2
 8009796:	4618      	mov	r0, r3
 8009798:	f7fa fbd9 	bl	8003f4e <HAL_PCD_EP_SetStall>
 800979c:	4603      	mov	r3, r0
 800979e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 f8de 	bl	8009964 <USBD_Get_USB_Status>
 80097a8:	4603      	mov	r3, r0
 80097aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097d0:	78fa      	ldrb	r2, [r7, #3]
 80097d2:	4611      	mov	r1, r2
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fa fc1e 	bl	8004016 <HAL_PCD_EP_ClrStall>
 80097da:	4603      	mov	r3, r0
 80097dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097de:	7bfb      	ldrb	r3, [r7, #15]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 f8bf 	bl	8009964 <USBD_Get_USB_Status>
 80097e6:	4603      	mov	r3, r0
 80097e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009806:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800980c:	2b00      	cmp	r3, #0
 800980e:	da0b      	bge.n	8009828 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009816:	68f9      	ldr	r1, [r7, #12]
 8009818:	4613      	mov	r3, r2
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	4413      	add	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	440b      	add	r3, r1
 8009822:	333e      	adds	r3, #62	; 0x3e
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	e00b      	b.n	8009840 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800982e:	68f9      	ldr	r1, [r7, #12]
 8009830:	4613      	mov	r3, r2
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	4413      	add	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	440b      	add	r3, r1
 800983a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800983e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	460b      	mov	r3, r1
 8009856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009866:	78fa      	ldrb	r2, [r7, #3]
 8009868:	4611      	mov	r1, r2
 800986a:	4618      	mov	r0, r3
 800986c:	f7fa f9eb 	bl	8003c46 <HAL_PCD_SetAddress>
 8009870:	4603      	mov	r3, r0
 8009872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	4618      	mov	r0, r3
 8009878:	f000 f874 	bl	8009964 <USBD_Get_USB_Status>
 800987c:	4603      	mov	r3, r0
 800987e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009880:	7bbb      	ldrb	r3, [r7, #14]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b086      	sub	sp, #24
 800988e:	af00      	add	r7, sp, #0
 8009890:	60f8      	str	r0, [r7, #12]
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	603b      	str	r3, [r7, #0]
 8009896:	460b      	mov	r3, r1
 8009898:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098a8:	7af9      	ldrb	r1, [r7, #11]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	f7fa fb04 	bl	8003eba <HAL_PCD_EP_Transmit>
 80098b2:	4603      	mov	r3, r0
 80098b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 f853 	bl	8009964 <USBD_Get_USB_Status>
 80098be:	4603      	mov	r3, r0
 80098c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	607a      	str	r2, [r7, #4]
 80098d6:	603b      	str	r3, [r7, #0]
 80098d8:	460b      	mov	r3, r1
 80098da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098ea:	7af9      	ldrb	r1, [r7, #11]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	f7fa fa80 	bl	8003df4 <HAL_PCD_EP_Receive>
 80098f4:	4603      	mov	r3, r0
 80098f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 f832 	bl	8009964 <USBD_Get_USB_Status>
 8009900:	4603      	mov	r3, r0
 8009902:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009904:	7dbb      	ldrb	r3, [r7, #22]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	460b      	mov	r3, r1
 8009918:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009920:	78fa      	ldrb	r2, [r7, #3]
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f7fa fab0 	bl	8003e8a <HAL_PCD_EP_GetRxCount>
 800992a:	4603      	mov	r3, r0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800993c:	4b03      	ldr	r3, [pc, #12]	; (800994c <USBD_static_malloc+0x18>)
}
 800993e:	4618      	mov	r0, r3
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	20000c78 	.word	0x20000c78

08009950 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]

}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	2b03      	cmp	r3, #3
 8009976:	d817      	bhi.n	80099a8 <USBD_Get_USB_Status+0x44>
 8009978:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <USBD_Get_USB_Status+0x1c>)
 800997a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997e:	bf00      	nop
 8009980:	08009991 	.word	0x08009991
 8009984:	08009997 	.word	0x08009997
 8009988:	0800999d 	.word	0x0800999d
 800998c:	080099a3 	.word	0x080099a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]
    break;
 8009994:	e00b      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009996:	2303      	movs	r3, #3
 8009998:	73fb      	strb	r3, [r7, #15]
    break;
 800999a:	e008      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800999c:	2301      	movs	r3, #1
 800999e:	73fb      	strb	r3, [r7, #15]
    break;
 80099a0:	e005      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099a2:	2303      	movs	r3, #3
 80099a4:	73fb      	strb	r3, [r7, #15]
    break;
 80099a6:	e002      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099a8:	2303      	movs	r3, #3
 80099aa:	73fb      	strb	r3, [r7, #15]
    break;
 80099ac:	bf00      	nop
  }
  return usb_status;
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <__libc_init_array>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	4d0d      	ldr	r5, [pc, #52]	; (80099f4 <__libc_init_array+0x38>)
 80099c0:	4c0d      	ldr	r4, [pc, #52]	; (80099f8 <__libc_init_array+0x3c>)
 80099c2:	1b64      	subs	r4, r4, r5
 80099c4:	10a4      	asrs	r4, r4, #2
 80099c6:	2600      	movs	r6, #0
 80099c8:	42a6      	cmp	r6, r4
 80099ca:	d109      	bne.n	80099e0 <__libc_init_array+0x24>
 80099cc:	4d0b      	ldr	r5, [pc, #44]	; (80099fc <__libc_init_array+0x40>)
 80099ce:	4c0c      	ldr	r4, [pc, #48]	; (8009a00 <__libc_init_array+0x44>)
 80099d0:	f000 f820 	bl	8009a14 <_init>
 80099d4:	1b64      	subs	r4, r4, r5
 80099d6:	10a4      	asrs	r4, r4, #2
 80099d8:	2600      	movs	r6, #0
 80099da:	42a6      	cmp	r6, r4
 80099dc:	d105      	bne.n	80099ea <__libc_init_array+0x2e>
 80099de:	bd70      	pop	{r4, r5, r6, pc}
 80099e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099e4:	4798      	blx	r3
 80099e6:	3601      	adds	r6, #1
 80099e8:	e7ee      	b.n	80099c8 <__libc_init_array+0xc>
 80099ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ee:	4798      	blx	r3
 80099f0:	3601      	adds	r6, #1
 80099f2:	e7f2      	b.n	80099da <__libc_init_array+0x1e>
 80099f4:	08009a98 	.word	0x08009a98
 80099f8:	08009a98 	.word	0x08009a98
 80099fc:	08009a98 	.word	0x08009a98
 8009a00:	08009a9c 	.word	0x08009a9c

08009a04 <memset>:
 8009a04:	4402      	add	r2, r0
 8009a06:	4603      	mov	r3, r0
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d100      	bne.n	8009a0e <memset+0xa>
 8009a0c:	4770      	bx	lr
 8009a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a12:	e7f9      	b.n	8009a08 <memset+0x4>

08009a14 <_init>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	bf00      	nop
 8009a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1a:	bc08      	pop	{r3}
 8009a1c:	469e      	mov	lr, r3
 8009a1e:	4770      	bx	lr

08009a20 <_fini>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	bf00      	nop
 8009a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a26:	bc08      	pop	{r3}
 8009a28:	469e      	mov	lr, r3
 8009a2a:	4770      	bx	lr
